Searching 9349 files for "loader"

/Users/nour/Documents/Projects/Web/KIB/artisan:
    6  /*
    7  |--------------------------------------------------------------------------
    8: | Register The Auto Loader
    9  |--------------------------------------------------------------------------
   10  |
   11: | Composer provides a convenient, automatically generated class loader
   12  | for our application. We just need to utilize it! We'll require it
   13  | into the script here so that we do not have to worry about the

/Users/nour/Documents/Projects/Web/KIB/composer.json:
   24      },
   25      "config": {
   26:         "optimize-autoloader": true,
   27          "preferred-install": "dist",
   28          "sort-packages": true

/Users/nour/Documents/Projects/Web/KIB/composer.lock:
 2682              },
 2683              "suggest": {
 2684:                 "doctrine/annotations": "For using the annotation loader",
 2685:                 "symfony/config": "For using the all-in-one router or any loader",
 2686                  "symfony/expression-language": "For using expression matching",
 2687                  "symfony/http-foundation": "For using a Symfony Request object",
 2688:                 "symfony/yaml": "For using the YAML loader"
 2689              },
 2690              "type": "library",

/Users/nour/Documents/Projects/Web/KIB/package.json:
   18          "lodash": "^4.17.5",
   19          "popper.js": "^1.12",
   20:         "resolve-url-loader": "^2.3.1",
   21          "sass": "^1.15.2",
   22:         "sass-loader": "^7.1.0",
   23          "vue": "^2.5.17"
   24      }

/Users/nour/Documents/Projects/Web/KIB/yarn.lock:
  728    resolved "https://registry.yarnpkg.com/acorn/-/acorn-6.1.1.tgz#7d25ae05bb8ad1f9b699108e1094ecd7884adc1f"
  729  
  730: adjust-sourcemap-loader@^1.1.0:
  731    version "1.2.0"
  732:   resolved "https://registry.yarnpkg.com/adjust-sourcemap-loader/-/adjust-sourcemap-loader-1.2.0.tgz#e33fde95e50db9f2a802e3647e311d2fc5000c69"
  733    dependencies:
  734      assert "^1.3.0"
  735      camelcase "^1.2.1"
  736:     loader-utils "^1.1.0"
  737      lodash.assign "^4.0.1"
  738      lodash.defaults "^3.1.2"
  ...
  915      js-tokens "^3.0.2"
  916  
  917: babel-loader@^8.0.4:
  918    version "8.0.5"
  919:   resolved "https://registry.yarnpkg.com/babel-loader/-/babel-loader-8.0.5.tgz#225322d7509c2157655840bba52e46b6c2f2fe33"
  920    dependencies:
  921      find-cache-dir "^2.0.0"
  922:     loader-utils "^1.0.2"
  923      mkdirp "^0.5.1"
  924      util.promisify "^1.0.0"
  ...
 1572      timsort "^0.3.0"
 1573  
 1574: css-loader@^1.0.1:
 1575    version "1.0.1"
 1576:   resolved "https://registry.yarnpkg.com/css-loader/-/css-loader-1.0.1.tgz#6885bb5233b35ec47b006057da01cc640b6b79fe"
 1577    dependencies:
 1578      babel-code-frame "^6.26.0"
 1579      css-selector-tokenizer "^0.7.0"
 1580      icss-utils "^2.1.0"
 1581:     loader-utils "^1.0.2"
 1582      lodash "^4.17.11"
 1583      postcss "^6.0.23"
 ....
 2172    dependencies:
 2173      async "^2.4.1"
 2174:     loader-utils "^1.1.0"
 2175      schema-utils "^0.4.5"
 2176      webpack-sources "^1.1.0"
 ....
 2215    resolved "https://registry.yarnpkg.com/figgy-pudding/-/figgy-pudding-3.5.1.tgz#862470112901c727a0e495a80744bd5baa1d6790"
 2216  
 2217: file-loader@^2.0.0:
 2218    version "2.0.0"
 2219:   resolved "https://registry.yarnpkg.com/file-loader/-/file-loader-2.0.0.tgz#39749c82f020b9e85901dcff98e8004e6401cfde"
 2220    dependencies:
 2221:     loader-utils "^1.0.2"
 2222      schema-utils "^1.0.0"
 2223  
 ....
 2591    resolved "https://registry.yarnpkg.com/html-entities/-/html-entities-1.2.1.tgz#0df29351f0721163515dfb9e5543e5f6eed5162f"
 2592  
 2593: html-loader@^0.5.5:
 2594    version "0.5.5"
 2595:   resolved "https://registry.yarnpkg.com/html-loader/-/html-loader-0.5.5.tgz#6356dbeb0c49756d8ebd5ca327f16ff06ab5faea"
 2596    dependencies:
 2597      es6-templates "^0.2.3"
 2598      fastparse "^1.1.1"
 2599      html-minifier "^3.5.8"
 2600:     loader-utils "^1.1.0"
 2601      object-assign "^4.1.1"
 2602  
 ....
 2696      replace-ext "^1.0.0"
 2697  
 2698: img-loader@^3.0.0:
 2699    version "3.0.1"
 2700:   resolved "https://registry.yarnpkg.com/img-loader/-/img-loader-3.0.1.tgz#c279691c0a9e6b94fa7d8318d2a6596d98bcee78"
 2701    dependencies:
 2702:     loader-utils "^1.1.0"
 2703  
 2704  import-cwd@^2.0.0:
 ....
 3096      "@babel/runtime" "^7.2.0"
 3097      autoprefixer "^9.4.2"
 3098:     babel-loader "^8.0.4"
 3099      babel-merge "^2.0.1"
 3100      chokidar "^2.0.3"
 3101      clean-css "^4.1.3"
 3102      concatenate "0.0.2"
 3103:     css-loader "^1.0.1"
 3104      dotenv "^6.2.0"
 3105      dotenv-expand "^4.2.0"
 3106      extract-text-webpack-plugin v4.0.0-beta.0
 3107:     file-loader "^2.0.0"
 3108      friendly-errors-webpack-plugin "^1.6.1"
 3109      fs-extra "^7.0.1"
 3110      glob "^7.1.2"
 3111:     html-loader "^0.5.5"
 3112      imagemin "^6.0.0"
 3113:     img-loader "^3.0.0"
 3114      lodash "^4.17.5"
 3115      md5 "^2.2.1"
 3116      optimize-css-assets-webpack-plugin "^5.0.1"
 3117:     postcss-loader "^3.0.0"
 3118:     style-loader "^0.23.1"
 3119      terser "^3.11.0"
 3120      terser-webpack-plugin "^1.1.0"
 3121:     vue-loader "^15.4.2"
 3122      webpack "^4.27.1"
 3123      webpack-cli "^3.1.2"
 ....
 3140      invert-kv "^2.0.0"
 3141  
 3142: loader-runner@^2.3.0:
 3143    version "2.4.0"
 3144:   resolved "https://registry.yarnpkg.com/loader-runner/-/loader-runner-2.4.0.tgz#ed47066bfe534d7e84c4c7b9998c2a75607d9357"
 3145  
 3146: loader-utils@^1.0.1, loader-utils@^1.0.2, loader-utils@^1.1.0:
 3147    version "1.2.3"
 3148:   resolved "https://registry.yarnpkg.com/loader-utils/-/loader-utils-1.2.3.tgz#1ff5dc6911c9f0a062531a4c04b609406108c2c7"
 3149    dependencies:
 3150      big.js "^5.2.2"
 ....
 4044      import-cwd "^2.0.0"
 4045  
 4046: postcss-loader@^3.0.0:
 4047    version "3.0.0"
 4048:   resolved "https://registry.yarnpkg.com/postcss-loader/-/postcss-loader-3.0.0.tgz#6b97943e47c72d845fa9e03f273773d4e8dd6c2d"
 4049    dependencies:
 4050:     loader-utils "^1.1.0"
 4051      postcss "^7.0.0"
 4052      postcss-load-config "^2.0.0"
 ....
 4586    resolved "https://registry.yarnpkg.com/resolve-from/-/resolve-from-3.0.0.tgz#b22c7af7d9d6881bc8b6e653335eebcb0a188748"
 4587  
 4588: resolve-url-loader@^2.3.1:
 4589    version "2.3.2"
 4590:   resolved "https://registry.yarnpkg.com/resolve-url-loader/-/resolve-url-loader-2.3.2.tgz#83bb9ebc392b66c563795eef22f078970357a26e"
 4591    dependencies:
 4592:     adjust-sourcemap-loader "^1.1.0"
 4593      camelcase "^4.1.0"
 4594      convert-source-map "^1.5.1"
 4595:     loader-utils "^1.1.0"
 4596      lodash.defaults "^4.0.0"
 4597      rework "^1.0.1"
 ....
 4666    resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
 4667  
 4668: sass-loader@^7.1.0:
 4669    version "7.1.0"
 4670:   resolved "https://registry.yarnpkg.com/sass-loader/-/sass-loader-7.1.0.tgz#16fd5138cb8b424bf8a759528a1972d72aad069d"
 4671    dependencies:
 4672      clone-deep "^2.0.1"
 4673:     loader-utils "^1.0.1"
 4674      lodash.tail "^4.1.1"
 4675      neo-async "^2.5.0"
 ....
 5041    resolved "https://registry.yarnpkg.com/strip-json-comments/-/strip-json-comments-2.0.1.tgz#3c531942e908c2697c0ec344858c286c7ca0a60a"
 5042  
 5043: style-loader@^0.23.1:
 5044    version "0.23.1"
 5045:   resolved "https://registry.yarnpkg.com/style-loader/-/style-loader-0.23.1.tgz#cb9154606f3e771ab6c4ab637026a1049174d925"
 5046    dependencies:
 5047:     loader-utils "^1.1.0"
 5048      schema-utils "^1.0.0"
 5049  
 ....
 5369    resolved "https://registry.yarnpkg.com/vue-hot-reload-api/-/vue-hot-reload-api-2.3.3.tgz#2756f46cb3258054c5f4723de8ae7e87302a1ccf"
 5370  
 5371: vue-loader@^15.4.2:
 5372    version "15.7.0"
 5373:   resolved "https://registry.yarnpkg.com/vue-loader/-/vue-loader-15.7.0.tgz#27275aa5a3ef4958c5379c006dd1436ad04b25b3"
 5374    dependencies:
 5375      "@vue/component-compiler-utils" "^2.5.1"
 5376      hash-sum "^1.0.2"
 5377:     loader-utils "^1.1.0"
 5378      vue-hot-reload-api "^2.3.0"
 5379:     vue-style-loader "^4.1.0"
 5380  
 5381: vue-style-loader@^4.1.0:
 5382    version "4.1.2"
 5383:   resolved "https://registry.yarnpkg.com/vue-style-loader/-/vue-style-loader-4.1.2.tgz#dedf349806f25ceb4e64f3ad7c0a44fba735fcf8"
 5384    dependencies:
 5385      hash-sum "^1.0.2"
 5386:     loader-utils "^1.0.2"
 5387  
 5388  vue-template-es2015-compiler@^1.9.0:
 ....
 5419      import-local "^2.0.0"
 5420      interpret "^1.1.0"
 5421:     loader-utils "^1.1.0"
 5422      supports-color "^5.5.0"
 5423      v8-compile-cache "^2.0.2"
 ....
 5512      eslint-scope "^4.0.0"
 5513      json-parse-better-errors "^1.0.2"
 5514:     loader-runner "^2.3.0"
 5515:     loader-utils "^1.1.0"
 5516      memory-fs "~0.4.1"
 5517      micromatch "^3.1.8"

/Users/nour/Documents/Projects/Web/KIB/bootstrap/cache/services.php:
  159      'auth.password.broker' => 'Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider',
  160      'translator' => 'Illuminate\\Translation\\TranslationServiceProvider',
  161:     'translation.loader' => 'Illuminate\\Translation\\TranslationServiceProvider',
  162      'validator' => 'Illuminate\\Validation\\ValidationServiceProvider',
  163      'validation.presence' => 'Illuminate\\Validation\\ValidationServiceProvider',

/Users/nour/Documents/Projects/Web/KIB/public/index.php:
   12  /*
   13  |--------------------------------------------------------------------------
   14: | Register The Auto Loader
   15  |--------------------------------------------------------------------------
   16  |
   17: | Composer provides a convenient, automatically generated class loader for
   18  | our application. We just need to utilize it! We'll simply require it
   19  | into the script here so that we don't have to worry about manual

/Users/nour/Documents/Projects/Web/KIB/public/css/styles.imageuploader.css:
  369    /* 2 */ }
  370  
  371: .button, .uploader__file-label, .uploader__submit-button {
  372    background-color: white;
  373    background-color: transparent;
  ...
  382    transition: background-color 0.2s; }
  383  
  384: .button:hover, .uploader__file-label:hover, .uploader__submit-button:hover,
  385  .button:active,
  386: .uploader__file-label:active,
  387: .uploader__submit-button:active,
  388  .button:focus,
  389: .uploader__file-label:focus,
  390: .uploader__file-input:focus + .uploader__file-label,
  391: .uploader__submit-button:focus {
  392    background-color: #ff8598;
  393    color: white; }
  ...
  402  .button--secondary:active,
  403  .button--secondary:focus,
  404: .uploader__file-input:focus + .uploader__file-label {
  405    background-color: #ff8598;
  406    color: white; }
  ...
  409    display: inline-block; }
  410  
  411: .button--big-bottom, .uploader__submit-button {
  412    max-width: none;
  413    width: 100%;
  ...
  417    color: white; }
  418  
  419: .button--big-bottom:hover, .uploader__submit-button:hover,
  420  .button--big-bottom:active,
  421: .uploader__submit-button:active,
  422  .button--big-bottom:focus,
  423: .uploader__submit-button:focus {
  424    background-color: #ffb8c3; }
  425  
  426: .icon-button, .uploader__icon-button {
  427    background: transparent;
  428    border: 0;
  429    color: #d2d2d2; }
  430  
  431: .icon-button:hover, .uploader__icon-button:hover {
  432    color: #424242; }
  433  
  ...
  443    display: table; }
  444  
  445: .uploader__file-input {
  446    height: 0.1px;
  447    opacity: 0;
  ...
  451    z-index: -1; }
  452  
  453: .hide, .uploader__hide {
  454    display: none; }
  455  
  ...
  457    display: block; }
  458  
  459: .error, .uploader__error {
  460    color: #ff3264; }
  461  
  462: .file-list, .uploader__file-list {
  463    list-style-type: none;
  464    width: 100%;
  ...
  466    margin: 0; }
  467  
  468: .file-list__item, .uploader__file-list__item {
  469    display: table;
  470    padding: 0.5em;
  471    width: 100%; }
  472  
  473: .file-list__item:nth-child(2n), .uploader__file-list__item:nth-child(2n) {
  474    background-color: #fff5f7; }
  475  
  476: .file-list__thumbnail, .uploader__file-list__thumbnail,
  477  .file-list__text,
  478: .uploader__file-list__text,
  479  .file-list__size,
  480: .uploader__file-list__size,
  481  .file-list__button,
  482: .uploader__file-list__button {
  483    display: table-cell;
  484    vertical-align: middle; }
  485  
  486: .file-list__thumbnail, .uploader__file-list__thumbnail {
  487    width: 10%; }
  488  
  489: .file-list__text, .uploader__file-list__text {
  490    width: 60%;
  491    word-break: break-word; }
  492  
  493: .file-list__size, .uploader__file-list__size {
  494    width: 25%; }
  495  
  496: .file-list__button, .uploader__file-list__button {
  497    width: 5%; }
  498  
  499: .icon, .uploader__icon {
  500    font-size: 2em;
  501    margin: 10px;
  ...
  505    color: #d2d2d2; }
  506  
  507: .icon--spinner, .uploader__icon--spinner {
  508    margin: 1em; }
  509  
  ...
  545    font-size: 1.2em; }
  546  
  547: .text--important, .uploader__instructions {
  548    font-size: 1.2em; }
  549  
  ...
  579    text-transform: uppercase; }
  580  
  581: .uploader__box {
  582    animation: appear 1s;
  583    background-color: white;
  ...
  595      opacity: 1; } }
  596  
  597: .uploader__contents {
  598    padding: 3em;
  599    margin-top: 0;
  ...
  601    transition: all 0.4s; }
  602  
  603: .uploader__file-label,
  604: .uploader__box .button--secondary {
  605    margin: 2em auto; }
  606  
  607: .uploader__file-label--secondary {
  608    display: inline-block;
  609    margin: 0 0.5em; }
  610  
  611: .uploader__further-instructions {
  612    margin-left: 16.94915%;
  613    clear: both;

/Users/nour/Documents/Projects/Web/KIB/public/js/dropzone.js:
 2432  
 2433        xhr.onerror = function () {
 2434:         _this15._handleUploadError(files, xhr);
 2435        };
 2436  
 ....
 2733  
 2734        if (!(200 <= xhr.status && xhr.status < 300)) {
 2735:         this._handleUploadError(files, xhr, response);
 2736        } else {
 2737          if (files[0].upload.chunked) {
 ....
 2743      }
 2744    }, {
 2745:     key: "_handleUploadError",
 2746:     value: function _handleUploadError(files, xhr, response) {
 2747        if (files[0].status === Dropzone.CANCELED) {
 2748          return;

/Users/nour/Documents/Projects/Web/KIB/public/js/jquery.imageuploader.js:
    4  /* global jQuery FormData FileReader */
    5  (function ($) {
    6:     $.fn.uploader = function (options, testMode) {
    7          return this.each(function (index) {
    8              options = $.extend({
    .
   28              // create DOM elements
   29              var dom = {
   30:                 uploaderBox: $(this),
   31:                 submitButton: $('<button class="js-uploader__submit-button uploader__submit-button uploader__hide">' +
   32:                     options.submitButtonCopy + '<i class="js-uploader__icon fa fa-upload uploader__icon"></i></button>'),
   33:                 instructions: $('<p class="js-uploader__instructions uploader__instructions">' +
   34                      options.instructionsCopy + '</p>'),
   35:                 selectButton: $('<input style="height: 0; width: 0;" id="fileinput' + index + '" type="file" multiple class="js-uploader__file-input uploader__file-input">' +
   36:                     '<label for="fileinput' + index + '" style="cursor: pointer;" class="js-uploader__file-label uploader__file-label">' +
   37                      options.selectButtonCopy + '</label>'),
   38                  secondarySelectButton: $('<input style="height: 0; width: 0;" id="secondaryfileinput' + index + '" type="file"' +
   39:                     ' multiple class="js-uploader__file-input uploader__file-input">' +
   40:                     '<label for="secondaryfileinput' + index + '" style="cursor: pointer;" class="js-uploader__file-label uploader__file-label uploader__file-label--secondary">' +
   41                      options.secondarySelectButtonCopy + '</label>'),
   42:                 fileList: $('<ul class="js-uploader__file-list uploader__file-list"></ul>'),
   43:                 contentsContainer: $('<div class="js-uploader__contents uploader__contents"></div>'),
   44:                 furtherInstructions: $('<p class="js-uploader__further-instructions uploader__further-instructions uploader__hide">' + options.furtherInstructionsCopy + '</p>')
   45              };
   46  
   47              // empty out whatever is in there
   48:             dom.uploaderBox.empty();
   49  
   50              // create and attach UI elements
   ..
   60                  dom.furtherInstructions
   61                      .append(dom.secondarySelectButton);
   62:                 dom.uploaderBox
   63                      .append(dom.fileList)
   64                      .append(dom.contentsContainer)
   ..
   85  
   86                  // remove link handler
   87:                 dom.uploaderBox.on('click', '.js-upload-remove-button', removeItemHandler);
   88  
   89                  // expose handlers for testing
   90                  if (options.testMode) {
   91:                     options.dropZone.on('uploaderTestEvent', function (e) {
   92                          switch (e.functionName) {
   93                          case 'selectFilesHandler':
   ..
  109                  var id = state.listIndex;
  110                  var sizeWrapper;
  111:                 var fileNameWrapper = $('<span class="uploader__file-list__text">' + fileName + '</span>');
  112  
  113                  state.listIndex++;
  114  
  115:                 var listItem = $('<li class="uploader__file-list__item" data-index="' + id + '"></li>');
  116:                 var thumbnailContainer = $('<span class="uploader__file-list__thumbnail"></span>');
  117:                 var thumbnail = $('<img class="thumbnail"><i class="fa fa-spinner fa-spin uploader__icon--spinner"></i>');
  118:                 var removeLink = $('<span class="uploader__file-list__button"><button class="uploader__icon-button js-upload-remove-button fa fa-times" data-index="' + id + '"></button></span>');
  119  
  120                  // validate the file
  ...
  122                      // file is ok, add it to the batch
  123                      state.fileBatch.push({file: file, id: id, fileName: fileName, fileSize: fileSize});
  124:                     sizeWrapper = $('<span class="uploader__file-list__size">' + formatBytes(fileSize) + '</span>');
  125                  } else {
  126                      // file is not ok, only add it to the dom
  127:                     sizeWrapper = $('<span class="uploader__file-list__size"><span class="uploader__error">' + options.badFileTypeMessage + '</span></span>');
  128                  }
  129  
  ...
  140                      reader.readAsDataURL(file);
  141                  } else if (file.type.indexOf('image') === -1) {
  142:                     thumbnail = $('<i class="fa fa-file-o uploader__icon">');
  143                  }
  144  
  ...
  213              function renderControls () {
  214                  if (dom.fileList.children().length !== 0) {
  215:                     dom.submitButton.removeClass('uploader__hide');
  216:                     dom.furtherInstructions.removeClass('uploader__hide');
  217:                     dom.contentsContainer.addClass('uploader__hide');
  218                  } else {
  219:                     dom.submitButton.addClass('uploader__hide');
  220:                     dom.furtherInstructions.addClass('uploader__hide');
  221:                     dom.contentsContainer.removeClass('uploader__hide');
  222                  }
  223              }

/Users/nour/Documents/Projects/Web/KIB/public/main_site/css/main.css:
  939  */
  940  
  941: #loader
  942  {
  943      width: 1500px;
  ...
  950      z-index: 50;
  951  }
  952: #loader img
  953  {
  954      position: absolute;

/Users/nour/Documents/Projects/Web/KIB/public/vendor/jquery/jquery.js:
 10319  // Note that for maximum portability, libraries that are not jQuery should
 10320  // declare themselves as anonymous modules, and avoid setting a global if an
 10321: // AMD loader is present. jQuery is a special case. For more information, see
 10322  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
 10323  

/Users/nour/Documents/Projects/Web/KIB/public/vendor/jquery/jquery.slim.js:
 8224  // Note that for maximum portability, libraries that are not jQuery should
 8225  // declare themselves as anonymous modules, and avoid setting a global if an
 8226: // AMD loader is present. jQuery is a special case. For more information, see
 8227  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
 8228  

/Users/nour/Documents/Projects/Web/KIB/resources/views/layouts/main_layout.blade.php:
   53  </head>
   54  <body>
   55:    <div id="loader">
   56      <img src="{{ asset('main_site/img/logo.gif') }}" width="30%">
   57    </div>
   58    <script type="text/javascript">
   59:     var loader=document.getElementById("loader");
   60      window.addEventListener("load",function() {
   61:       loader.style.height = '100px';
   62:       loader.style.width = '100px';
   63:       loader.style.borderRadius = '50%';
   64:       loader.style.visibility = 'hidden';
   65      });
   66    </script>

/Users/nour/Documents/Projects/Web/KIB/resources/views/main_site/index.blade.php:
   22  </head>
   23  <body style="height:100vh;">
   24:   <div id="loader">
   25      <img src="{{ asset('main_site/img/logo.gif') }}" width="30%">
   26    </div>
   27    <script type="text/javascript">
   28:     var loader=document.getElementById("loader");
   29      window.addEventListener("load",function() {
   30:       loader.style.height = '100px';
   31:       loader.style.width = '100px';
   32:       loader.style.borderRadius = '50%';
   33:       loader.style.visibility = 'hidden';
   34      });
   35    </script>

/Users/nour/Documents/Projects/Web/KIB/storage/framework/views/06327e1f37f78ae812bfcdaaf367e0033d89a173.php:
   53  </head>
   54  <body>
   55:    <div id="loader">
   56      <img src="<?php echo e(asset('main_site/img/logo.gif')); ?>" width="30%">
   57    </div>
   58    <script type="text/javascript">
   59:     var loader=document.getElementById("loader");
   60      window.addEventListener("load",function() {
   61:       loader.style.height = '100px';
   62:       loader.style.width = '100px';
   63:       loader.style.borderRadius = '50%';
   64:       loader.style.visibility = 'hidden';
   65      });
   66    </script>

/Users/nour/Documents/Projects/Web/KIB/storage/framework/views/be2d96b9aecc28ea30a12a7e56f0ec5b4b82ebbf.php:
   22  </head>
   23  <body style="height:100vh;">
   24:   <div id="loader">
   25      <img src="<?php echo e(asset('main_site/img/logo.gif')); ?>" width="30%">
   26    </div>
   27    <script type="text/javascript">
   28:     var loader=document.getElementById("loader");
   29      window.addEventListener("load",function() {
   30:       loader.style.height = '100px';
   31:       loader.style.width = '100px';
   32:       loader.style.borderRadius = '50%';
   33:       loader.style.visibility = 'hidden';
   34      });
   35    </script>

/Users/nour/Documents/Projects/Web/KIB/storage/logs/laravel-2019-04-17.log:
   26  [2019-04-17 09:10:32] local.ERROR: syntax error, unexpected 'if' (T_IF) {"exception":"[object] (Symfony\\Component\\Debug\\Exception\\FatalThrowableError(code: 0): syntax error, unexpected 'if' (T_IF) at /Users/nour/Documents/Projects/Web/KIB/app/Http/Controllers/Service/ServiceController.php:57)
   27  [stacktrace]
   28: #0 /Users/nour/Documents/Projects/Web/KIB/vendor/composer/ClassLoader.php(301): Composer\\Autoload\\includeFile('/Users/nour/Doc...')
   29: #1 [internal function]: Composer\\Autoload\\ClassLoader->loadClass('App\\\\Http\\\\Contro...')
   30  #2 [internal function]: spl_autoload_call('App\\\\Http\\\\Contro...')
   31  #3 /Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Container/Container.php(794): ReflectionClass->__construct('App\\\\Http\\\\Contro...')

/Users/nour/Documents/Projects/Web/KIB/storage/logs/laravel-2019-05-22.log:
  415  [2019-05-22 09:34:42] local.ERROR: syntax error, unexpected 'if' (T_IF) {"exception":"[object] (Symfony\\Component\\Debug\\Exception\\FatalThrowableError(code: 0): syntax error, unexpected 'if' (T_IF) at /Users/nour/Documents/Projects/Web/KIB/app/Http/Controllers/SiteController.php:25)
  416  [stacktrace]
  417: #0 /Users/nour/Documents/Projects/Web/KIB/vendor/composer/ClassLoader.php(301): Composer\\Autoload\\includeFile('/Users/nour/Doc...')
  418: #1 [internal function]: Composer\\Autoload\\ClassLoader->loadClass('App\\\\Http\\\\Contro...')
  419  #2 [internal function]: spl_autoload_call('App\\\\Http\\\\Contro...')
  420  #3 /Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Container/Container.php(790): ReflectionClass->__construct('App\\\\Http\\\\Contro...')

/Users/nour/Documents/Projects/Web/KIB/vendor/autoload.php:
    5  require_once __DIR__ . '/composer' . '/autoload_real.php';
    6  
    7: return ComposerAutoloaderInitb44f1ae9d4ab2345a849da98594e8f61::getLoader();
    8  

/Users/nour/Documents/Projects/Web/KIB/vendor/bin/psysh:
   11   */
   12  
   13: // Try to find an autoloader for a local psysh version.
   14  // We'll wrap this whole mess in a Closure so it doesn't leak any globals.
   15  call_user_func(function () {
   ..
   81  });
   82  
   83: // We didn't find an autoloader for a local version, so use the autoloader that
   84  // came with this script.
   85  if (!class_exists('Psy\Shell')) {
   ..
   98  
   99  // If the psysh binary was included directly, assume they just wanted an
  100: // autoloader and bail early.
  101  //
  102  // Keep this PHP 5.3 code around for a while in case someone is using a globally

/Users/nour/Documents/Projects/Web/KIB/vendor/composer/autoload_classmap.php:
  138      'Dotenv\\Exception\\ValidationException' => $vendorDir . '/vlucas/phpdotenv/src/Exception/ValidationException.php',
  139      'Dotenv\\Lines' => $vendorDir . '/vlucas/phpdotenv/src/Lines.php',
  140:     'Dotenv\\Loader' => $vendorDir . '/vlucas/phpdotenv/src/Loader.php',
  141      'Dotenv\\Parser' => $vendorDir . '/vlucas/phpdotenv/src/Parser.php',
  142      'Dotenv\\Regex\\Error' => $vendorDir . '/vlucas/phpdotenv/src/Regex/Error.php',
  ...
 1002      'Illuminate\\Contracts\\Support\\Responsable' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Support/Responsable.php',
 1003      'Illuminate\\Contracts\\Translation\\HasLocalePreference' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Translation/HasLocalePreference.php',
 1004:     'Illuminate\\Contracts\\Translation\\Loader' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Translation/Loader.php',
 1005      'Illuminate\\Contracts\\Translation\\Translator' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Translation/Translator.php',
 1006      'Illuminate\\Contracts\\Validation\\Factory' => $vendorDir . '/laravel/framework/src/Illuminate/Contracts/Validation/Factory.php',
 ....
 1151      'Illuminate\\Filesystem\\FilesystemManager' => $vendorDir . '/laravel/framework/src/Illuminate/Filesystem/FilesystemManager.php',
 1152      'Illuminate\\Filesystem\\FilesystemServiceProvider' => $vendorDir . '/laravel/framework/src/Illuminate/Filesystem/FilesystemServiceProvider.php',
 1153:     'Illuminate\\Foundation\\AliasLoader' => $vendorDir . '/laravel/framework/src/Illuminate/Foundation/AliasLoader.php',
 1154      'Illuminate\\Foundation\\Application' => $vendorDir . '/laravel/framework/src/Illuminate/Foundation/Application.php',
 1155      'Illuminate\\Foundation\\Auth\\Access\\Authorizable' => $vendorDir . '/laravel/framework/src/Illuminate/Foundation/Auth/Access/Authorizable.php',
 ....
 1561      'Illuminate\\Support\\Traits\\Tappable' => $vendorDir . '/laravel/framework/src/Illuminate/Support/Traits/Tappable.php',
 1562      'Illuminate\\Support\\ViewErrorBag' => $vendorDir . '/laravel/framework/src/Illuminate/Support/ViewErrorBag.php',
 1563:     'Illuminate\\Translation\\ArrayLoader' => $vendorDir . '/laravel/framework/src/Illuminate/Translation/ArrayLoader.php',
 1564:     'Illuminate\\Translation\\FileLoader' => $vendorDir . '/laravel/framework/src/Illuminate/Translation/FileLoader.php',
 1565      'Illuminate\\Translation\\MessageSelector' => $vendorDir . '/laravel/framework/src/Illuminate/Translation/MessageSelector.php',
 1566      'Illuminate\\Translation\\TranslationServiceProvider' => $vendorDir . '/laravel/framework/src/Illuminate/Translation/TranslationServiceProvider.php',
 ....
 1628      'JakubOnderka\\PhpConsoleHighlighter\\Highlighter' => $vendorDir . '/jakub-onderka/php-console-highlighter/src/Highlighter.php',
 1629      'JsonSerializable' => $vendorDir . '/nesbot/carbon/src/JsonSerializable.php',
 1630:     'Laravel\\Tinker\\ClassAliasAutoloader' => $vendorDir . '/laravel/tinker/src/ClassAliasAutoloader.php',
 1631      'Laravel\\Tinker\\Console\\TinkerCommand' => $vendorDir . '/laravel/tinker/src/Console/TinkerCommand.php',
 1632      'Laravel\\Tinker\\TinkerCaster' => $vendorDir . '/laravel/tinker/src/TinkerCaster.php',
 ....
 1736      'Mockery\\HigherOrderMessage' => $vendorDir . '/mockery/mockery/library/Mockery/HigherOrderMessage.php',
 1737      'Mockery\\Instantiator' => $vendorDir . '/mockery/mockery/library/Mockery/Instantiator.php',
 1738:     'Mockery\\Loader\\EvalLoader' => $vendorDir . '/mockery/mockery/library/Mockery/Loader/EvalLoader.php',
 1739:     'Mockery\\Loader\\Loader' => $vendorDir . '/mockery/mockery/library/Mockery/Loader/Loader.php',
 1740:     'Mockery\\Loader\\RequireLoader' => $vendorDir . '/mockery/mockery/library/Mockery/Loader/RequireLoader.php',
 1741      'Mockery\\Matcher\\AndAnyOtherArgs' => $vendorDir . '/mockery/mockery/library/Mockery/Matcher/AndAnyOtherArgs.php',
 1742      'Mockery\\Matcher\\Any' => $vendorDir . '/mockery/mockery/library/Mockery/Matcher/Any.php',
 ....
 2037      'PHPUnit\\Runner\\PhptTestCase' => $vendorDir . '/phpunit/phpunit/src/Runner/PhptTestCase.php',
 2038      'PHPUnit\\Runner\\ResultCacheExtension' => $vendorDir . '/phpunit/phpunit/src/Runner/ResultCacheExtension.php',
 2039:     'PHPUnit\\Runner\\StandardTestSuiteLoader' => $vendorDir . '/phpunit/phpunit/src/Runner/StandardTestSuiteLoader.php',
 2040      'PHPUnit\\Runner\\TestHook' => $vendorDir . '/phpunit/phpunit/src/Runner/Hook/TestHook.php',
 2041      'PHPUnit\\Runner\\TestListenerAdapter' => $vendorDir . '/phpunit/phpunit/src/Runner/Hook/TestListenerAdapter.php',
 2042      'PHPUnit\\Runner\\TestResultCache' => $vendorDir . '/phpunit/phpunit/src/Util/TestResultCache.php',
 2043      'PHPUnit\\Runner\\TestResultCacheInterface' => $vendorDir . '/phpunit/phpunit/src/Util/TestResultCacheInterface.php',
 2044:     'PHPUnit\\Runner\\TestSuiteLoader' => $vendorDir . '/phpunit/phpunit/src/Runner/TestSuiteLoader.php',
 2045      'PHPUnit\\Runner\\TestSuiteSorter' => $vendorDir . '/phpunit/phpunit/src/Runner/TestSuiteSorter.php',
 2046      'PHPUnit\\Runner\\Version' => $vendorDir . '/phpunit/phpunit/src/Runner/Version.php',
 ....
 2052      'PHPUnit\\Util\\ConfigurationGenerator' => $vendorDir . '/phpunit/phpunit/src/Util/ConfigurationGenerator.php',
 2053      'PHPUnit\\Util\\ErrorHandler' => $vendorDir . '/phpunit/phpunit/src/Util/ErrorHandler.php',
 2054:     'PHPUnit\\Util\\FileLoader' => $vendorDir . '/phpunit/phpunit/src/Util/FileLoader.php',
 2055      'PHPUnit\\Util\\Filesystem' => $vendorDir . '/phpunit/phpunit/src/Util/Filesystem.php',
 2056      'PHPUnit\\Util\\Filter' => $vendorDir . '/phpunit/phpunit/src/Util/Filter.php',
 ....
 2290      'PharIo\\Manifest\\ManifestElement' => $vendorDir . '/phar-io/manifest/src/xml/ManifestElement.php',
 2291      'PharIo\\Manifest\\ManifestElementException' => $vendorDir . '/phar-io/manifest/src/exceptions/ManifestElementException.php',
 2292:     'PharIo\\Manifest\\ManifestLoader' => $vendorDir . '/phar-io/manifest/src/ManifestLoader.php',
 2293:     'PharIo\\Manifest\\ManifestLoaderException' => $vendorDir . '/phar-io/manifest/src/exceptions/ManifestLoaderException.php',
 2294      'PharIo\\Manifest\\ManifestSerializer' => $vendorDir . '/phar-io/manifest/src/ManifestSerializer.php',
 2295      'PharIo\\Manifest\\PhpElement' => $vendorDir . '/phar-io/manifest/src/xml/PhpElement.php',
 ....
 2733      'Psy\\ExecutionLoop\\Listener' => $vendorDir . '/psy/psysh/src/ExecutionLoop/Listener.php',
 2734      'Psy\\ExecutionLoop\\ProcessForker' => $vendorDir . '/psy/psysh/src/ExecutionLoop/ProcessForker.php',
 2735:     'Psy\\ExecutionLoop\\RunkitReloader' => $vendorDir . '/psy/psysh/src/ExecutionLoop/RunkitReloader.php',
 2736      'Psy\\Formatter\\CodeFormatter' => $vendorDir . '/psy/psysh/src/Formatter/CodeFormatter.php',
 2737      'Psy\\Formatter\\DocblockFormatter' => $vendorDir . '/psy/psysh/src/Formatter/DocblockFormatter.php',
 ....
 2937      'SebastianBergmann\\Version' => $vendorDir . '/sebastian/version/src/Version.php',
 2938      'Symfony\\Component\\Console\\Application' => $vendorDir . '/symfony/console/Application.php',
 2939:     'Symfony\\Component\\Console\\CommandLoader\\CommandLoaderInterface' => $vendorDir . '/symfony/console/CommandLoader/CommandLoaderInterface.php',
 2940:     'Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader' => $vendorDir . '/symfony/console/CommandLoader/ContainerCommandLoader.php',
 2941:     'Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader' => $vendorDir . '/symfony/console/CommandLoader/FactoryCommandLoader.php',
 2942      'Symfony\\Component\\Console\\Command\\Command' => $vendorDir . '/symfony/console/Command/Command.php',
 2943      'Symfony\\Component\\Console\\Command\\HelpCommand' => $vendorDir . '/symfony/console/Command/HelpCommand.php',
 ....
 3067      'Symfony\\Component\\Debug\\BufferingLogger' => $vendorDir . '/symfony/debug/BufferingLogger.php',
 3068      'Symfony\\Component\\Debug\\Debug' => $vendorDir . '/symfony/debug/Debug.php',
 3069:     'Symfony\\Component\\Debug\\DebugClassLoader' => $vendorDir . '/symfony/debug/DebugClassLoader.php',
 3070      'Symfony\\Component\\Debug\\ErrorHandler' => $vendorDir . '/symfony/debug/ErrorHandler.php',
 3071      'Symfony\\Component\\Debug\\ExceptionHandler' => $vendorDir . '/symfony/debug/ExceptionHandler.php',
 ....
 3353      'Symfony\\Component\\Routing\\Generator\\UrlGenerator' => $vendorDir . '/symfony/routing/Generator/UrlGenerator.php',
 3354      'Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface' => $vendorDir . '/symfony/routing/Generator/UrlGeneratorInterface.php',
 3355:     'Symfony\\Component\\Routing\\Loader\\AnnotationClassLoader' => $vendorDir . '/symfony/routing/Loader/AnnotationClassLoader.php',
 3356:     'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader' => $vendorDir . '/symfony/routing/Loader/AnnotationDirectoryLoader.php',
 3357:     'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader' => $vendorDir . '/symfony/routing/Loader/AnnotationFileLoader.php',
 3358:     'Symfony\\Component\\Routing\\Loader\\ClosureLoader' => $vendorDir . '/symfony/routing/Loader/ClosureLoader.php',
 3359:     'Symfony\\Component\\Routing\\Loader\\Configurator\\CollectionConfigurator' => $vendorDir . '/symfony/routing/Loader/Configurator/CollectionConfigurator.php',
 3360:     'Symfony\\Component\\Routing\\Loader\\Configurator\\ImportConfigurator' => $vendorDir . '/symfony/routing/Loader/Configurator/ImportConfigurator.php',
 3361:     'Symfony\\Component\\Routing\\Loader\\Configurator\\RouteConfigurator' => $vendorDir . '/symfony/routing/Loader/Configurator/RouteConfigurator.php',
 3362:     'Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator' => $vendorDir . '/symfony/routing/Loader/Configurator/RoutingConfigurator.php',
 3363:     'Symfony\\Component\\Routing\\Loader\\Configurator\\Traits\\AddTrait' => $vendorDir . '/symfony/routing/Loader/Configurator/Traits/AddTrait.php',
 3364:     'Symfony\\Component\\Routing\\Loader\\Configurator\\Traits\\RouteTrait' => $vendorDir . '/symfony/routing/Loader/Configurator/Traits/RouteTrait.php',
 3365:     'Symfony\\Component\\Routing\\Loader\\DependencyInjection\\ServiceRouterLoader' => $vendorDir . '/symfony/routing/Loader/DependencyInjection/ServiceRouterLoader.php',
 3366:     'Symfony\\Component\\Routing\\Loader\\DirectoryLoader' => $vendorDir . '/symfony/routing/Loader/DirectoryLoader.php',
 3367:     'Symfony\\Component\\Routing\\Loader\\GlobFileLoader' => $vendorDir . '/symfony/routing/Loader/GlobFileLoader.php',
 3368:     'Symfony\\Component\\Routing\\Loader\\ObjectRouteLoader' => $vendorDir . '/symfony/routing/Loader/ObjectRouteLoader.php',
 3369:     'Symfony\\Component\\Routing\\Loader\\PhpFileLoader' => $vendorDir . '/symfony/routing/Loader/PhpFileLoader.php',
 3370:     'Symfony\\Component\\Routing\\Loader\\ProtectedPhpFileLoader' => $vendorDir . '/symfony/routing/Loader/PhpFileLoader.php',
 3371:     'Symfony\\Component\\Routing\\Loader\\XmlFileLoader' => $vendorDir . '/symfony/routing/Loader/XmlFileLoader.php',
 3372:     'Symfony\\Component\\Routing\\Loader\\YamlFileLoader' => $vendorDir . '/symfony/routing/Loader/YamlFileLoader.php',
 3373      'Symfony\\Component\\Routing\\Matcher\\Dumper\\MatcherDumper' => $vendorDir . '/symfony/routing/Matcher/Dumper/MatcherDumper.php',
 3374      'Symfony\\Component\\Routing\\Matcher\\Dumper\\MatcherDumperInterface' => $vendorDir . '/symfony/routing/Matcher/Dumper/MatcherDumperInterface.php',
 ....
 3431      'Symfony\\Component\\Translation\\IdentityTranslator' => $vendorDir . '/symfony/translation/IdentityTranslator.php',
 3432      'Symfony\\Component\\Translation\\Interval' => $vendorDir . '/symfony/translation/Interval.php',
 3433:     'Symfony\\Component\\Translation\\Loader\\ArrayLoader' => $vendorDir . '/symfony/translation/Loader/ArrayLoader.php',
 3434:     'Symfony\\Component\\Translation\\Loader\\CsvFileLoader' => $vendorDir . '/symfony/translation/Loader/CsvFileLoader.php',
 3435:     'Symfony\\Component\\Translation\\Loader\\FileLoader' => $vendorDir . '/symfony/translation/Loader/FileLoader.php',
 3436:     'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader' => $vendorDir . '/symfony/translation/Loader/IcuDatFileLoader.php',
 3437:     'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader' => $vendorDir . '/symfony/translation/Loader/IcuResFileLoader.php',
 3438:     'Symfony\\Component\\Translation\\Loader\\IniFileLoader' => $vendorDir . '/symfony/translation/Loader/IniFileLoader.php',
 3439:     'Symfony\\Component\\Translation\\Loader\\JsonFileLoader' => $vendorDir . '/symfony/translation/Loader/JsonFileLoader.php',
 3440:     'Symfony\\Component\\Translation\\Loader\\LoaderInterface' => $vendorDir . '/symfony/translation/Loader/LoaderInterface.php',
 3441:     'Symfony\\Component\\Translation\\Loader\\MoFileLoader' => $vendorDir . '/symfony/translation/Loader/MoFileLoader.php',
 3442:     'Symfony\\Component\\Translation\\Loader\\PhpFileLoader' => $vendorDir . '/symfony/translation/Loader/PhpFileLoader.php',
 3443:     'Symfony\\Component\\Translation\\Loader\\PoFileLoader' => $vendorDir . '/symfony/translation/Loader/PoFileLoader.php',
 3444:     'Symfony\\Component\\Translation\\Loader\\QtFileLoader' => $vendorDir . '/symfony/translation/Loader/QtFileLoader.php',
 3445:     'Symfony\\Component\\Translation\\Loader\\XliffFileLoader' => $vendorDir . '/symfony/translation/Loader/XliffFileLoader.php',
 3446:     'Symfony\\Component\\Translation\\Loader\\YamlFileLoader' => $vendorDir . '/symfony/translation/Loader/YamlFileLoader.php',
 3447      'Symfony\\Component\\Translation\\LoggingTranslator' => $vendorDir . '/symfony/translation/LoggingTranslator.php',
 3448      'Symfony\\Component\\Translation\\MessageCatalogue' => $vendorDir . '/symfony/translation/MessageCatalogue.php',

/Users/nour/Documents/Projects/Web/KIB/vendor/composer/autoload_real.php:
    3  // autoload_real.php @generated by Composer
    4  
    5: class ComposerAutoloaderInitb44f1ae9d4ab2345a849da98594e8f61
    6  {
    7:     private static $loader;
    8  
    9:     public static function loadClassLoader($class)
   10      {
   11:         if ('Composer\Autoload\ClassLoader' === $class) {
   12:             require __DIR__ . '/ClassLoader.php';
   13          }
   14      }
   15  
   16:     public static function getLoader()
   17      {
   18:         if (null !== self::$loader) {
   19:             return self::$loader;
   20          }
   21  
   22:         spl_autoload_register(array('ComposerAutoloaderInitb44f1ae9d4ab2345a849da98594e8f61', 'loadClassLoader'), true, true);
   23:         self::$loader = $loader = new \Composer\Autoload\ClassLoader();
   24:         spl_autoload_unregister(array('ComposerAutoloaderInitb44f1ae9d4ab2345a849da98594e8f61', 'loadClassLoader'));
   25  
   26:         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION');
   27:         if ($useStaticLoader) {
   28              require_once __DIR__ . '/autoload_static.php';
   29  
   30:             call_user_func(\Composer\Autoload\ComposerStaticInitb44f1ae9d4ab2345a849da98594e8f61::getInitializer($loader));
   31          } else {
   32              $map = require __DIR__ . '/autoload_namespaces.php';
   33              foreach ($map as $namespace => $path) {
   34:                 $loader->set($namespace, $path);
   35              }
   36  
   37              $map = require __DIR__ . '/autoload_psr4.php';
   38              foreach ($map as $namespace => $path) {
   39:                 $loader->setPsr4($namespace, $path);
   40              }
   41  
   42              $classMap = require __DIR__ . '/autoload_classmap.php';
   43              if ($classMap) {
   44:                 $loader->addClassMap($classMap);
   45              }
   46          }
   47  
   48:         $loader->register(true);
   49  
   50:         if ($useStaticLoader) {
   51              $includeFiles = Composer\Autoload\ComposerStaticInitb44f1ae9d4ab2345a849da98594e8f61::$files;
   52          } else {
   ..
   57          }
   58  
   59:         return $loader;
   60      }
   61  }

/Users/nour/Documents/Projects/Web/KIB/vendor/composer/autoload_static.php:
  524          'Dotenv\\Exception\\ValidationException' => __DIR__ . '/..' . '/vlucas/phpdotenv/src/Exception/ValidationException.php',
  525          'Dotenv\\Lines' => __DIR__ . '/..' . '/vlucas/phpdotenv/src/Lines.php',
  526:         'Dotenv\\Loader' => __DIR__ . '/..' . '/vlucas/phpdotenv/src/Loader.php',
  527          'Dotenv\\Parser' => __DIR__ . '/..' . '/vlucas/phpdotenv/src/Parser.php',
  528          'Dotenv\\Regex\\Error' => __DIR__ . '/..' . '/vlucas/phpdotenv/src/Regex/Error.php',
  ...
 1388          'Illuminate\\Contracts\\Support\\Responsable' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Contracts/Support/Responsable.php',
 1389          'Illuminate\\Contracts\\Translation\\HasLocalePreference' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Contracts/Translation/HasLocalePreference.php',
 1390:         'Illuminate\\Contracts\\Translation\\Loader' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Contracts/Translation/Loader.php',
 1391          'Illuminate\\Contracts\\Translation\\Translator' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Contracts/Translation/Translator.php',
 1392          'Illuminate\\Contracts\\Validation\\Factory' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Contracts/Validation/Factory.php',
 ....
 1537          'Illuminate\\Filesystem\\FilesystemManager' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Filesystem/FilesystemManager.php',
 1538          'Illuminate\\Filesystem\\FilesystemServiceProvider' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Filesystem/FilesystemServiceProvider.php',
 1539:         'Illuminate\\Foundation\\AliasLoader' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Foundation/AliasLoader.php',
 1540          'Illuminate\\Foundation\\Application' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Foundation/Application.php',
 1541          'Illuminate\\Foundation\\Auth\\Access\\Authorizable' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Foundation/Auth/Access/Authorizable.php',
 ....
 1947          'Illuminate\\Support\\Traits\\Tappable' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Support/Traits/Tappable.php',
 1948          'Illuminate\\Support\\ViewErrorBag' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Support/ViewErrorBag.php',
 1949:         'Illuminate\\Translation\\ArrayLoader' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Translation/ArrayLoader.php',
 1950:         'Illuminate\\Translation\\FileLoader' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Translation/FileLoader.php',
 1951          'Illuminate\\Translation\\MessageSelector' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Translation/MessageSelector.php',
 1952          'Illuminate\\Translation\\TranslationServiceProvider' => __DIR__ . '/..' . '/laravel/framework/src/Illuminate/Translation/TranslationServiceProvider.php',
 ....
 2014          'JakubOnderka\\PhpConsoleHighlighter\\Highlighter' => __DIR__ . '/..' . '/jakub-onderka/php-console-highlighter/src/Highlighter.php',
 2015          'JsonSerializable' => __DIR__ . '/..' . '/nesbot/carbon/src/JsonSerializable.php',
 2016:         'Laravel\\Tinker\\ClassAliasAutoloader' => __DIR__ . '/..' . '/laravel/tinker/src/ClassAliasAutoloader.php',
 2017          'Laravel\\Tinker\\Console\\TinkerCommand' => __DIR__ . '/..' . '/laravel/tinker/src/Console/TinkerCommand.php',
 2018          'Laravel\\Tinker\\TinkerCaster' => __DIR__ . '/..' . '/laravel/tinker/src/TinkerCaster.php',
 ....
 2122          'Mockery\\HigherOrderMessage' => __DIR__ . '/..' . '/mockery/mockery/library/Mockery/HigherOrderMessage.php',
 2123          'Mockery\\Instantiator' => __DIR__ . '/..' . '/mockery/mockery/library/Mockery/Instantiator.php',
 2124:         'Mockery\\Loader\\EvalLoader' => __DIR__ . '/..' . '/mockery/mockery/library/Mockery/Loader/EvalLoader.php',
 2125:         'Mockery\\Loader\\Loader' => __DIR__ . '/..' . '/mockery/mockery/library/Mockery/Loader/Loader.php',
 2126:         'Mockery\\Loader\\RequireLoader' => __DIR__ . '/..' . '/mockery/mockery/library/Mockery/Loader/RequireLoader.php',
 2127          'Mockery\\Matcher\\AndAnyOtherArgs' => __DIR__ . '/..' . '/mockery/mockery/library/Mockery/Matcher/AndAnyOtherArgs.php',
 2128          'Mockery\\Matcher\\Any' => __DIR__ . '/..' . '/mockery/mockery/library/Mockery/Matcher/Any.php',
 ....
 2423          'PHPUnit\\Runner\\PhptTestCase' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/PhptTestCase.php',
 2424          'PHPUnit\\Runner\\ResultCacheExtension' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/ResultCacheExtension.php',
 2425:         'PHPUnit\\Runner\\StandardTestSuiteLoader' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/StandardTestSuiteLoader.php',
 2426          'PHPUnit\\Runner\\TestHook' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/Hook/TestHook.php',
 2427          'PHPUnit\\Runner\\TestListenerAdapter' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/Hook/TestListenerAdapter.php',
 2428          'PHPUnit\\Runner\\TestResultCache' => __DIR__ . '/..' . '/phpunit/phpunit/src/Util/TestResultCache.php',
 2429          'PHPUnit\\Runner\\TestResultCacheInterface' => __DIR__ . '/..' . '/phpunit/phpunit/src/Util/TestResultCacheInterface.php',
 2430:         'PHPUnit\\Runner\\TestSuiteLoader' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/TestSuiteLoader.php',
 2431          'PHPUnit\\Runner\\TestSuiteSorter' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/TestSuiteSorter.php',
 2432          'PHPUnit\\Runner\\Version' => __DIR__ . '/..' . '/phpunit/phpunit/src/Runner/Version.php',
 ....
 2438          'PHPUnit\\Util\\ConfigurationGenerator' => __DIR__ . '/..' . '/phpunit/phpunit/src/Util/ConfigurationGenerator.php',
 2439          'PHPUnit\\Util\\ErrorHandler' => __DIR__ . '/..' . '/phpunit/phpunit/src/Util/ErrorHandler.php',
 2440:         'PHPUnit\\Util\\FileLoader' => __DIR__ . '/..' . '/phpunit/phpunit/src/Util/FileLoader.php',
 2441          'PHPUnit\\Util\\Filesystem' => __DIR__ . '/..' . '/phpunit/phpunit/src/Util/Filesystem.php',
 2442          'PHPUnit\\Util\\Filter' => __DIR__ . '/..' . '/phpunit/phpunit/src/Util/Filter.php',
 ....
 2676          'PharIo\\Manifest\\ManifestElement' => __DIR__ . '/..' . '/phar-io/manifest/src/xml/ManifestElement.php',
 2677          'PharIo\\Manifest\\ManifestElementException' => __DIR__ . '/..' . '/phar-io/manifest/src/exceptions/ManifestElementException.php',
 2678:         'PharIo\\Manifest\\ManifestLoader' => __DIR__ . '/..' . '/phar-io/manifest/src/ManifestLoader.php',
 2679:         'PharIo\\Manifest\\ManifestLoaderException' => __DIR__ . '/..' . '/phar-io/manifest/src/exceptions/ManifestLoaderException.php',
 2680          'PharIo\\Manifest\\ManifestSerializer' => __DIR__ . '/..' . '/phar-io/manifest/src/ManifestSerializer.php',
 2681          'PharIo\\Manifest\\PhpElement' => __DIR__ . '/..' . '/phar-io/manifest/src/xml/PhpElement.php',
 ....
 3119          'Psy\\ExecutionLoop\\Listener' => __DIR__ . '/..' . '/psy/psysh/src/ExecutionLoop/Listener.php',
 3120          'Psy\\ExecutionLoop\\ProcessForker' => __DIR__ . '/..' . '/psy/psysh/src/ExecutionLoop/ProcessForker.php',
 3121:         'Psy\\ExecutionLoop\\RunkitReloader' => __DIR__ . '/..' . '/psy/psysh/src/ExecutionLoop/RunkitReloader.php',
 3122          'Psy\\Formatter\\CodeFormatter' => __DIR__ . '/..' . '/psy/psysh/src/Formatter/CodeFormatter.php',
 3123          'Psy\\Formatter\\DocblockFormatter' => __DIR__ . '/..' . '/psy/psysh/src/Formatter/DocblockFormatter.php',
 ....
 3323          'SebastianBergmann\\Version' => __DIR__ . '/..' . '/sebastian/version/src/Version.php',
 3324          'Symfony\\Component\\Console\\Application' => __DIR__ . '/..' . '/symfony/console/Application.php',
 3325:         'Symfony\\Component\\Console\\CommandLoader\\CommandLoaderInterface' => __DIR__ . '/..' . '/symfony/console/CommandLoader/CommandLoaderInterface.php',
 3326:         'Symfony\\Component\\Console\\CommandLoader\\ContainerCommandLoader' => __DIR__ . '/..' . '/symfony/console/CommandLoader/ContainerCommandLoader.php',
 3327:         'Symfony\\Component\\Console\\CommandLoader\\FactoryCommandLoader' => __DIR__ . '/..' . '/symfony/console/CommandLoader/FactoryCommandLoader.php',
 3328          'Symfony\\Component\\Console\\Command\\Command' => __DIR__ . '/..' . '/symfony/console/Command/Command.php',
 3329          'Symfony\\Component\\Console\\Command\\HelpCommand' => __DIR__ . '/..' . '/symfony/console/Command/HelpCommand.php',
 ....
 3453          'Symfony\\Component\\Debug\\BufferingLogger' => __DIR__ . '/..' . '/symfony/debug/BufferingLogger.php',
 3454          'Symfony\\Component\\Debug\\Debug' => __DIR__ . '/..' . '/symfony/debug/Debug.php',
 3455:         'Symfony\\Component\\Debug\\DebugClassLoader' => __DIR__ . '/..' . '/symfony/debug/DebugClassLoader.php',
 3456          'Symfony\\Component\\Debug\\ErrorHandler' => __DIR__ . '/..' . '/symfony/debug/ErrorHandler.php',
 3457          'Symfony\\Component\\Debug\\ExceptionHandler' => __DIR__ . '/..' . '/symfony/debug/ExceptionHandler.php',
 ....
 3739          'Symfony\\Component\\Routing\\Generator\\UrlGenerator' => __DIR__ . '/..' . '/symfony/routing/Generator/UrlGenerator.php',
 3740          'Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface' => __DIR__ . '/..' . '/symfony/routing/Generator/UrlGeneratorInterface.php',
 3741:         'Symfony\\Component\\Routing\\Loader\\AnnotationClassLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/AnnotationClassLoader.php',
 3742:         'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/AnnotationDirectoryLoader.php',
 3743:         'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/AnnotationFileLoader.php',
 3744:         'Symfony\\Component\\Routing\\Loader\\ClosureLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/ClosureLoader.php',
 3745:         'Symfony\\Component\\Routing\\Loader\\Configurator\\CollectionConfigurator' => __DIR__ . '/..' . '/symfony/routing/Loader/Configurator/CollectionConfigurator.php',
 3746:         'Symfony\\Component\\Routing\\Loader\\Configurator\\ImportConfigurator' => __DIR__ . '/..' . '/symfony/routing/Loader/Configurator/ImportConfigurator.php',
 3747:         'Symfony\\Component\\Routing\\Loader\\Configurator\\RouteConfigurator' => __DIR__ . '/..' . '/symfony/routing/Loader/Configurator/RouteConfigurator.php',
 3748:         'Symfony\\Component\\Routing\\Loader\\Configurator\\RoutingConfigurator' => __DIR__ . '/..' . '/symfony/routing/Loader/Configurator/RoutingConfigurator.php',
 3749:         'Symfony\\Component\\Routing\\Loader\\Configurator\\Traits\\AddTrait' => __DIR__ . '/..' . '/symfony/routing/Loader/Configurator/Traits/AddTrait.php',
 3750:         'Symfony\\Component\\Routing\\Loader\\Configurator\\Traits\\RouteTrait' => __DIR__ . '/..' . '/symfony/routing/Loader/Configurator/Traits/RouteTrait.php',
 3751:         'Symfony\\Component\\Routing\\Loader\\DependencyInjection\\ServiceRouterLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/DependencyInjection/ServiceRouterLoader.php',
 3752:         'Symfony\\Component\\Routing\\Loader\\DirectoryLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/DirectoryLoader.php',
 3753:         'Symfony\\Component\\Routing\\Loader\\GlobFileLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/GlobFileLoader.php',
 3754:         'Symfony\\Component\\Routing\\Loader\\ObjectRouteLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/ObjectRouteLoader.php',
 3755:         'Symfony\\Component\\Routing\\Loader\\PhpFileLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/PhpFileLoader.php',
 3756:         'Symfony\\Component\\Routing\\Loader\\ProtectedPhpFileLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/PhpFileLoader.php',
 3757:         'Symfony\\Component\\Routing\\Loader\\XmlFileLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/XmlFileLoader.php',
 3758:         'Symfony\\Component\\Routing\\Loader\\YamlFileLoader' => __DIR__ . '/..' . '/symfony/routing/Loader/YamlFileLoader.php',
 3759          'Symfony\\Component\\Routing\\Matcher\\Dumper\\MatcherDumper' => __DIR__ . '/..' . '/symfony/routing/Matcher/Dumper/MatcherDumper.php',
 3760          'Symfony\\Component\\Routing\\Matcher\\Dumper\\MatcherDumperInterface' => __DIR__ . '/..' . '/symfony/routing/Matcher/Dumper/MatcherDumperInterface.php',
 ....
 3817          'Symfony\\Component\\Translation\\IdentityTranslator' => __DIR__ . '/..' . '/symfony/translation/IdentityTranslator.php',
 3818          'Symfony\\Component\\Translation\\Interval' => __DIR__ . '/..' . '/symfony/translation/Interval.php',
 3819:         'Symfony\\Component\\Translation\\Loader\\ArrayLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/ArrayLoader.php',
 3820:         'Symfony\\Component\\Translation\\Loader\\CsvFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/CsvFileLoader.php',
 3821:         'Symfony\\Component\\Translation\\Loader\\FileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/FileLoader.php',
 3822:         'Symfony\\Component\\Translation\\Loader\\IcuDatFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/IcuDatFileLoader.php',
 3823:         'Symfony\\Component\\Translation\\Loader\\IcuResFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/IcuResFileLoader.php',
 3824:         'Symfony\\Component\\Translation\\Loader\\IniFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/IniFileLoader.php',
 3825:         'Symfony\\Component\\Translation\\Loader\\JsonFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/JsonFileLoader.php',
 3826:         'Symfony\\Component\\Translation\\Loader\\LoaderInterface' => __DIR__ . '/..' . '/symfony/translation/Loader/LoaderInterface.php',
 3827:         'Symfony\\Component\\Translation\\Loader\\MoFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/MoFileLoader.php',
 3828:         'Symfony\\Component\\Translation\\Loader\\PhpFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/PhpFileLoader.php',
 3829:         'Symfony\\Component\\Translation\\Loader\\PoFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/PoFileLoader.php',
 3830:         'Symfony\\Component\\Translation\\Loader\\QtFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/QtFileLoader.php',
 3831:         'Symfony\\Component\\Translation\\Loader\\XliffFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/XliffFileLoader.php',
 3832:         'Symfony\\Component\\Translation\\Loader\\YamlFileLoader' => __DIR__ . '/..' . '/symfony/translation/Loader/YamlFileLoader.php',
 3833          'Symfony\\Component\\Translation\\LoggingTranslator' => __DIR__ . '/..' . '/symfony/translation/LoggingTranslator.php',
 3834          'Symfony\\Component\\Translation\\MessageCatalogue' => __DIR__ . '/..' . '/symfony/translation/MessageCatalogue.php',
 ....
 4049      );
 4050  
 4051:     public static function getInitializer(ClassLoader $loader)
 4052      {
 4053:         return \Closure::bind(function () use ($loader) {
 4054:             $loader->prefixLengthsPsr4 = ComposerStaticInitb44f1ae9d4ab2345a849da98594e8f61::$prefixLengthsPsr4;
 4055:             $loader->prefixDirsPsr4 = ComposerStaticInitb44f1ae9d4ab2345a849da98594e8f61::$prefixDirsPsr4;
 4056:             $loader->fallbackDirsPsr4 = ComposerStaticInitb44f1ae9d4ab2345a849da98594e8f61::$fallbackDirsPsr4;
 4057:             $loader->prefixesPsr0 = ComposerStaticInitb44f1ae9d4ab2345a849da98594e8f61::$prefixesPsr0;
 4058:             $loader->classMap = ComposerStaticInitb44f1ae9d4ab2345a849da98594e8f61::$classMap;
 4059  
 4060:         }, null, ClassLoader::class);
 4061      }
 4062  }

/Users/nour/Documents/Projects/Web/KIB/vendor/composer/ClassLoader.php:
   14  
   15  /**
   16:  * ClassLoader implements a PSR-0, PSR-4 and classmap class loader.
   17   *
   18:  *     $loader = new \Composer\Autoload\ClassLoader();
   19   *
   20   *     // register classes with namespaces
   21:  *     $loader->add('Symfony\Component', __DIR__.'/component');
   22:  *     $loader->add('Symfony',           __DIR__.'/framework');
   23   *
   24:  *     // activate the autoloader
   25:  *     $loader->register();
   26   *
   27   *     // to enable searching the include path (eg. for PEAR packages)
   28:  *     $loader->setUseIncludePath(true);
   29   *
   30   * In this example, if you try to use a class in the Symfony\Component
   31   * namespace or one of its children (Symfony\Component\Console for instance),
   32:  * the autoloader will first look for the class under the component/
   33   * directory, and it will then fallback to the framework/ directory if not
   34   * found before giving up.
   35   *
   36:  * This class is loosely based on the Symfony UniversalClassLoader.
   37   *
   38   * @author Fabien Potencier <fabien@symfony.com>
   ..
   41   * @see    http://www.php-fig.org/psr/psr-4/
   42   */
   43: class ClassLoader
   44  {
   45      // PSR-4
   ..
  241  
  242      /**
  243:      * Can be used to check if the autoloader uses the include path to check
  244       * for classes.
  245       *
  ...
  273  
  274      /**
  275:      * Registers this instance as an autoloader.
  276       *
  277:      * @param bool $prepend Whether to prepend the autoloader or not
  278       */
  279      public function register($prepend = false)
  ...
  283  
  284      /**
  285:      * Unregisters this instance as an autoloader.
  286       */
  287      public function unregister()

/Users/nour/Documents/Projects/Web/KIB/vendor/composer/installed.json:
 4216          },
 4217          "suggest": {
 4218:             "doctrine/annotations": "For using the annotation loader",
 4219:             "symfony/config": "For using the all-in-one router or any loader",
 4220              "symfony/expression-language": "For using expression matching",
 4221              "symfony/http-foundation": "For using a Symfony Request object",
 4222:             "symfony/yaml": "For using the YAML loader"
 4223          },
 4224          "time": "2019-04-27 09:38:08",

/Users/nour/Documents/Projects/Web/KIB/vendor/fzaninotto/faker/readme.md:
   56  ```php
   57  <?php
   58: // require the Faker autoloader
   59  require_once '/path/to/Faker/src/autoload.php';
   60: // alternatively, use another PSR-0 compliant autoloader (like the Symfony2 ClassLoader for instance)
   61  
   62  // use the factory to create a Faker\Generator instance

/Users/nour/Documents/Projects/Web/KIB/vendor/fzaninotto/faker/src/autoload.php:
    2  
    3  /**
    4:  * Simple autoloader that follow the PHP Standards Recommendation #0 (PSR-0)
    5   * @see https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md for more informations.
    6   *
    7:  * Code inspired from the SplClassLoader RFC
    8:  * @see https://wiki.php.net/rfc/splclassloader#example_implementation
    9   */
   10  spl_autoload_register(function ($className) {

/Users/nour/Documents/Projects/Web/KIB/vendor/fzaninotto/faker/src/Faker/Provider/File.php:
   94          'application/vnd.ibm.secure-container'                                      => 'sc',
   95          'application/vnd.iccprofile'                                                => array('icc', 'icm'),
   96:         'application/vnd.igloader'                                                  => 'igl',
   97          'application/vnd.immervision-ivp'                                           => 'ivp',
   98          'application/vnd.kde.karbon'                                                => 'karbon',

/Users/nour/Documents/Projects/Web/KIB/vendor/guzzlehttp/guzzle/CHANGELOG.md:
 1077  * Services defined in two different config files that include one another will by default replace the previously
 1078    defined service, but you can now create services that extend themselves and merge their settings over the previous
 1079: * The JsonLoader now supports aliasing filenames with different filenames. This allows you to alias something like
 1080    '_default' with a default JSON configuration file.
 1081  

/Users/nour/Documents/Projects/Web/KIB/vendor/guzzlehttp/guzzle/README.md:
   61  ```
   62  
   63: After installing, you need to require Composer's autoloader:
   64  
   65  ```php

/Users/nour/Documents/Projects/Web/KIB/vendor/guzzlehttp/guzzle/UPGRADING.md:
   80  - Static functions in `GuzzleHttp\Utils` have been moved to namespaced
   81    functions under the `GuzzleHttp` namespace. This requires either a Composer
   82:   based autoloader or you to include functions.php.
   83  - `GuzzleHttp\ClientInterface::getDefaultOption` has been renamed to
   84    `GuzzleHttp\ClientInterface::getConfig`.

/Users/nour/Documents/Projects/Web/KIB/vendor/hamcrest/hamcrest-php/composer.lock:
  111                  "phpunit/phpunit": "3.7.*",
  112                  "psr/log": "~1.0",
  113:                 "symfony/class-loader": "~2.1",
  114                  "zendframework/zend-cache": "2.*,<2.3",
  115                  "zendframework/zend-log": "2.*,<2.3"

/Users/nour/Documents/Projects/Web/KIB/vendor/jakub-onderka/php-console-color/example.php:
    1  <?php
    2: $loader = require_once __DIR__ . '/vendor/autoload.php';
    3  
    4  $consoleColor = new JakubOnderka\PhpConsoleColor\ConsoleColor();

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Contracts/Translation/Loader.php:
    3  namespace Illuminate\Contracts\Translation;
    4  
    5: interface Loader
    6  {
    7      /**
    .
   16  
   17      /**
   18:      * Add a new namespace to the loader.
   19       *
   20       * @param  string  $namespace
   ..
   25  
   26      /**
   27:      * Add a new JSON path to the loader.
   28       *
   29       * @param  string  $path

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Contracts/View/Factory.php:
   61  
   62      /**
   63:      * Add a new namespace to the loader.
   64       *
   65       * @param  string  $namespace

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/MigrateMakeCommand.php:
   90          // Now we are ready to write the migration out to disk. Once we've written
   91          // the migration out, we will dump-autoload for the entire framework to
   92:         // make sure that the migrations are registered by the class loaders.
   93          $this->writeMigration($name, $table, $create);
   94  

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Foundation/AliasLoader.php:
    3  namespace Illuminate\Foundation;
    4  
    5: class AliasLoader
    6  {
    7      /**
    .
   13  
   14      /**
   15:      * Indicates if a loader has been registered.
   16       *
   17       * @var bool
   ..
   27  
   28      /**
   29:      * The singleton instance of the loader.
   30       *
   31:      * @var \Illuminate\Foundation\AliasLoader
   32       */
   33      protected static $instance;
   34  
   35      /**
   36:      * Create a new AliasLoader instance.
   37       *
   38       * @param  array  $aliases
   ..
   45  
   46      /**
   47:      * Get or create the singleton alias loader instance.
   48       *
   49       * @param  array  $aliases
   50:      * @return \Illuminate\Foundation\AliasLoader
   51       */
   52      public static function getInstance(array $aliases = [])
   ..
  133  
  134      /**
  135:      * Add an alias to the loader.
  136       *
  137       * @param  string  $class
  ...
  145  
  146      /**
  147:      * Register the loader on the auto-loader stack.
  148       *
  149       * @return void
  ...
  152      {
  153          if (! $this->registered) {
  154:             $this->prependToLoaderStack();
  155  
  156              $this->registered = true;
  ...
  159  
  160      /**
  161:      * Prepend the load method to the auto-loader stack.
  162       *
  163       * @return void
  164       */
  165:     protected function prependToLoaderStack()
  166      {
  167          spl_autoload_register([$this, 'load'], true, true);
  ...
  190  
  191      /**
  192:      * Indicates if the loader has been registered.
  193       *
  194       * @return bool
  ...
  200  
  201      /**
  202:      * Set the "registered" state of the loader.
  203       *
  204       * @param  bool  $value
  ...
  222  
  223      /**
  224:      * Set the value of the singleton alias loader.
  225       *
  226:      * @param  \Illuminate\Foundation\AliasLoader  $loader
  227       * @return void
  228       */
  229:     public static function setInstance($loader)
  230      {
  231:         static::$instance = $loader;
  232      }
  233  

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Foundation/Application.php:
 1072      public function provideFacades($namespace)
 1073      {
 1074:         AliasLoader::setFacadeNamespace($namespace);
 1075      }
 1076  

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php:
   57          // First we will load the service manifest, which contains information on all
   58          // service providers registered with the application and which services it
   59:         // provides. This is used to know which services are "deferred" loaders.
   60          if ($this->shouldRecompile($manifest, $providers)) {
   61              $manifest = $this->compileManifest($providers);

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/RegisterFacades.php:
    3  namespace Illuminate\Foundation\Bootstrap;
    4  
    5: use Illuminate\Foundation\AliasLoader;
    6  use Illuminate\Support\Facades\Facade;
    7  use Illuminate\Foundation\PackageManifest;
    .
   22          Facade::setFacadeApplication($app);
   23  
   24:         AliasLoader::getInstance(array_merge(
   25              $app->make('config')->get('app.aliases', []),
   26              $app->make(PackageManifest::class)->aliases()

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Http/Testing/MimeType.php:
  248          'sc' => 'application/vnd.ibm.secure-container',
  249          'icc' => 'application/vnd.iccprofile',
  250:         'igl' => 'application/vnd.igloader',
  251          'ivp' => 'application/vnd.immervision-ivp',
  252          'ivu' => 'application/vnd.immervision-ivu',

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Support/Composer.php:
   37  
   38      /**
   39:      * Regenerate the Composer autoloader files.
   40       *
   41       * @param  string|array  $extra
   ..
   52  
   53      /**
   54:      * Regenerate the optimized Composer autoloader files.
   55       *
   56       * @return void

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Translation/ArrayLoader.php:
    3  namespace Illuminate\Translation;
    4  
    5: use Illuminate\Contracts\Translation\Loader;
    6  
    7: class ArrayLoader implements Loader
    8  {
    9      /**
   ..
   30  
   31      /**
   32:      * Add a new namespace to the loader.
   33       *
   34       * @param  string  $namespace
   ..
   42  
   43      /**
   44:      * Add a new JSON path to the loader.
   45       *
   46       * @param  string  $path
   ..
   53  
   54      /**
   55:      * Add messages to the loader.
   56       *
   57       * @param  string  $locale

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Translation/FileLoader.php:
    5  use RuntimeException;
    6  use Illuminate\Filesystem\Filesystem;
    7: use Illuminate\Contracts\Translation\Loader;
    8  
    9: class FileLoader implements Loader
   10  {
   11      /**
   ..
   17  
   18      /**
   19:      * The default path for the loader.
   20       *
   21       * @var string
   ..
   38  
   39      /**
   40:      * Create a new file loader instance.
   41       *
   42       * @param  \Illuminate\Filesystem\Filesystem  $files
   ..
  154  
  155      /**
  156:      * Add a new namespace to the loader.
  157       *
  158       * @param  string  $namespace
  ...
  166  
  167      /**
  168:      * Add a new JSON path to the loader.
  169       *
  170       * @param  string  $path

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Translation/TranslationServiceProvider.php:
   15      public function register()
   16      {
   17:         $this->registerLoader();
   18  
   19          $this->app->singleton('translator', function ($app) {
   20:             $loader = $app['translation.loader'];
   21  
   22              // When registering the translator component, we'll need to set the default
   ..
   25              $locale = $app['config']['app.locale'];
   26  
   27:             $trans = new Translator($loader, $locale);
   28  
   29              $trans->setFallback($app['config']['app.fallback_locale']);
   ..
   34  
   35      /**
   36:      * Register the translation line loader.
   37       *
   38       * @return void
   39       */
   40:     protected function registerLoader()
   41      {
   42:         $this->app->singleton('translation.loader', function ($app) {
   43:             return new FileLoader($app['files'], $app['path.lang']);
   44          });
   45      }
   ..
   52      public function provides()
   53      {
   54:         return ['translator', 'translation.loader'];
   55      }
   56  }

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/Translation/Translator.php:
    8  use Illuminate\Support\Collection;
    9  use Illuminate\Support\Traits\Macroable;
   10: use Illuminate\Contracts\Translation\Loader;
   11  use Illuminate\Support\NamespacedItemResolver;
   12  use Illuminate\Contracts\Translation\Translator as TranslatorContract;
   ..
   17  
   18      /**
   19:      * The loader implementation.
   20       *
   21:      * @var \Illuminate\Contracts\Translation\Loader
   22       */
   23:     protected $loader;
   24  
   25      /**
   ..
   54       * Create a new translator instance.
   55       *
   56:      * @param  \Illuminate\Contracts\Translation\Loader  $loader
   57       * @param  string  $locale
   58       * @return void
   59       */
   60:     public function __construct(Loader $loader, $locale)
   61      {
   62:         $this->loader = $loader;
   63          $this->locale = $locale;
   64      }
   ..
  319          }
  320  
  321:         // The loader is responsible for returning the array of language lines for the
  322          // given namespace, group, and locale. We'll set the lines in this array of
  323          // lines that have already been loaded so that we can easily access them.
  324:         $lines = $this->loader->load($locale, $group, $namespace);
  325  
  326          $this->loaded[$namespace][$group][$locale] = $lines;
  ...
  341  
  342      /**
  343:      * Add a new namespace to the loader.
  344       *
  345       * @param  string  $namespace
  ...
  349      public function addNamespace($namespace, $hint)
  350      {
  351:         $this->loader->addNamespace($namespace, $hint);
  352      }
  353  
  354      /**
  355:      * Add a new JSON path to the loader.
  356       *
  357       * @param  string  $path
  ...
  360      public function addJsonPath($path)
  361      {
  362:         $this->loader->addJsonPath($path);
  363      }
  364  
  ...
  417  
  418      /**
  419:      * Get the language line loader implementation.
  420       *
  421:      * @return \Illuminate\Contracts\Translation\Loader
  422       */
  423:     public function getLoader()
  424      {
  425:         return $this->loader;
  426      }
  427  

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/View/Factory.php:
  365  
  366      /**
  367:      * Add a new namespace to the loader.
  368       *
  369       * @param  string  $namespace
  ...
  379  
  380      /**
  381:      * Prepend a new namespace to the loader.
  382       *
  383       * @param  string  $namespace

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php:
   44  
   45      /**
   46:      * Create a new file view loader instance.
   47       *
   48       * @param  \Illuminate\Filesystem\Filesystem  $files

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/tinker/src/ClassAliasAutoloader.php:
    6  use Illuminate\Support\Str;
    7  
    8: class ClassAliasAutoloader
    9  {
   10      /**
   ..
   23  
   24      /**
   25:      * Register a new alias loader instance.
   26       *
   27       * @param  \Psy\Shell  $shell
   ..
   31      public static function register(Shell $shell, $classMapPath)
   32      {
   33:         return tap(new static($shell, $classMapPath), function ($loader) {
   34:             spl_autoload_register([$loader, 'aliasClass']);
   35          });
   36      }
   37  
   38      /**
   39:      * Create a new alias loader instance.
   40       *
   41       * @param  \Psy\Shell  $shell
   ..
   96  
   97      /**
   98:      * Unregister the alias loader instance.
   99       *
  100       * @return void

/Users/nour/Documents/Projects/Web/KIB/vendor/laravel/tinker/src/Console/TinkerCommand.php:
    6  use Psy\Configuration;
    7  use Illuminate\Console\Command;
    8: use Laravel\Tinker\ClassAliasAutoloader;
    9  use Symfony\Component\Console\Input\InputArgument;
   10  
   ..
   57          $path = $this->getLaravel()->basePath().DIRECTORY_SEPARATOR.'vendor/composer/autoload_classmap.php';
   58  
   59:         $loader = ClassAliasAutoloader::register($shell, $path);
   60  
   61          try {
   62              $shell->run();
   63          } finally {
   64:             $loader->unregister();
   65          }
   66      }

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/CHANGELOG.md:
   51    expectations but instead check that tests do that themselves. PHPUnit 6 is
   52    required if you want to use this fail safe.
   53: * Removes SPL Class Loader
   54  * Removed object recorder feature
   55  * Bumped minimum PHP version to 5.6

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/CONTRIBUTING.md:
   76  
   77  Mockery and its code generation can be difficult to debug. A good start is to
   78: use the `RequireLoader`, which will dump the code generated by mockery to a file
   79  before requiring it, rather than using eval. This will help with stack traces,
   80  and you will be able to open the mock class in your editor.
   ..
   84  // tests/bootstrap.php
   85  
   86: Mockery::setLoader(new Mockery\Loader\RequireLoader(sys_get_temp_dir()));
   87  
   88  ```

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/docs/reference/phpunit_integration.rst:
   41      }
   42  
   43: Mockery ships with an autoloader so we don't need to litter our tests with
   44  ``require_once()`` calls. To use it, ensure Mockery is on our
   45  ``include_path`` and add the following to our test suite's ``Bootstrap.php``
   ..
   48  .. code-block:: php
   49  
   50:     require_once 'Mockery/Loader.php';
   51      require_once 'Hamcrest/Hamcrest.php';
   52  
   53:     $loader = new \Mockery\Loader;
   54:     $loader->register();
   55  
   56  If we are using Composer, we can simplify this to including the Composer
   57: generated autoloader file:
   58  
   59  .. code-block:: php
   ..
  111      </listeners>
  112  
  113: Make sure Composer's or Mockery's autoloader is present in the bootstrap file
  114  or we will need to also define a "file" attribute pointing to the file of the
  115  ``TestListener`` class.

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/library/Mockery.php:
   24  use Mockery\Generator\MockConfigurationBuilder;
   25  use Mockery\Generator\StringManipulationGenerator;
   26: use Mockery\Loader\EvalLoader;
   27: use Mockery\Loader\Loader;
   28  use Mockery\Matcher\MatcherAbstract;
   29  use Mockery\ClosureWrapper;
   ..
   53  
   54      /**
   55:      * @var \Mockery\Loader\Loader
   56       */
   57:     protected static $_loader;
   58  
   59      /**
   ..
  219  
  220      /**
  221:      * Lazy loader and getter for
  222       * the container property.
  223       *
  ...
  227      {
  228          if (is_null(self::$_container)) {
  229:             self::$_container = new Mockery\Container(self::getGenerator(), self::getLoader());
  230          }
  231  
  ...
  244  
  245      /**
  246:      * Lazy loader method and getter for
  247       * the generator property.
  248       *
  ...
  270  
  271      /**
  272:      * Setter for the $_loader static property.
  273       *
  274:      * @param Loader $loader
  275       */
  276:     public static function setLoader(Loader $loader)
  277      {
  278:         self::$_loader = $loader;
  279      }
  280  
  281      /**
  282:      * Lazy loader method and getter for
  283:      * the $_loader property.
  284       *
  285:      * @return Loader
  286       */
  287:     public static function getLoader()
  288      {
  289:         if (is_null(self::$_loader)) {
  290:             self::$_loader = self::getDefaultLoader();
  291          }
  292  
  293:         return self::$_loader;
  294      }
  295  
  296      /**
  297:      * Gets an EvalLoader to be used as default.
  298       *
  299:      * @return EvalLoader
  300       */
  301:     public static function getDefaultLoader()
  302      {
  303:         return new EvalLoader();
  304      }
  305  
  ...
  505  
  506      /**
  507:      * Lazy loader and Getter for the global
  508       * configuration container.
  509       *
  ...
  931           * We could eval here, but it doesn't play well with the way
  932           * PHPUnit tries to backup global state and the require definition
  933:          * loader
  934           */
  935          $tmpfname = tempnam(sys_get_temp_dir(), "Mockery");

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/library/Mockery/Container.php:
   23  use Mockery\Generator\Generator;
   24  use Mockery\Generator\MockConfigurationBuilder;
   25: use Mockery\Loader\Loader as LoaderInterface;
   26  
   27  class Container
   ..
   63  
   64      /**
   65:      * @var LoaderInterface
   66       */
   67:     protected $_loader;
   68  
   69      /**
   ..
   72      protected $_namedMocks = array();
   73  
   74:     public function __construct(Generator $generator = null, LoaderInterface $loader = null)
   75      {
   76          $this->_generator = $generator ?: \Mockery::getDefaultGenerator();
   77:         $this->_loader = $loader ?: \Mockery::getDefaultLoader();
   78      }
   79  
   ..
  222          }
  223  
  224:         $this->getLoader()->load($def);
  225  
  226          $mock = $this->_getInstance($def->getClassName(), $constructorArgs);
  ...
  241      }
  242  
  243:     public function getLoader()
  244      {
  245:         return $this->_loader;
  246      }
  247  

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/library/Mockery/Loader/EvalLoader.php:
   19   */
   20  
   21: namespace Mockery\Loader;
   22  
   23  use Mockery\Generator\MockDefinition;
   24: use Mockery\Loader\Loader;
   25  
   26: class EvalLoader implements Loader
   27  {
   28      public function load(MockDefinition $definition)

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/library/Mockery/Loader/Loader.php:
   19   */
   20  
   21: namespace Mockery\Loader;
   22  
   23  use Mockery\Generator\MockDefinition;
   24  
   25: interface Loader
   26  {
   27      public function load(MockDefinition $definition);

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/library/Mockery/Loader/RequireLoader.php:
   19   */
   20  
   21: namespace Mockery\Loader;
   22  
   23  use Mockery\Generator\MockDefinition;
   24: use Mockery\Loader\Loader;
   25  
   26: class RequireLoader implements Loader
   27  {
   28      protected $path;

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/tests/Mockery/AdhocTest.php:
   29      public function mockeryTestSetUp()
   30      {
   31:         $this->container = new \Mockery\Container(\Mockery::getDefaultGenerator(), \Mockery::getDefaultLoader());
   32      }
   33  

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/tests/Mockery/ExpectationTest.php:
  959      public function testByDefaultOperatesFromMockConstruction()
  960      {
  961:         $container = new \Mockery\Container(\Mockery::getDefaultGenerator(), \Mockery::getDefaultLoader());
  962          $mock = $container->mock('f', array('foo'=>'rfoo', 'bar'=>'rbar', 'baz'=>'rbaz'))->byDefault();
  963          $mock->shouldReceive('foo')->andReturn('foobar');

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/tests/Mockery/TraitsTest.php:
   22  
   23  use Mockery\Adapter\Phpunit\MockeryTestCase;
   24: use Mockery\Loader\RequireLoader;
   25  
   26  class TraitTest extends MockeryTestCase

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/tests/Mockery/Loader/EvalLoaderTest.php:
   20   */
   21  
   22: namespace Mockery\Loader;
   23  
   24  use Mockery as m;
   25: use Mockery\Loader\EvalLoader;
   26  
   27: require_once __DIR__.'/LoaderTestCase.php';
   28  
   29: class EvalLoaderTest extends LoaderTestCase
   30  {
   31:     public function getLoader()
   32      {
   33:         return new EvalLoader();
   34      }
   35  }

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/tests/Mockery/Loader/LoaderTestCase.php:
   20   */
   21  
   22: namespace Mockery\Loader;
   23  
   24  use Mockery\Generator\MockConfiguration;
   ..
   26  use PHPUnit\Framework\TestCase;
   27  
   28: abstract class LoaderTestCase extends TestCase
   29  {
   30      /**
   ..
   39          $definition = new MockDefinition($config, $code);
   40  
   41:         $this->getLoader()->load($definition);
   42  
   43          $this->assertTrue(class_exists($className));
   44      }
   45  
   46:     abstract public function getLoader();
   47  }
   48  

/Users/nour/Documents/Projects/Web/KIB/vendor/mockery/mockery/tests/Mockery/Loader/RequireLoaderTest.php:
   20   */
   21  
   22: namespace Mockery\Loader;
   23  
   24  use Mockery as m;
   25: use Mockery\Loader\RequireLoader;
   26  
   27: require_once __DIR__.'/LoaderTestCase.php';
   28  
   29: class RequireLoaderTest extends LoaderTestCase
   30  {
   31:     public function getLoader()
   32      {
   33:         return new RequireLoader(sys_get_temp_dir());
   34      }
   35  }

/Users/nour/Documents/Projects/Web/KIB/vendor/monolog/monolog/doc/01-usage.md:
   19  
   20  If you do not use Composer, you can grab the code from GitHub, and use any
   21: PSR-0 compatible autoloader (e.g. the [Symfony2 ClassLoader component](https://github.com/symfony/ClassLoader))
   22  to load Monolog classes.
   23  

/Users/nour/Documents/Projects/Web/KIB/vendor/monolog/monolog/src/Monolog/ErrorHandler.php:
   61      public static function register(LoggerInterface $logger, $errorLevelMap = array(), $exceptionLevel = null, $fatalLevel = null)
   62      {
   63:         //Forces the autoloader to run for LogLevel. Fixes an autoload issue at compile-time on PHP5.3. See https://github.com/Seldaek/monolog/pull/929
   64          class_exists('\\Psr\\Log\\LogLevel', true);
   65  

/Users/nour/Documents/Projects/Web/KIB/vendor/nesbot/carbon/src/Carbon/Translator.php:
   39      public function __construct($locale, Translation\Formatter\MessageFormatterInterface $formatter = null, $cacheDir = null, $debug = false)
   40      {
   41:         $this->addLoader('array', new Translation\Loader\ArrayLoader());
   42          parent::__construct($locale, $formatter, $cacheDir, $debug);
   43      }

/Users/nour/Documents/Projects/Web/KIB/vendor/nikic/php-parser/CHANGELOG.md:
  131  ### Removed
  132  
  133: * The `Autoloader` class has been removed. It is now required to use the Composer autoloader.
  134  
  135  Version 4.0.0-alpha3 (2017-12-26)
  ...
  536  * The pretty printer takes all the new attributes mentioned in the previous section into account.
  537  * The protected `AbstractPrettyPrinter::pComments()` method no longer returns a trailing newline.
  538: * The bundled autoloader supports library files being stored in a different directory than
  539    `PhpParser` for easier downstream distribution.
  540  
  ...
  587  * Update group use support to be in line with recent PHP 7.0 builds.
  588  * Renamed `php-parse.php` to `php-parse` and registered it as a composer bin.
  589: * Use composer PSR-4 autoloader instead of custom autoloader.
  590  * Specify phpunit as a dev dependency.
  591  

/Users/nour/Documents/Projects/Web/KIB/vendor/nikic/php-parser/UPGRADE-1.0.md:
   28  
   29  Note that the `PHPParser` prefix was changed to `PhpParser`. While PHP class names are technically case-insensitive,
   30: the autoloader will not be able to load `PHPParser\Parser` or other case variants.
   31  
   32  Due to conflicts with reserved keywords, some class names now end with an underscore, e.g. `PHPParser_Node_Stmt_Class`
   ..
   95  ### Miscellaneous
   96  
   97:   * The classes `Template` and `TemplateLoader` have been removed. You should use some other [code generation][code_gen]
   98      project built on top of PHP-Parser instead.
   99  

/Users/nour/Documents/Projects/Web/KIB/vendor/nikic/php-parser/UPGRADE-4.0.md:
   75  * The `BuilderAbstract` class has been removed. It's functionality is moved into `BuilderHelpers`.
   76    However, this is an internal class and should not be used directly.
   77: * The `Autoloader` class has been removed in favor of relying on the Composer autoloader.
   78  

/Users/nour/Documents/Projects/Web/KIB/vendor/nikic/php-parser/doc/2_Usage_of_basic_components.markdown:
    7  -------------
    8  
    9: To bootstrap the library, include the autoloader generated by composer:
   10  
   11  ```php

/Users/nour/Documents/Projects/Web/KIB/vendor/paragonie/random_compat/psalm.xml:
    1  <?xml version="1.0"?>
    2  <psalm
    3:     autoloader="psalm-autoload.php"
    4      stopOnFirstError="false"
    5      useDocblockTypes="true"

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/build.xml:
   23              <arg value="--no-ansi"/>
   24              <arg value="--no-suggest"/>
   25:             <arg value="--optimize-autoloader"/>
   26              <arg value="--prefer-stable"/>
   27          </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/README.md:
   20  
   21  ```php
   22: use PharIo\Manifest\ManifestLoader;
   23  use PharIo\Manifest\ManifestSerializer;
   24  
   25: $manifest = ManifestLoader::fromFile('manifest.xml');
   26  
   27  var_dump($manifest);

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/examples/example-01.php:
    9   */
   10  
   11: use PharIo\Manifest\ManifestLoader;
   12  use PharIo\Manifest\ManifestSerializer;
   13  
   14  require __DIR__ . '/../vendor/autoload.php';
   15  
   16: $manifest = ManifestLoader::fromFile(__DIR__ . '/../tests/_fixture/phpunit-5.6.5.xml');
   17  
   18  echo sprintf(

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/src/ManifestLoader.php:
   11  namespace PharIo\Manifest;
   12  
   13: class ManifestLoader {
   14      /**
   15       * @param string $filename
   ..
   17       * @return Manifest
   18       *
   19:      * @throws ManifestLoaderException
   20       */
   21      public static function fromFile($filename) {
   ..
   25              );
   26          } catch (Exception $e) {
   27:             throw new ManifestLoaderException(
   28                  sprintf('Loading %s failed.', $filename),
   29                  $e->getCode(),
   ..
   38       * @return Manifest
   39       *
   40:      * @throws ManifestLoaderException
   41       */
   42      public static function fromPhar($filename) {
   ..
   49       * @return Manifest
   50       *
   51:      * @throws ManifestLoaderException
   52       */
   53      public static function fromString($manifest) {
   ..
   57              );
   58          } catch (Exception $e) {
   59:             throw new ManifestLoaderException(
   60                  'Processing string failed',
   61                  $e->getCode(),

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/src/exceptions/ManifestLoaderException.php:
    3  namespace PharIo\Manifest;
    4  
    5: class ManifestLoaderException extends \Exception implements Exception {
    6  }
    7  

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/tests/ManifestDocumentMapperTest.php:
   31   * @uses \PharIo\Manifest\ManifestDocumentMapper
   32   * @uses \PharIo\Manifest\ManifestElement
   33:  * @uses \PharIo\Manifest\ManifestLoader
   34   * @uses \PharIo\Manifest\PhpElement
   35   * @uses \PharIo\Manifest\PhpExtensionRequirement

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/tests/ManifestLoaderTest.php:
    4  
    5  /**
    6:  * @covers \PharIo\Manifest\ManifestLoader
    7   *
    8   * @uses \PharIo\Manifest\Author
    .
   31   * @uses \PharIo\Manifest\ManifestDocumentMapper
   32   * @uses \PharIo\Manifest\ManifestElement
   33:  * @uses \PharIo\Manifest\ManifestLoader
   34   * @uses \PharIo\Manifest\PhpElement
   35   * @uses \PharIo\Manifest\PhpExtensionRequirement
   ..
   43   * @uses \PharIo\Version\VersionConstraint
   44   */
   45: class ManifestLoaderTest extends \PHPUnit\Framework\TestCase {
   46      public function testCanBeLoadedFromFile() {
   47          $this->assertInstanceOf(
   48              Manifest::class,
   49:             ManifestLoader::fromFile(__DIR__ . '/_fixture/library.xml')
   50          );
   51      }
   ..
   54          $this->assertInstanceOf(
   55              Manifest::class,
   56:             ManifestLoader::fromString(
   57                  file_get_contents(__DIR__ . '/_fixture/library.xml')
   58              )
   ..
   63          $this->assertInstanceOf(
   64              Manifest::class,
   65:             ManifestLoader::fromPhar(__DIR__ . '/_fixture/test.phar')
   66          );
   67  
   ..
   69  
   70      public function testLoadingNonExistingFileThrowsException() {
   71:         $this->expectException(ManifestLoaderException::class);
   72:         ManifestLoader::fromFile('/not/existing');
   73      }
   74  
   ..
   77       */
   78      public function testLoadingInvalidXmlThrowsException() {
   79:         $this->expectException(ManifestLoaderException::class);
   80:         ManifestLoader::fromString('<?xml version="1.0" ?><broken>');
   81      }
   82  

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/manifest/tests/ManifestSerializerTest.php:
   33   * @uses \PharIo\Manifest\ManifestDocumentMapper
   34   * @uses \PharIo\Manifest\ManifestElement
   35:  * @uses \PharIo\Manifest\ManifestLoader
   36   * @uses \PharIo\Manifest\PhpElement
   37   * @uses \PharIo\Manifest\PhpExtensionRequirement
   ..
   57       */
   58      public function testCanSerializeToString($expected) {
   59:         $manifest = ManifestLoader::fromString($expected);
   60  
   61          $serializer = new ManifestSerializer();
   ..
   82          $src        = __DIR__ . '/_fixture/library.xml';
   83          $dest       = '/tmp/' . uniqid('serializer', true);
   84:         $manifest   = ManifestLoader::fromFile($src);
   85          $serializer = new ManifestSerializer();
   86          $serializer->serializeToFile($manifest, $dest);

/Users/nour/Documents/Projects/Web/KIB/vendor/phar-io/version/build.xml:
    1  <?xml version="1.0" encoding="UTF-8"?>
    2  <project name="version" default="setup">
    3:     <target name="setup" depends="clean,install-tools,generate-autoloader"/>
    4  
    5      <target name="clean" unless="clean.done" description="Cleanup build artifacts">
    .
   27      </target>
   28  
   29:     <target name="generate-autoloader" depends="install-tools" description="Generate autoloader using PHPAB">
   30          <exec executable="${basedir}/tools/phpab" taskname="phpab">
   31              <arg value="--output"/>
   ..
   35      </target>
   36  
   37:     <target name="test" depends="generate-autoloader" description="Run tests">
   38          <exec executable="${basedir}/tools/phpunit" taskname="phpunit"/>
   39      </target>

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/php-code-coverage/composer.json:
   21      },
   22      "config": {
   23:         "optimize-autoloader": true,
   24          "sort-packages": true
   25      },

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/php-timer/composer.json:
   26      },
   27      "config": {
   28:         "optimize-autoloader": true,
   29          "sort-packages": true
   30      },

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/php-token-stream/composer.json:
   24      },
   25      "config": {
   26:         "optimize-autoloader": true,
   27          "sort-packages": true
   28      },

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/appveyor.yml:
   53    - IF NOT EXIST php-installed.txt type nul >> php-installed.txt
   54    - cd c:\phpunit
   55:   - composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable %DEPENDENCIES%
   56  
   57  test_script:

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/composer.json:
   56              "php": "7.1.0"
   57          },
   58:         "optimize-autoloader": true,
   59          "sort-packages": true
   60      },

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/phpunit.xsd:
  267          <xs:attribute name="timeoutForMediumTests" type="xs:integer" default="10"/>
  268          <xs:attribute name="timeoutForLargeTests" type="xs:integer" default="60"/>
  269:         <xs:attribute name="testSuiteLoaderClass" type="xs:string" default="PHPUnit\Runner\StandardTestSuiteLoader"/>
  270:         <xs:attribute name="testSuiteLoaderFile" type="xs:anyURI"/>
  271          <xs:attribute name="defaultTestSuite" type="xs:string" default=""/>
  272          <xs:attribute name="verbose" type="xs:boolean" default="false"/>

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/Framework/TestSuite.php:
   15  use PHPUnit\Runner\Filter\Factory;
   16  use PHPUnit\Runner\PhptTestCase;
   17: use PHPUnit\Util\FileLoader;
   18  use PHPUnit\Util\InvalidArgumentHelper;
   19  use ReflectionClass;
   ..
  538          // The given file may contain further stub classes in addition to the
  539          // test class itself. Figure out the actual test class.
  540:         $filename   = FileLoader::checkAndLoad($filename);
  541          $newClasses = \array_diff(\get_declared_classes(), $this->declaredClasses);
  542  

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/Runner/BaseTestRunner.php:
   41  
   42      /**
   43:      * Returns the loader to be used.
   44       */
   45:     public function getLoader(): TestSuiteLoader
   46      {
   47:         return new StandardTestSuiteLoader;
   48      }
   49  
   ..
  126      protected function loadSuiteClass(string $suiteClassName, string $suiteClassFile = ''): ReflectionClass
  127      {
  128:         $loader = $this->getLoader();
  129  
  130:         return $loader->load($suiteClassName, $suiteClassFile);
  131      }
  132  

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/Runner/StandardTestSuiteLoader.php:
   11  
   12  use PHPUnit\Framework\TestCase;
   13: use PHPUnit\Util\FileLoader;
   14  use PHPUnit\Util\Filesystem;
   15  use ReflectionClass;
   16  
   17  /**
   18:  * The standard test suite loader.
   19   */
   20: class StandardTestSuiteLoader implements TestSuiteLoader
   21  {
   22      /**
   ..
   37              $loadedClasses = \get_declared_classes();
   38  
   39:             $filename = FileLoader::checkAndLoad($suiteClassFile);
   40  
   41              $loadedClasses = \array_values(

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/Runner/TestSuiteLoader.php:
   15   * An interface to define how a test suite should be loaded.
   16   */
   17: interface TestSuiteLoader
   18  {
   19      public function load(string $suiteClassName, string $suiteClassFile = ''): ReflectionClass;

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/TextUI/Command.php:
   12  use PharIo\Manifest\ApplicationName;
   13  use PharIo\Manifest\Exception as ManifestException;
   14: use PharIo\Manifest\ManifestLoader;
   15  use PharIo\Version\Version as PharIoVersion;
   16  use PHPUnit\Framework\Exception;
   ..
   19  use PHPUnit\Framework\TestSuite;
   20  use PHPUnit\Runner\PhptTestCase;
   21: use PHPUnit\Runner\StandardTestSuiteLoader;
   22: use PHPUnit\Runner\TestSuiteLoader;
   23  use PHPUnit\Runner\TestSuiteSorter;
   24  use PHPUnit\Runner\Version;
   25  use PHPUnit\Util\Configuration;
   26  use PHPUnit\Util\ConfigurationGenerator;
   27: use PHPUnit\Util\FileLoader;
   28  use PHPUnit\Util\Filesystem;
   29  use PHPUnit\Util\Getopt;
   ..
   52          'listTests'               => false,
   53          'listTestsXml'            => false,
   54:         'loader'                  => null,
   55          'useDefaultConfiguration' => true,
   56          'loadedExtensions'        => [],
   ..
  101          'list-tests'                => null,
  102          'list-tests-xml='           => null,
  103:         'loader='                   => null,
  104          'log-junit='                => null,
  105          'log-teamcity='             => null,
  ...
  229      protected function createRunner(): TestRunner
  230      {
  231:         return new TestRunner($this->arguments['loader']);
  232      }
  233  
  ...
  492                      break;
  493  
  494:                 case '--loader':
  495:                     $this->arguments['loader'] = $option[1];
  496  
  497                      break;
  ...
  813          }
  814  
  815:         if ($this->arguments['loader'] !== null) {
  816:             $this->arguments['loader'] = $this->handleLoader($this->arguments['loader']);
  817          }
  818  
  ...
  892              }
  893  
  894:             if (isset($phpunitConfiguration['testSuiteLoaderClass'])) {
  895:                 if (isset($phpunitConfiguration['testSuiteLoaderFile'])) {
  896:                     $file = $phpunitConfiguration['testSuiteLoaderFile'];
  897                  } else {
  898                      $file = '';
  899                  }
  900  
  901:                 $this->arguments['loader'] = $this->handleLoader(
  902:                     $phpunitConfiguration['testSuiteLoaderClass'],
  903                      $file
  904                  );
  ...
  939  
  940      /**
  941:      * Handles the loading of the PHPUnit\Runner\TestSuiteLoader implementation.
  942       */
  943:     protected function handleLoader(string $loaderClass, string $loaderFile = ''): ?TestSuiteLoader
  944      {
  945:         if (!\class_exists($loaderClass, false)) {
  946:             if ($loaderFile == '') {
  947:                 $loaderFile = Filesystem::classNameToFilename(
  948:                     $loaderClass
  949                  );
  950              }
  951  
  952:             $loaderFile = \stream_resolve_include_path($loaderFile);
  953  
  954:             if ($loaderFile) {
  955:                 require $loaderFile;
  956              }
  957          }
  958  
  959:         if (\class_exists($loaderClass, false)) {
  960:             $class = new ReflectionClass($loaderClass);
  961  
  962:             if ($class->implementsInterface(TestSuiteLoader::class) &&
  963                  $class->isInstantiable()) {
  964                  return $class->newInstance();
  ...
  966          }
  967  
  968:         if ($loaderClass == StandardTestSuiteLoader::class) {
  969              return null;
  970          }
  ...
  972          $this->exitWithErrorMessage(
  973              \sprintf(
  974:                 'Could not use "%s" as loader.',
  975:                 $loaderClass
  976              )
  977          );
  ...
 1056      {
 1057          try {
 1058:             FileLoader::checkAndLoad($filename);
 1059          } catch (Exception $e) {
 1060              $this->exitWithErrorMessage($e->getMessage());
 ....
 1160    --debug                     Display debugging information
 1161  
 1162:   --loader <loader>           TestSuiteLoader implementation to use
 1163    --repeat <times>            Runs the test(s) repeatedly
 1164    --teamcity                  Report test execution progress in TeamCity format
 ....
 1237                  $applicationName = new ApplicationName('phpunit/phpunit');
 1238                  $version         = new PharIoVersion(Version::series());
 1239:                 $manifest        = ManifestLoader::fromFile('phar://' . $file . '/manifest.xml');
 1240  
 1241                  if (!$manifest->isExtensionFor($applicationName)) {

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/TextUI/TestRunner.php:
   29  use PHPUnit\Runner\NullTestResultCache;
   30  use PHPUnit\Runner\ResultCacheExtension;
   31: use PHPUnit\Runner\StandardTestSuiteLoader;
   32  use PHPUnit\Runner\TestHook;
   33  use PHPUnit\Runner\TestListenerAdapter;
   34  use PHPUnit\Runner\TestResultCache;
   35: use PHPUnit\Runner\TestSuiteLoader;
   36  use PHPUnit\Runner\TestSuiteSorter;
   37  use PHPUnit\Runner\Version;
   ..
   83  
   84      /**
   85:      * @var TestSuiteLoader
   86       */
   87:     protected $loader;
   88  
   89      /**
   ..
  135      }
  136  
  137:     public function __construct(TestSuiteLoader $loader = null, CodeCoverageFilter $filter = null)
  138      {
  139          if ($filter === null) {
  ...
  142  
  143          $this->codeCoverageFilter = $filter;
  144:         $this->loader             = $loader;
  145          $this->runtime            = new Runtime;
  146      }
  ...
  816  
  817      /**
  818:      * Returns the loader to be used.
  819       */
  820:     public function getLoader(): TestSuiteLoader
  821      {
  822:         if ($this->loader === null) {
  823:             $this->loader = new StandardTestSuiteLoader;
  824          }
  825  
  826:         return $this->loader;
  827      }
  828  

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/Util/Blacklist.php:
   10  namespace PHPUnit\Util;
   11  
   12: use Composer\Autoload\ClassLoader;
   13  use DeepCopy\DeepCopy;
   14  use Doctrine\Instantiator\Instantiator;
   ..
   50      public static $blacklistedClassNames = [
   51          // composer
   52:         ClassLoader::class => 1,
   53  
   54          // doctrine/instantiator

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/Util/Configuration.php:
   52   *          extensionsDirectory="tools/phpunit.d"
   53   *          printerClass="PHPUnit\TextUI\ResultPrinter"
   54:  *          testSuiteLoaderClass="PHPUnit\Runner\StandardTestSuiteLoader"
   55   *          defaultTestSuite=""
   56   *          beStrictAboutChangesToGlobalState="false"
   ..
  785          }
  786  
  787:         if ($root->hasAttribute('testSuiteLoaderClass')) {
  788:             $result['testSuiteLoaderClass'] = (string) $root->getAttribute(
  789:                 'testSuiteLoaderClass'
  790              );
  791          }
  ...
  797          }
  798  
  799:         if ($root->getAttribute('testSuiteLoaderFile')) {
  800:             $result['testSuiteLoaderFile'] = $this->toAbsolutePath(
  801:                 (string) $root->getAttribute('testSuiteLoaderFile')
  802              );
  803          }

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/src/Util/FileLoader.php:
   15   * Utility methods to load PHP sourcefiles.
   16   */
   17: final class FileLoader
   18  {
   19      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/_files/configuration.xml:
   18           extensionsDirectory="/tmp"
   19           printerClass="PHPUnit\TextUI\ResultPrinter"
   20:          testSuiteLoaderClass="PHPUnit\Runner\StandardTestSuiteLoader"
   21           defaultTestSuite="My Test Suite"
   22           beStrictAboutChangesToGlobalState="false"

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/_files/configuration_empty.xml:
    2  
    3  <phpunit bootstrap=""
    4:          testSuiteLoaderFile=""
    5           printerFile="">
    6    <testsuites>

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/_files/configuration_xinclude.xml:
   19           extensionsDirectory="/tmp"
   20           printerClass="PHPUnit\TextUI\ResultPrinter"
   21:          testSuiteLoaderClass="PHPUnit\Runner\StandardTestSuiteLoader"
   22           defaultTestSuite="My Test Suite"
   23           beStrictAboutChangesToGlobalState="false"

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/end-to-end/help.phpt:
   80    --debug                     Display debugging information
   81  
   82:   --loader <loader>           TestSuiteLoader implementation to use
   83    --repeat <times>            Runs the test(s) repeatedly
   84    --teamcity                  Report test execution progress in TeamCity format

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/end-to-end/help2.phpt:
   81    --debug                     Display debugging information
   82  
   83:   --loader <loader>           TestSuiteLoader implementation to use
   84    --repeat <times>            Runs the test(s) repeatedly
   85    --teamcity                  Report test execution progress in TeamCity format

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1265.phpt:
    1  --TEST--
    2: GH-1265: Could not use "PHPUnit\Runner\StandardTestSuiteLoader" as loader
    3  --FILE--
    4  <?php

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/end-to-end/regression/GitHub/1265/phpunit1265.xml:
    1: <phpunit testSuiteLoaderClass="PHPUnit\Runner\StandardTestSuiteLoader">
    2  </phpunit>
    3  

/Users/nour/Documents/Projects/Web/KIB/vendor/phpunit/phpunit/tests/unit/Util/ConfigurationTest.php:
  134              'disableCodeCoverageIgnore'                                     => ['disableCodeCoverageIgnore', 'true', true],
  135              'processIsolation'                                              => ['processIsolation', 'true', true],
  136:             'testSuiteLoaderFile absolute path'                             => ['testSuiteLoaderFile', '/path/to/file', '/path/to/file'],
  137              'reverseDefectList'                                             => ['reverseDefectList', 'true', true],
  138              'registerMockObjectsFromTestArgumentsRecursively'               => ['registerMockObjectsFromTestArgumentsRecursively', 'true', true],
  ...
  484                  'extensionsDirectory'                        => '/tmp',
  485                  'printerClass'                               => 'PHPUnit\TextUI\ResultPrinter',
  486:                 'testSuiteLoaderClass'                       => 'PHPUnit\Runner\StandardTestSuiteLoader',
  487                  'defaultTestSuite'                           => 'My Test Suite',
  488                  'verbose'                                    => false,
  ...
  532          $phpunit = $emptyConfiguration->getPHPUnitConfiguration();
  533          $this->assertArrayNotHasKey('bootstrap', $phpunit);
  534:         $this->assertArrayNotHasKey('testSuiteLoaderFile', $phpunit);
  535          $this->assertArrayNotHasKey('printerFile', $phpunit);
  536  

/Users/nour/Documents/Projects/Web/KIB/vendor/psy/psysh/bin/psysh:
   11   */
   12  
   13: // Try to find an autoloader for a local psysh version.
   14  // We'll wrap this whole mess in a Closure so it doesn't leak any globals.
   15  call_user_func(function () {
   ..
   81  });
   82  
   83: // We didn't find an autoloader for a local version, so use the autoloader that
   84  // came with this script.
   85  if (!class_exists('Psy\Shell')) {
   ..
   98  
   99  // If the psysh binary was included directly, assume they just wanted an
  100: // autoloader and bail early.
  101  //
  102  // Keep this PHP 5.3 code around for a while in case someone is using a globally

/Users/nour/Documents/Projects/Web/KIB/vendor/psy/psysh/src/Shell.php:
   19  use Psy\Exception\TypeErrorException;
   20  use Psy\ExecutionLoop\ProcessForker;
   21: use Psy\ExecutionLoop\RunkitReloader;
   22  use Psy\Input\ShellInput;
   23  use Psy\Input\SilentInput;
   ..
  252          }
  253  
  254:         if (RunkitReloader::isSupported()) {
  255:             $listeners[] = new RunkitReloader();
  256          }
  257  

/Users/nour/Documents/Projects/Web/KIB/vendor/psy/psysh/src/ExecutionLoop/RunkitReloader.php:
   17  
   18  /**
   19:  * A runkit-based code reloader, which is pretty much magic.
   20   */
   21: class RunkitReloader extends AbstractListener
   22  {
   23      private $parser;
   ..
   35  
   36      /**
   37:      * Construct a Runkit Reloader.
   38       *
   39       * @todo Pass in Parser Factory instance for dependency injection?

/Users/nour/Documents/Projects/Web/KIB/vendor/ramsey/uuid/CHANGELOG.md:
  277  _Released: 2014-01-27_
  278  
  279:   * Fixed bug where `uuid` console application could not find the Composer autoloader when installed in another project
  280  
  281  ## 2.6.0

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/code-unit-reverse-lookup/.travis.yml:
   16  
   17  install:
   18:   - travis_retry composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable
   19  
   20  script:

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/code-unit-reverse-lookup/build.xml:
   15              <arg value="--no-ansi"/>
   16              <arg value="--no-suggest"/>
   17:             <arg value="--optimize-autoloader"/>
   18              <arg value="--prefer-stable"/>
   19          </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/comparator/composer.json:
   33      },
   34      "config": {
   35:         "optimize-autoloader": true,
   36          "sort-packages": true
   37      },

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/diff/.travis.yml:
   14  
   15  install:
   16:   - travis_retry composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable
   17  
   18  script:

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/diff/build.xml:
   15              <arg value="--no-ansi"/>
   16              <arg value="--no-suggest"/>
   17:             <arg value="--optimize-autoloader"/>
   18              <arg value="--prefer-stable"/>
   19          </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/environment/composer.json:
   12      ],
   13      "config": {
   14:         "optimize-autoloader": true,
   15          "sort-packages": true
   16      },

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/exporter/.travis.yml:
   15  
   16  install:
   17:   - travis_retry composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable
   18  
   19  script:

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/exporter/build.xml:
   15     <arg value="--no-ansi"/>
   16     <arg value="--no-suggest"/>
   17:    <arg value="--optimize-autoloader"/>
   18     <arg value="--prefer-stable"/>
   19    </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/global-state/.travis.yml:
   15  
   16  install:
   17:   - travis_retry composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable
   18  
   19  script:

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/global-state/build.xml:
   16              <arg value="--no-ansi"/>
   17              <arg value="--no-suggest"/>
   18:             <arg value="--optimize-autoloader"/>
   19              <arg value="--prefer-stable"/>
   20          </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/object-enumerator/.travis.yml:
   15  
   16  install:
   17:   - travis_retry composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable
   18  
   19  script:

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/object-enumerator/build.xml:
   15              <arg value="--no-ansi"/>
   16              <arg value="--no-suggest"/>
   17:             <arg value="--optimize-autoloader"/>
   18              <arg value="--prefer-stable"/>
   19          </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/object-reflector/.travis.yml:
   15  
   16  install:
   17:   - travis_retry composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable
   18  
   19  script:

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/object-reflector/build.xml:
   15              <arg value="--no-ansi"/>
   16              <arg value="--no-suggest"/>
   17:             <arg value="--optimize-autoloader"/>
   18              <arg value="--prefer-stable"/>
   19          </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/recursion-context/.travis.yml:
   15  
   16  install:
   17:   - travis_retry composer update --no-interaction --no-ansi --no-progress --no-suggest --optimize-autoloader --prefer-stable
   18  
   19  script:

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/recursion-context/build.xml:
   15     <arg value="--no-ansi"/>
   16     <arg value="--no-suggest"/>
   17:    <arg value="--optimize-autoloader"/>
   18     <arg value="--prefer-stable"/>
   19    </exec>

/Users/nour/Documents/Projects/Web/KIB/vendor/sebastian/resource-operations/composer.json:
   22              "php": "7.1.0"
   23          },
   24:         "optimize-autoloader": true,
   25          "sort-packages": true
   26      },

/Users/nour/Documents/Projects/Web/KIB/vendor/swiftmailer/swiftmailer/CHANGES:
  337   * changed the Decorator Plugin to allow replacements in all headers
  338   * added Swift_Mime_Grammar and Swift_Validate to validate an email address
  339:  * modified the autoloader to lazy-initialize Swiftmailer
  340   * removed Swift_Mailer::batchSend()
  341   * added NullTransport

/Users/nour/Documents/Projects/Web/KIB/vendor/swiftmailer/swiftmailer/lib/mime_types.php:
  341      'ifm' => 'application/vnd.shana.informed.formdata',
  342      'iges' => 'model/iges',
  343:     'igl' => 'application/vnd.igloader',
  344      'igm' => 'application/vnd.insors.igm',
  345      'igs' => 'model/iges',

/Users/nour/Documents/Projects/Web/KIB/vendor/swiftmailer/swiftmailer/lib/classes/Swift.php:
   35  
   36      /**
   37:      * Internal autoloader for spl_autoload_register().
   38       *
   39       * @param string $class
   ..
   41      public static function autoload($class)
   42      {
   43:         // Don't interfere with other autoloaders
   44          if (0 !== strpos($class, 'Swift_')) {
   45              return;
   ..
   65       * Configure autoloading using Swift Mailer.
   66       *
   67:      * This is designed to play nicely with other autoloaders.
   68       *
   69       * @param mixed $callable A valid PHP callable that will be called when autoloading the first Swift class

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/Application.php:
   15  use Symfony\Component\Console\Command\HelpCommand;
   16  use Symfony\Component\Console\Command\ListCommand;
   17: use Symfony\Component\Console\CommandLoader\CommandLoaderInterface;
   18  use Symfony\Component\Console\Event\ConsoleCommandEvent;
   19  use Symfony\Component\Console\Event\ConsoleErrorEvent;
   ..
   68      private $name;
   69      private $version;
   70:     private $commandLoader;
   71      private $catchExceptions = true;
   72      private $autoExit = true;
   ..
   96      }
   97  
   98:     public function setCommandLoader(CommandLoaderInterface $commandLoader)
   99      {
  100:         $this->commandLoader = $commandLoader;
  101      }
  102  
  ...
  531          $this->init();
  532  
  533:         return isset($this->commands[$name]) || ($this->commandLoader && $this->commandLoader->has($name) && $this->add($this->commandLoader->get($name)));
  534      }
  535  
  ...
  611  
  612          $aliases = [];
  613:         $allCommands = $this->commandLoader ? array_merge($this->commandLoader->getNames(), array_keys($this->commands)) : array_keys($this->commands);
  614          $expr = preg_replace_callback('{([^:]+|)}', function ($matches) { return preg_quote($matches[1]).'[^:]*'; }, $name);
  615          $commands = preg_grep('{^'.$expr.'}', $allCommands);
  ...
  642          // filter out aliases for commands which are already on the list
  643          if (\count($commands) > 1) {
  644:             $commandList = $this->commandLoader ? array_merge(array_flip($this->commandLoader->getNames()), $this->commands) : $this->commands;
  645              $commands = array_unique(array_filter($commands, function ($nameOrAlias) use ($commandList, $commands, &$aliases) {
  646                  $commandName = $commandList[$nameOrAlias] instanceof Command ? $commandList[$nameOrAlias]->getName() : $nameOrAlias;
  ...
  689  
  690          if (null === $namespace) {
  691:             if (!$this->commandLoader) {
  692                  return $this->commands;
  693              }
  694  
  695              $commands = $this->commands;
  696:             foreach ($this->commandLoader->getNames() as $name) {
  697                  if (!isset($commands[$name]) && $this->has($name)) {
  698                      $commands[$name] = $this->get($name);
  ...
  710          }
  711  
  712:         if ($this->commandLoader) {
  713:             foreach ($this->commandLoader->getNames() as $name) {
  714                  if (!isset($commands[$name]) && $namespace === $this->extractNamespace($name, substr_count($namespace, ':') + 1) && $this->has($name)) {
  715                      $commands[$name] = $this->get($name);

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/CHANGELOG.md:
   34  
   35   * added `SHELL_VERBOSITY` env var to control verbosity
   36:  * added `CommandLoaderInterface`, `FactoryCommandLoader` and PSR-11
   37:    `ContainerCommandLoader` for commands lazy-loading
   38   * added a case-insensitive command name matching fallback
   39   * added static `Command::$defaultName/getDefaultName()`, allowing for
   40:    commands to be registered at compile time in the application command loader.
   41     Setting the `$defaultName` property avoids the need for filling the `command`
   42     attribute on the `console.command` tag when using `AddConsoleCommandPass`.

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/CommandLoader/CommandLoaderInterface.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Console\CommandLoader;
    4  
    5  use Symfony\Component\Console\Command\Command;
    .
    9   * @author Robin Chalas <robin.chalas@gmail.com>
   10   */
   11: interface CommandLoaderInterface
   12  {
   13      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/CommandLoader/ContainerCommandLoader.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Console\CommandLoader;
    4  
    5  use Psr\Container\ContainerInterface;
    .
   11   * @author Robin Chalas <robin.chalas@gmail.com>
   12   */
   13: class ContainerCommandLoader implements CommandLoaderInterface
   14  {
   15      private $container;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/CommandLoader/FactoryCommandLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Console\CommandLoader;
   13  
   14  use Symfony\Component\Console\Exception\CommandNotFoundException;
   15  
   16  /**
   17:  * A simple command loader using factories to instantiate commands lazily.
   18   *
   19   * @author Maxime Steinhausser <maxime.steinhausser@gmail.com>
   20   */
   21: class FactoryCommandLoader implements CommandLoaderInterface
   22  {
   23      private $factories;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/DependencyInjection/AddConsoleCommandPass.php:
   13  
   14  use Symfony\Component\Console\Command\Command;
   15: use Symfony\Component\Console\CommandLoader\ContainerCommandLoader;
   16  use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
   17  use Symfony\Component\DependencyInjection\Compiler\ServiceLocatorTagPass;
   ..
   27  class AddConsoleCommandPass implements CompilerPassInterface
   28  {
   29:     private $commandLoaderServiceId;
   30      private $commandTag;
   31  
   32:     public function __construct(string $commandLoaderServiceId = 'console.command_loader', string $commandTag = 'console.command')
   33      {
   34:         $this->commandLoaderServiceId = $commandLoaderServiceId;
   35          $this->commandTag = $commandTag;
   36      }
   ..
   90  
   91          $container
   92:             ->register($this->commandLoaderServiceId, ContainerCommandLoader::class)
   93              ->setPublic(true)
   94              ->setArguments([ServiceLocatorTagPass::register($container, $lazyCommandRefs), $lazyCommandMap]);

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/Tests/ApplicationTest.php:
   15  use Symfony\Component\Console\Application;
   16  use Symfony\Component\Console\Command\Command;
   17: use Symfony\Component\Console\CommandLoader\FactoryCommandLoader;
   18  use Symfony\Component\Console\DependencyInjection\AddConsoleCommandPass;
   19  use Symfony\Component\Console\Event\ConsoleCommandEvent;
   ..
  140      }
  141  
  142:     public function testAllWithCommandLoader()
  143      {
  144          $application = new Application();
  ...
  150          $this->assertCount(1, $commands, '->all() takes a namespace as its first argument');
  151  
  152:         $application->setCommandLoader(new FactoryCommandLoader([
  153              'foo:bar1' => function () { return new \Foo1Command(); },
  154          ]));
  ...
  211      }
  212  
  213:     public function testHasGetWithCommandLoader()
  214      {
  215          $application = new Application();
  ...
  222          $this->assertEquals($foo, $application->get('afoobar'), '->get() returns a command by alias');
  223  
  224:         $application->setCommandLoader(new FactoryCommandLoader([
  225              'foo:bar1' => function () { return new \Foo1Command(); },
  226          ]));
  227  
  228:         $this->assertTrue($application->has('afoobar'), '->has() returns true if an instance is registered for an alias even with command loader');
  229:         $this->assertEquals($foo, $application->get('foo:bar'), '->get() returns an instance by name even with command loader');
  230:         $this->assertEquals($foo, $application->get('afoobar'), '->get() returns an instance by alias even with command loader');
  231:         $this->assertTrue($application->has('foo:bar1'), '->has() returns true for commands registered in the loader');
  232:         $this->assertInstanceOf(\Foo1Command::class, $foo1 = $application->get('foo:bar1'), '->get() returns a command by name from the command loader');
  233:         $this->assertTrue($application->has('afoobar1'), '->has() returns true for commands registered in the loader');
  234:         $this->assertEquals($foo1, $application->get('afoobar1'), '->get() returns a command by name from the command loader');
  235      }
  236  
  ...
  381      }
  382  
  383:     public function testFindWithCommandLoader()
  384      {
  385          $application = new Application();
  386:         $application->setCommandLoader(new FactoryCommandLoader([
  387              'foo:bar' => $f = function () { return new \FooCommand(); },
  388          ]));
  ...
 1643  
 1644          $application = new Application();
 1645:         $application->setCommandLoader($container->get('console.command_loader'));
 1646          $application->setAutoExit(false);
 1647  
 ....
 1667      {
 1668          $application = new Application();
 1669:         $application->setCommandLoader(new FactoryCommandLoader(['disabled' => function () { return new DisabledCommand(); }]));
 1670          $application->get('disabled');
 1671      }
 ....
 1674      {
 1675          $application = new Application();
 1676:         $application->setCommandLoader(new FactoryCommandLoader(['disabled' => function () { return new DisabledCommand(); }]));
 1677          $this->assertFalse($application->has('disabled'));
 1678      }
 ....
 1681      {
 1682          $application = new Application();
 1683:         $application->setCommandLoader(new FactoryCommandLoader(['disabled' => function () { return new DisabledCommand(); }]));
 1684          $this->assertArrayNotHasKey('disabled', $application->all());
 1685      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/Tests/CommandLoader/ContainerCommandLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Console\Tests\CommandLoader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Console\Command\Command;
   16: use Symfony\Component\Console\CommandLoader\ContainerCommandLoader;
   17  use Symfony\Component\DependencyInjection\ServiceLocator;
   18  
   19: class ContainerCommandLoaderTest extends TestCase
   20  {
   21      public function testHas()
   22      {
   23:         $loader = new ContainerCommandLoader(new ServiceLocator([
   24              'foo-service' => function () { return new Command('foo'); },
   25              'bar-service' => function () { return new Command('bar'); },
   26          ]), ['foo' => 'foo-service', 'bar' => 'bar-service']);
   27  
   28:         $this->assertTrue($loader->has('foo'));
   29:         $this->assertTrue($loader->has('bar'));
   30:         $this->assertFalse($loader->has('baz'));
   31      }
   32  
   33      public function testGet()
   34      {
   35:         $loader = new ContainerCommandLoader(new ServiceLocator([
   36              'foo-service' => function () { return new Command('foo'); },
   37              'bar-service' => function () { return new Command('bar'); },
   38          ]), ['foo' => 'foo-service', 'bar' => 'bar-service']);
   39  
   40:         $this->assertInstanceOf(Command::class, $loader->get('foo'));
   41:         $this->assertInstanceOf(Command::class, $loader->get('bar'));
   42      }
   43  
   ..
   47      public function testGetUnknownCommandThrows()
   48      {
   49:         (new ContainerCommandLoader(new ServiceLocator([]), []))->get('unknown');
   50      }
   51  
   52      public function testGetCommandNames()
   53      {
   54:         $loader = new ContainerCommandLoader(new ServiceLocator([
   55              'foo-service' => function () { return new Command('foo'); },
   56              'bar-service' => function () { return new Command('bar'); },
   57          ]), ['foo' => 'foo-service', 'bar' => 'bar-service']);
   58  
   59:         $this->assertSame(['foo', 'bar'], $loader->getNames());
   60      }
   61  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/Tests/CommandLoader/FactoryCommandLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Console\Tests\CommandLoader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Console\Command\Command;
   16: use Symfony\Component\Console\CommandLoader\FactoryCommandLoader;
   17  
   18: class FactoryCommandLoaderTest extends TestCase
   19  {
   20      public function testHas()
   21      {
   22:         $loader = new FactoryCommandLoader([
   23              'foo' => function () { return new Command('foo'); },
   24              'bar' => function () { return new Command('bar'); },
   25          ]);
   26  
   27:         $this->assertTrue($loader->has('foo'));
   28:         $this->assertTrue($loader->has('bar'));
   29:         $this->assertFalse($loader->has('baz'));
   30      }
   31  
   32      public function testGet()
   33      {
   34:         $loader = new FactoryCommandLoader([
   35              'foo' => function () { return new Command('foo'); },
   36              'bar' => function () { return new Command('bar'); },
   37          ]);
   38  
   39:         $this->assertInstanceOf(Command::class, $loader->get('foo'));
   40:         $this->assertInstanceOf(Command::class, $loader->get('bar'));
   41      }
   42  
   ..
   46      public function testGetUnknownCommandThrows()
   47      {
   48:         (new FactoryCommandLoader([]))->get('unknown');
   49      }
   50  
   51      public function testGetCommandNames()
   52      {
   53:         $loader = new FactoryCommandLoader([
   54              'foo' => function () { return new Command('foo'); },
   55              'bar' => function () { return new Command('bar'); },
   56          ]);
   57  
   58:         $this->assertSame(['foo', 'bar'], $loader->getNames());
   59      }
   60  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/console/Tests/DependencyInjection/AddConsoleCommandPassTest.php:
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Console\Command\Command;
   16: use Symfony\Component\Console\CommandLoader\ContainerCommandLoader;
   17  use Symfony\Component\Console\DependencyInjection\AddConsoleCommandPass;
   18  use Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument;
   ..
   69          (new AddConsoleCommandPass())->process($container);
   70  
   71:         $commandLoader = $container->getDefinition('console.command_loader');
   72:         $commandLocator = $container->getDefinition((string) $commandLoader->getArgument(0));
   73  
   74:         $this->assertSame(ContainerCommandLoader::class, $commandLoader->getClass());
   75:         $this->assertSame(['my:command' => 'my-command', 'my:alias' => 'my-command'], $commandLoader->getArgument(1));
   76          $this->assertEquals([['my-command' => new ServiceClosureArgument(new TypedReference('my-command', MyCommand::class))]], $commandLocator->getArguments());
   77          $this->assertSame([], $container->getParameter('console.command.ids'));
   ..
   91          $pass->process($container);
   92  
   93:         $commandLoader = $container->getDefinition('console.command_loader');
   94:         $commandLocator = $container->getDefinition((string) $commandLoader->getArgument(0));
   95  
   96:         $this->assertSame(ContainerCommandLoader::class, $commandLoader->getClass());
   97:         $this->assertSame(['default' => 'with-default-name'], $commandLoader->getArgument(1));
   98          $this->assertEquals([['with-default-name' => new ServiceClosureArgument(new TypedReference('with-default-name', NamedCommand::class))]], $commandLocator->getArguments());
   99          $this->assertSame([], $container->getParameter('console.command.ids'));
  ...
  108          $pass->process($container);
  109  
  110:         $this->assertSame(['new-name' => 'with-default-name'], $container->getDefinition('console.command_loader')->getArgument(1));
  111      }
  112  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/CHANGELOG.md:
   40  -----
   41  
   42: * added deprecations checking for parent interfaces/classes to DebugClassLoader
   43  * added ZTS support to symfony_debug extension
   44  * added symfony_debug_backtrace() to symfony_debug extension
   ..
   62  -----
   63  
   64:  * added a DebugClassLoader able to wrap any autoloader providing a findFile method
   65   * improved error messages for not found classes and functions
   66  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/Debug.php:
   56          }
   57  
   58:         DebugClassLoader::enable();
   59      }
   60  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/DebugClassLoader.php:
   15  
   16  /**
   17:  * Autoloader checking if the class is really defined in the file found.
   18   *
   19:  * The ClassLoader will wrap all registered autoloaders
   20   * and will throw an exception if a file is found but does
   21   * not declare the class.
   ..
   26   * @author Guilhem Niot <guilhem.niot@gmail.com>
   27   */
   28: class DebugClassLoader
   29  {
   30:     private $classLoader;
   31      private $isFinder;
   32      private $loaded = [];
   ..
   41      private static $darwinCache = ['/' => ['/', []]];
   42  
   43:     public function __construct(callable $classLoader)
   44      {
   45:         $this->classLoader = $classLoader;
   46:         $this->isFinder = \is_array($classLoader) && method_exists($classLoader[0], 'findFile');
   47  
   48          if (!isset(self::$caseCheck)) {
   ..
   71  
   72      /**
   73:      * Gets the wrapped class loader.
   74       *
   75:      * @return callable The wrapped class loader
   76       */
   77:     public function getClassLoader()
   78      {
   79:         return $this->classLoader;
   80      }
   81  
   82      /**
   83:      * Wraps all autoloaders.
   84       */
   85      public static function enable()
   ..
  121          foreach ($functions as $function) {
  122              if (\is_array($function) && $function[0] instanceof self) {
  123:                 $function = $function[0]->getClassLoader();
  124              }
  125  
  ...
  133      public function findFile($class)
  134      {
  135:         return $this->isFinder ? $this->classLoader[0]->findFile($class) ?: null : null;
  136      }
  137  
  ...
  150              if ($this->isFinder && !isset($this->loaded[$class])) {
  151                  $this->loaded[$class] = true;
  152:                 if (!$file = $this->classLoader[0]->findFile($class) ?: false) {
  153                      // no-op
  154                  } elseif (\function_exists('opcache_is_script_cached') && @opcache_is_script_cached($file)) {
  ...
  160                  }
  161              } else {
  162:                 ($this->classLoader)($class);
  163                  $file = false;
  164              }
  ...
  210              }
  211  
  212:             throw new \RuntimeException(sprintf('The autoloader expected class "%s" to be defined in file "%s". The file was found but the class was not in it, the class name or namespace probably has a typo.', $class, $file));
  213          }
  214  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/ErrorHandler.php:
  679  
  680      /**
  681:      * Cleans the trace by removing function arguments and the frames added by the error handler and DebugClassLoader.
  682       */
  683      private function cleanTrace($backtrace, $type, $file, $line, $throw)
  ...
  691              }
  692          }
  693:         if (class_exists(DebugClassLoader::class, false)) {
  694              for ($i = \count($lightTrace) - 2; 0 < $i; --$i) {
  695:                 if (DebugClassLoader::class === ($lightTrace[$i]['class'] ?? null)) {
  696                      array_splice($lightTrace, --$i, 2);
  697                  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/FatalErrorHandler/ClassNotFoundFatalErrorHandler.php:
   12  namespace Symfony\Component\Debug\FatalErrorHandler;
   13  
   14: use Composer\Autoload\ClassLoader as ComposerClassLoader;
   15: use Symfony\Component\ClassLoader\ClassLoader as SymfonyClassLoader;
   16: use Symfony\Component\Debug\DebugClassLoader;
   17  use Symfony\Component\Debug\Exception\ClassNotFoundException;
   18  use Symfony\Component\Debug\Exception\FatalErrorException;
   ..
   78       *
   79       * By default, it looks for PSR-0 and PSR-4 classes registered via a Symfony or a Composer
   80:      * autoloader (that should cover all common cases).
   81       *
   82       * @param string $class A class name (without its namespace)
   ..
   90          }
   91  
   92:         // find Symfony and Composer autoloaders
   93          $classes = [];
   94  
   ..
   97                  continue;
   98              }
   99:             // get class loaders wrapped by DebugClassLoader
  100:             if ($function[0] instanceof DebugClassLoader) {
  101:                 $function = $function[0]->getClassLoader();
  102  
  103                  if (!\is_array($function)) {
  ...
  106              }
  107  
  108:             if ($function[0] instanceof ComposerClassLoader || $function[0] instanceof SymfonyClassLoader) {
  109                  foreach ($function[0]->getPrefixes() as $prefix => $paths) {
  110                      foreach ($paths as $path) {
  ...
  113                  }
  114              }
  115:             if ($function[0] instanceof ComposerClassLoader) {
  116                  foreach ($function[0]->getPrefixesPsr4() as $prefix => $paths) {
  117                      foreach ($paths as $path) {
  ...
  163          }
  164  
  165:         // We cannot use the autoloader here as most of them use require; but if the class
  166:         // is not found, the new autoloader call will require the file again leading to a
  167          // "cannot redeclare class" error.
  168          foreach ($candidates as $candidate) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/Tests/DebugClassLoaderTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Debug\DebugClassLoader;
   16  
   17: class DebugClassLoaderTest extends TestCase
   18  {
   19      /**
   ..
   22      private $errorReporting;
   23  
   24:     private $loader;
   25  
   26      protected function setUp()
   27      {
   28          $this->errorReporting = error_reporting(E_ALL);
   29:         $this->loader = new ClassLoader();
   30:         spl_autoload_register([$this->loader, 'loadClass'], true, true);
   31:         DebugClassLoader::enable();
   32      }
   33  
   34      protected function tearDown()
   35      {
   36:         DebugClassLoader::disable();
   37:         spl_autoload_unregister([$this->loader, 'loadClass']);
   38          error_reporting($this->errorReporting);
   39      }
   ..
   41      public function testIdempotence()
   42      {
   43:         DebugClassLoader::enable();
   44  
   45          $functions = spl_autoload_functions();
   46          foreach ($functions as $function) {
   47:             if (\is_array($function) && $function[0] instanceof DebugClassLoader) {
   48                  $reflClass = new \ReflectionClass($function[0]);
   49:                 $reflProp = $reflClass->getProperty('classLoader');
   50                  $reflProp->setAccessible(true);
   51  
   52:                 $this->assertNotInstanceOf('Symfony\Component\Debug\DebugClassLoader', $reflProp->getValue($function[0]));
   53  
   54                  return;
   ..
   56          }
   57  
   58:         $this->fail('DebugClassLoader did not register');
   59      }
   60  
   ..
  319  }
  320  
  321: class ClassLoader
  322  {
  323      public function loadClass($class)

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/Tests/FatalErrorHandler/ClassNotFoundFatalErrorHandlerTest.php:
   12  namespace Symfony\Component\Debug\Tests\FatalErrorHandler;
   13  
   14: use Composer\Autoload\ClassLoader as ComposerClassLoader;
   15  use PHPUnit\Framework\TestCase;
   16: use Symfony\Component\Debug\DebugClassLoader;
   17  use Symfony\Component\Debug\Exception\FatalErrorException;
   18  use Symfony\Component\Debug\FatalErrorHandler\ClassNotFoundFatalErrorHandler;
   ..
   27              }
   28  
   29:             // get class loaders wrapped by DebugClassLoader
   30:             if ($function[0] instanceof DebugClassLoader) {
   31:                 $function = $function[0]->getClassLoader();
   32              }
   33  
   34:             if ($function[0] instanceof ComposerClassLoader) {
   35                  $function[0]->add('Symfony_Component_Debug_Tests_Fixtures', \dirname(\dirname(\dirname(\dirname(\dirname(__DIR__))))));
   36                  break;
   ..
   42       * @dataProvider provideClassNotFoundData
   43       */
   44:     public function testHandleClassNotFound($error, $translatedMessage, $autoloader = null)
   45      {
   46:         if ($autoloader) {
   47:             // Unregister all autoloaders to ensure the custom provided
   48:             // autoloader is the only one to be used during the test run.
   49:             $autoloaders = spl_autoload_functions();
   50:             array_map('spl_autoload_unregister', $autoloaders);
   51:             spl_autoload_register($autoloader);
   52          }
   53  
   ..
   56          $exception = $handler->handleError($error, new FatalErrorException('', 0, $error['type'], $error['file'], $error['line']));
   57  
   58:         if ($autoloader) {
   59:             spl_autoload_unregister($autoloader);
   60:             array_map('spl_autoload_register', $autoloaders);
   61          }
   62  
   ..
   70      public function provideClassNotFoundData()
   71      {
   72:         $autoloader = new ComposerClassLoader();
   73:         $autoloader->add('Symfony\Component\Debug\Exception\\', realpath(__DIR__.'/../../Exception'));
   74  
   75:         $debugClassLoader = new DebugClassLoader([$autoloader, 'loadClass']);
   76  
   77          return [
   ..
  129                  ],
  130                  "Attempted to load class \"UndefinedFunctionException\" from namespace \"Foo\Bar\".\nDid you forget a \"use\" statement for \"Symfony\Component\Debug\Exception\UndefinedFunctionException\"?",
  131:                 [$autoloader, 'loadClass'],
  132              ],
  133              [
  ...
  139                  ],
  140                  "Attempted to load class \"UndefinedFunctionException\" from namespace \"Foo\Bar\".\nDid you forget a \"use\" statement for \"Symfony\Component\Debug\Exception\UndefinedFunctionException\"?",
  141:                 [$debugClassLoader, 'loadClass'],
  142              ],
  143              [

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/debug/Tests/phpt/debug_class_loader.phpt:
    1  --TEST--
    2: Test DebugClassLoader with previously loaded parents
    3  --FILE--
    4  <?php
    .
    6  namespace Symfony\Component\Debug\Tests\Fixtures;
    7  
    8: use Symfony\Component\Debug\DebugClassLoader;
    9  
   10  $vendor = __DIR__;
   ..
   18  set_error_handler(function ($type, $msg) { echo $msg, "\n"; });
   19  
   20: DebugClassLoader::enable();
   21  
   22  class_exists(ExtendedFinalMethod::class);

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-foundation/File/MimeType/MimeTypeExtensionGuesser.php:
  264          'application/vnd.ibm.secure-container' => 'sc',
  265          'application/vnd.iccprofile' => 'icc',
  266:         'application/vnd.igloader' => 'igl',
  267          'application/vnd.immervision-ivp' => 'ivp',
  268          'application/vnd.immervision-ivu' => 'ivu',

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-foundation/Tests/File/UploadedFileTest.php:
  322       * @dataProvider uploadedFileErrorProvider
  323       */
  324:     public function testIsInvalidOnUploadError($error)
  325      {
  326          $file = new UploadedFile(

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Client.php:
   89          $requires = '';
   90          foreach (get_declared_classes() as $class) {
   91:             if (0 === strpos($class, 'ComposerAutoloaderInit')) {
   92                  $r = new \ReflectionClass($class);
   93                  $file = \dirname(\dirname($r->getFileName())).'/autoload.php';
   ..
   99  
  100          if (!$requires) {
  101:             throw new \RuntimeException('Composer autoloader not found.');
  102          }
  103  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Kernel.php:
   15  use Symfony\Bridge\ProxyManager\LazyProxy\PhpDumper\ProxyDumper;
   16  use Symfony\Component\Config\ConfigCache;
   17: use Symfony\Component\Config\Loader\DelegatingLoader;
   18: use Symfony\Component\Config\Loader\LoaderResolver;
   19: use Symfony\Component\Debug\DebugClassLoader;
   20  use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
   21  use Symfony\Component\DependencyInjection\Compiler\PassConfig;
   ..
   23  use Symfony\Component\DependencyInjection\ContainerInterface;
   24  use Symfony\Component\DependencyInjection\Dumper\PhpDumper;
   25: use Symfony\Component\DependencyInjection\Loader\ClosureLoader;
   26: use Symfony\Component\DependencyInjection\Loader\DirectoryLoader;
   27: use Symfony\Component\DependencyInjection\Loader\GlobFileLoader;
   28: use Symfony\Component\DependencyInjection\Loader\IniFileLoader;
   29: use Symfony\Component\DependencyInjection\Loader\PhpFileLoader;
   30: use Symfony\Component\DependencyInjection\Loader\XmlFileLoader;
   31: use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
   32  use Symfony\Component\Filesystem\Filesystem;
   33  use Symfony\Component\HttpFoundation\Request;
   ..
  520                      }
  521                  }
  522:                 // Remove frames added by DebugClassLoader.
  523                  for ($i = \count($backtrace) - 2; 0 < $i; --$i) {
  524:                     if (DebugClassLoader::class === ($backtrace[$i]['class'] ?? null)) {
  525                          $backtrace = [$backtrace[$i + 1]];
  526                          break;
  ...
  651          $this->prepareContainer($container);
  652  
  653:         if (null !== $cont = $this->registerContainerConfiguration($this->getContainerLoader($container))) {
  654              $container->merge($cont);
  655          }
  ...
  753  
  754      /**
  755:      * Returns a loader for the container.
  756       *
  757:      * @return DelegatingLoader The loader
  758       */
  759:     protected function getContainerLoader(ContainerInterface $container)
  760      {
  761          $locator = new FileLocator($this);
  762:         $resolver = new LoaderResolver([
  763:             new XmlFileLoader($container, $locator),
  764:             new YamlFileLoader($container, $locator),
  765:             new IniFileLoader($container, $locator),
  766:             new PhpFileLoader($container, $locator),
  767:             new GlobFileLoader($container, $locator),
  768:             new DirectoryLoader($container, $locator),
  769:             new ClosureLoader($container),
  770          ]);
  771  
  772:         return new DelegatingLoader($resolver);
  773      }
  774  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/KernelInterface.php:
   12  namespace Symfony\Component\HttpKernel;
   13  
   14: use Symfony\Component\Config\Loader\LoaderInterface;
   15  use Symfony\Component\DependencyInjection\ContainerInterface;
   16  use Symfony\Component\HttpKernel\Bundle\BundleInterface;
   ..
   37       * Loads the container configuration.
   38       */
   39:     public function registerContainerConfiguration(LoaderInterface $loader);
   40  
   41      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/DependencyInjection/AddAnnotatedClassesToCachePass.php:
   12  namespace Symfony\Component\HttpKernel\DependencyInjection;
   13  
   14: use Composer\Autoload\ClassLoader;
   15: use Symfony\Component\Debug\DebugClassLoader;
   16  use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
   17  use Symfony\Component\DependencyInjection\ContainerBuilder;
   ..
   93              }
   94  
   95:             if ($function[0] instanceof DebugClassLoader) {
   96:                 $function = $function[0]->getClassLoader();
   97              }
   98  
   99:             if (\is_array($function) && $function[0] instanceof ClassLoader) {
  100                  $classes += array_filter($function[0]->getClassMap());
  101              }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Fragment/HIncludeFragmentRenderer.php:
   18  use Symfony\Component\Templating\EngineInterface;
   19  use Twig\Environment;
   20: use Twig\Error\LoaderError;
   21: use Twig\Loader\ExistsLoaderInterface;
   22  
   23  /**
   ..
  132          }
  133  
  134:         $loader = $this->templating->getLoader();
  135:         if ($loader instanceof ExistsLoaderInterface || method_exists($loader, 'exists')) {
  136:             return $loader->exists($template);
  137          }
  138  
  139          try {
  140:             if (method_exists($loader, 'getSourceContext')) {
  141:                 $loader->getSourceContext($template);
  142              } else {
  143:                 $loader->getSource($template);
  144              }
  145  
  146              return true;
  147:         } catch (LoaderError $e) {
  148          }
  149  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Tests/KernelTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Config\Loader\LoaderInterface;
   16  use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
   17  use Symfony\Component\DependencyInjection\ContainerBuilder;
   ..
  722      }
  723  
  724:     public function registerContainerConfiguration(LoaderInterface $loader)
  725      {
  726      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Tests/DataCollector/ConfigDataCollectorTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Config\Loader\LoaderInterface;
   16  use Symfony\Component\HttpFoundation\Request;
   17  use Symfony\Component\HttpFoundation\Response;
   ..
   71      }
   72  
   73:     public function registerContainerConfiguration(LoaderInterface $loader)
   74      {
   75      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Tests/Fixtures/KernelForOverrideName.php:
   12  namespace Symfony\Component\HttpKernel\Tests\Fixtures;
   13  
   14: use Symfony\Component\Config\Loader\LoaderInterface;
   15  use Symfony\Component\HttpKernel\Kernel;
   16  
   ..
   23      }
   24  
   25:     public function registerContainerConfiguration(LoaderInterface $loader)
   26      {
   27      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Tests/Fixtures/KernelForTest.php:
   12  namespace Symfony\Component\HttpKernel\Tests\Fixtures;
   13  
   14: use Symfony\Component\Config\Loader\LoaderInterface;
   15  use Symfony\Component\HttpKernel\Kernel;
   16  
   ..
   27      }
   28  
   29:     public function registerContainerConfiguration(LoaderInterface $loader)
   30      {
   31      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/http-kernel/Tests/Fixtures/KernelWithoutBundles.php:
   12  namespace Symfony\Component\HttpKernel\Tests\Fixtures;
   13  
   14: use Symfony\Component\Config\Loader\LoaderInterface;
   15  use Symfony\Component\DependencyInjection\ContainerBuilder;
   16  use Symfony\Component\HttpKernel\Kernel;
   ..
   23      }
   24  
   25:     public function registerContainerConfiguration(LoaderInterface $loader)
   26      {
   27      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/CHANGELOG.md:
   18   * Added `NoConfigurationException`.
   19   * Added the possibility to define a prefix for all routes of a controller via @Route(name="prefix_")
   20:  * Added support for prioritized routing loaders.
   21   * Add matched and default parameters to redirect responses
   22   * Added support for a `controller` keyword for configuring route controllers in YAML and XML configurations.
   ..
   45  
   46   * allowed specifying a directory to recursively load all routing configuration files it contains
   47:  * Added ObjectRouteLoader and ServiceRouteLoader that allow routes to be loaded
   48     by calling a method on an object/service.
   49   * [DEPRECATION] Deprecated the hardcoded value for the `$referenceType` argument of the `UrlGeneratorInterface::generate` method.

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/composer.json:
   35      "suggest": {
   36          "symfony/http-foundation": "For using a Symfony Request object",
   37:         "symfony/config": "For using the all-in-one router or any loader",
   38:         "symfony/yaml": "For using the YAML loader",
   39          "symfony/expression-language": "For using expression matching",
   40:         "doctrine/annotations": "For using the annotation loader"
   41      },
   42      "autoload": {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/RouteCollectionBuilder.php:
   12  namespace Symfony\Component\Routing;
   13  
   14: use Symfony\Component\Config\Exception\LoaderLoadException;
   15: use Symfony\Component\Config\Loader\LoaderInterface;
   16  use Symfony\Component\Config\Resource\ResourceInterface;
   17  
   ..
   28      private $routes = [];
   29  
   30:     private $loader;
   31      private $defaults = [];
   32      private $prefix;
   ..
   39      private $resources = [];
   40  
   41:     public function __construct(LoaderInterface $loader = null)
   42      {
   43:         $this->loader = $loader;
   44      }
   45  
   ..
   55       * @return self
   56       *
   57:      * @throws LoaderLoadException
   58       */
   59      public function import($resource, $prefix = '/', $type = null)
   ..
  110      public function createBuilder()
  111      {
  112:         return new self($this->loader);
  113      }
  114  
  ...
  341  
  342      /**
  343:      * Finds a loader able to load an imported resource and loads it.
  344       *
  345       * @param mixed       $resource A resource
  ...
  348       * @return RouteCollection[]
  349       *
  350:      * @throws LoaderLoadException If no loader is found
  351       */
  352      private function load($resource, string $type = null): array
  353      {
  354:         if (null === $this->loader) {
  355:             throw new \BadMethodCallException('Cannot import other routing resources: you must pass a LoaderInterface when constructing RouteCollectionBuilder.');
  356          }
  357  
  358:         if ($this->loader->supports($resource, $type)) {
  359:             $collections = $this->loader->load($resource, $type);
  360  
  361              return \is_array($collections) ? $collections : [$collections];
  362          }
  363  
  364:         if (null === $resolver = $this->loader->getResolver()) {
  365:             throw new LoaderLoadException($resource, null, null, null, $type);
  366          }
  367  
  368:         if (false === $loader = $resolver->resolve($resource, $type)) {
  369:             throw new LoaderLoadException($resource, null, null, null, $type);
  370          }
  371  
  372:         $collections = $loader->load($resource, $type);
  373  
  374          return \is_array($collections) ? $collections : [$collections];

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Router.php:
   16  use Symfony\Component\Config\ConfigCacheFactoryInterface;
   17  use Symfony\Component\Config\ConfigCacheInterface;
   18: use Symfony\Component\Config\Loader\LoaderInterface;
   19  use Symfony\Component\ExpressionLanguage\ExpressionFunctionProviderInterface;
   20  use Symfony\Component\HttpFoundation\Request;
   ..
   50  
   51      /**
   52:      * @var LoaderInterface
   53       */
   54:     protected $loader;
   55  
   56      /**
   ..
   90  
   91      /**
   92:      * @param LoaderInterface $loader   A LoaderInterface instance
   93       * @param mixed           $resource The main resource to load
   94       * @param array           $options  An array of options
   ..
   96       * @param LoggerInterface $logger   A logger instance
   97       */
   98:     public function __construct(LoaderInterface $loader, $resource, array $options = [], RequestContext $context = null, LoggerInterface $logger = null, string $defaultLocale = null)
   99      {
  100:         $this->loader = $loader;
  101          $this->resource = $resource;
  102          $this->logger = $logger;
  ...
  202      {
  203          if (null === $this->collection) {
  204:             $this->collection = $this->loader->load($this->resource, $this->options['resource_type']);
  205          }
  206  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/DependencyInjection/RoutingResolverPass.php:
   18  
   19  /**
   20:  * Adds tagged routing.loader services to routing.resolver service.
   21   *
   22   * @author Fabien Potencier <fabien@symfony.com>
   ..
   27  
   28      private $resolverServiceId;
   29:     private $loaderTag;
   30  
   31:     public function __construct(string $resolverServiceId = 'routing.resolver', string $loaderTag = 'routing.loader')
   32      {
   33          $this->resolverServiceId = $resolverServiceId;
   34:         $this->loaderTag = $loaderTag;
   35      }
   36  
   ..
   43          $definition = $container->getDefinition($this->resolverServiceId);
   44  
   45:         foreach ($this->findAndSortTaggedServices($this->loaderTag, $container) as $id) {
   46:             $definition->addMethodCall('addLoader', [new Reference($id)]);
   47          }
   48      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/AnnotationClassLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14  use Doctrine\Common\Annotations\Reader;
   15: use Symfony\Component\Config\Loader\LoaderInterface;
   16: use Symfony\Component\Config\Loader\LoaderResolverInterface;
   17  use Symfony\Component\Config\Resource\FileResource;
   18  use Symfony\Component\Routing\Route;
   ..
   20  
   21  /**
   22:  * AnnotationClassLoader loads routing information from a PHP class and its methods.
   23   *
   24   * You need to define an implementation for the getRouteDefaults() method. Most of the
   ..
   56   * @author Fabien Potencier <fabien@symfony.com>
   57   */
   58: abstract class AnnotationClassLoader implements LoaderInterface
   59  {
   60      protected $reader;
   ..
  228       * {@inheritdoc}
  229       */
  230:     public function setResolver(LoaderResolverInterface $resolver)
  231      {
  232      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/AnnotationDirectoryLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14  use Symfony\Component\Config\Resource\DirectoryResource;
   ..
   16  
   17  /**
   18:  * AnnotationDirectoryLoader loads routing information from annotations set
   19   * on PHP classes and methods.
   20   *
   21   * @author Fabien Potencier <fabien@symfony.com>
   22   */
   23: class AnnotationDirectoryLoader extends AnnotationFileLoader
   24  {
   25      /**
   ..
   65                  }
   66  
   67:                 $collection->addCollection($this->loader->load($class, $type));
   68              }
   69          }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/AnnotationFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14  use Symfony\Component\Config\FileLocatorInterface;
   15: use Symfony\Component\Config\Loader\FileLoader;
   16  use Symfony\Component\Config\Resource\FileResource;
   17  use Symfony\Component\Routing\RouteCollection;
   18  
   19  /**
   20:  * AnnotationFileLoader loads routing information from annotations set
   21   * on a PHP class and its methods.
   22   *
   23   * @author Fabien Potencier <fabien@symfony.com>
   24   */
   25: class AnnotationFileLoader extends FileLoader
   26  {
   27:     protected $loader;
   28  
   29      /**
   30       * @throws \RuntimeException
   31       */
   32:     public function __construct(FileLocatorInterface $locator, AnnotationClassLoader $loader)
   33      {
   34          if (!\function_exists('token_get_all')) {
   35:             throw new \LogicException('The Tokenizer extension is required for the routing annotation loaders.');
   36          }
   37  
   38          parent::__construct($locator);
   39  
   40:         $this->loader = $loader;
   41      }
   42  
   ..
   63  
   64              $collection->addResource(new FileResource($path));
   65:             $collection->addCollection($this->loader->load($class, $type));
   66          }
   67  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/ClosureLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14: use Symfony\Component\Config\Loader\Loader;
   15  use Symfony\Component\Routing\RouteCollection;
   16  
   17  /**
   18:  * ClosureLoader loads routes from a PHP closure.
   19   *
   20   * The Closure must return a RouteCollection instance.
   ..
   22   * @author Fabien Potencier <fabien@symfony.com>
   23   */
   24: class ClosureLoader extends Loader
   25  {
   26      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/DirectoryLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14: use Symfony\Component\Config\Loader\FileLoader;
   15  use Symfony\Component\Config\Resource\DirectoryResource;
   16  use Symfony\Component\Routing\RouteCollection;
   17  
   18: class DirectoryLoader extends FileLoader
   19  {
   20      /**
   ..
   52      public function supports($resource, $type = null)
   53      {
   54:         // only when type is forced to directory, not to conflict with AnnotationLoader
   55  
   56          return 'directory' === $type;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/GlobFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14: use Symfony\Component\Config\Loader\FileLoader;
   15  use Symfony\Component\Routing\RouteCollection;
   16  
   17  /**
   18:  * GlobFileLoader loads files from a glob pattern.
   19   *
   20   * @author Nicolas Grekas <p@tchwork.com>
   21   */
   22: class GlobFileLoader extends FileLoader
   23  {
   24      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/ObjectRouteLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14: use Symfony\Component\Config\Loader\Loader;
   15  use Symfony\Component\Config\Resource\FileResource;
   16  use Symfony\Component\Routing\RouteCollection;
   17  
   18  /**
   19:  * A route loader that calls a method on an object to load the routes.
   20   *
   21   * @author Ryan Weaver <ryan@knpuniversity.com>
   22   */
   23: abstract class ObjectRouteLoader extends Loader
   24  {
   25      /**
   ..
   47          if (1 === substr_count($resource, ':')) {
   48              $resource = str_replace(':', '::', $resource);
   49:             @trigger_error(sprintf('Referencing service route loaders with a single colon is deprecated since Symfony 4.1. Use %s instead.', $resource), E_USER_DEPRECATED);
   50          }
   51  
   52          $parts = explode('::', $resource);
   53          if (2 != \count($parts)) {
   54:             throw new \InvalidArgumentException(sprintf('Invalid resource "%s" passed to the "service" route loader: use the format "service::method"', $resource));
   55          }
   56  
   ..
   58          $method = $parts[1];
   59  
   60:         $loaderObject = $this->getServiceObject($serviceString);
   61  
   62:         if (!\is_object($loaderObject)) {
   63:             throw new \LogicException(sprintf('%s:getServiceObject() must return an object: %s returned', \get_class($this), \gettype($loaderObject)));
   64          }
   65  
   66:         if (!\is_callable([$loaderObject, $method])) {
   67:             throw new \BadMethodCallException(sprintf('Method "%s" not found on "%s" when importing routing resource "%s"', $method, \get_class($loaderObject), $resource));
   68          }
   69  
   70:         $routeCollection = $loaderObject->$method($this);
   71  
   72          if (!$routeCollection instanceof RouteCollection) {
   73              $type = \is_object($routeCollection) ? \get_class($routeCollection) : \gettype($routeCollection);
   74  
   75:             throw new \LogicException(sprintf('The %s::%s method must return a RouteCollection: %s returned', \get_class($loaderObject), $method, $type));
   76          }
   77  
   78          // make the service file tracked so that if it changes, the cache rebuilds
   79:         $this->addClassResource(new \ReflectionClass($loaderObject), $routeCollection);
   80  
   81          return $routeCollection;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/PhpFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14: use Symfony\Component\Config\Loader\FileLoader;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;
   17  use Symfony\Component\Routing\RouteCollection;
   18  
   19  /**
   20:  * PhpFileLoader loads routes from a PHP file.
   21   *
   22   * The file must return a RouteCollection instance.
   ..
   24   * @author Fabien Potencier <fabien@symfony.com>
   25   */
   26: class PhpFileLoader extends FileLoader
   27  {
   28      /**
   ..
   40  
   41          // the closure forbids access to the private scope in the included file
   42:         $loader = $this;
   43:         $load = \Closure::bind(function ($file) use ($loader) {
   44              return include $file;
   45:         }, null, ProtectedPhpFileLoader::class);
   46  
   47          $result = $load($path);
   ..
   71   * @internal
   72   */
   73: final class ProtectedPhpFileLoader extends PhpFileLoader
   74  {
   75  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/XmlFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14: use Symfony\Component\Config\Loader\FileLoader;
   15  use Symfony\Component\Config\Resource\FileResource;
   16  use Symfony\Component\Config\Util\XmlUtils;
   ..
   19  
   20  /**
   21:  * XmlFileLoader loads XML routing files.
   22   *
   23   * @author Fabien Potencier <fabien@symfony.com>
   24   * @author Tobias Schultze <http://tobion.de>
   25   */
   26: class XmlFileLoader extends FileLoader
   27  {
   28      const NAMESPACE_URI = 'http://symfony.com/schema/routing';

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/YamlFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader;
   13  
   14: use Symfony\Component\Config\Loader\FileLoader;
   15  use Symfony\Component\Config\Resource\FileResource;
   16  use Symfony\Component\Routing\Route;
   ..
   21  
   22  /**
   23:  * YamlFileLoader loads Yaml routing files.
   24   *
   25   * @author Fabien Potencier <fabien@symfony.com>
   26   * @author Tobias Schultze <http://tobion.de>
   27   */
   28: class YamlFileLoader extends FileLoader
   29  {
   30      private static $availableKeys = [

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/Configurator/CollectionConfigurator.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader\Configurator;
   13  
   14  use Symfony\Component\Routing\Route;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/Configurator/ImportConfigurator.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader\Configurator;
   13  
   14  use Symfony\Component\Routing\Route;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/Configurator/RouteConfigurator.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader\Configurator;
   13  
   14  use Symfony\Component\Routing\RouteCollection;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/Configurator/RoutingConfigurator.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader\Configurator;
   13  
   14: use Symfony\Component\Routing\Loader\PhpFileLoader;
   15  use Symfony\Component\Routing\RouteCollection;
   16  
   ..
   22      use Traits\AddTrait;
   23  
   24:     private $loader;
   25      private $path;
   26      private $file;
   27  
   28:     public function __construct(RouteCollection $collection, PhpFileLoader $loader, string $path, string $file)
   29      {
   30          $this->collection = $collection;
   31:         $this->loader = $loader;
   32          $this->path = $path;
   33          $this->file = $file;
   ..
   39      final public function import($resource, $type = null, $ignoreErrors = false)
   40      {
   41:         $this->loader->setCurrentDir(\dirname($this->path));
   42:         $imported = $this->loader->import($resource, $type, $ignoreErrors, $this->file);
   43          if (!\is_array($imported)) {
   44              return new ImportConfigurator($this->collection, $imported);

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/Configurator/Traits/AddTrait.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader\Configurator\Traits;
   13  
   14: use Symfony\Component\Routing\Loader\Configurator\CollectionConfigurator;
   15: use Symfony\Component\Routing\Loader\Configurator\RouteConfigurator;
   16  use Symfony\Component\Routing\Route;
   17  use Symfony\Component\Routing\RouteCollection;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/Configurator/Traits/RouteTrait.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader\Configurator\Traits;
   13  
   14  use Symfony\Component\Routing\Route;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Loader/DependencyInjection/ServiceRouterLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Loader\DependencyInjection;
   13  
   14  use Psr\Container\ContainerInterface;
   15: use Symfony\Component\Routing\Loader\ObjectRouteLoader;
   16  
   17  /**
   18:  * A route loader that executes a service to load the routes.
   19   *
   20   * @author Ryan Weaver <ryan@knpuniversity.com>
   21   */
   22: class ServiceRouterLoader extends ObjectRouteLoader
   23  {
   24      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/RouteCollectionBuilderTest.php:
   15  use Symfony\Component\Config\FileLocator;
   16  use Symfony\Component\Config\Resource\FileResource;
   17: use Symfony\Component\Routing\Loader\YamlFileLoader;
   18  use Symfony\Component\Routing\Route;
   19  use Symfony\Component\Routing\RouteCollection;
   ..
   24      public function testImport()
   25      {
   26:         $resolvedLoader = $this->getMockBuilder('Symfony\Component\Config\Loader\LoaderInterface')->getMock();
   27:         $resolver = $this->getMockBuilder('Symfony\Component\Config\Loader\LoaderResolverInterface')->getMock();
   28          $resolver->expects($this->once())
   29              ->method('resolve')
   30              ->with('admin_routing.yml', 'yaml')
   31:             ->will($this->returnValue($resolvedLoader));
   32  
   33          $originalRoute = new Route('/foo/path');
   ..
   36          $expectedCollection->addResource(new FileResource(__DIR__.'/Fixtures/file_resource.yml'));
   37  
   38:         $resolvedLoader
   39              ->expects($this->once())
   40              ->method('load')
   ..
   42              ->will($this->returnValue($expectedCollection));
   43  
   44:         $loader = $this->getMockBuilder('Symfony\Component\Config\Loader\LoaderInterface')->getMock();
   45:         $loader->expects($this->any())
   46              ->method('getResolver')
   47              ->will($this->returnValue($resolver));
   48  
   49          // import the file!
   50:         $routes = new RouteCollectionBuilder($loader);
   51          $importedRoutes = $routes->import('admin_routing.yml', '/', 'yaml');
   52  
   ..
   69      public function testImportAddResources()
   70      {
   71:         $routeCollectionBuilder = new RouteCollectionBuilder(new YamlFileLoader(new FileLocator([__DIR__.'/Fixtures/'])));
   72          $routeCollectionBuilder->import('file_resource.yml');
   73          $routeCollection = $routeCollectionBuilder->build();
   ..
   79       * @expectedException \BadMethodCallException
   80       */
   81:     public function testImportWithoutLoaderThrowsException()
   82      {
   83          $collectionBuilder = new RouteCollectionBuilder();
   ..
  104          $importedCollection->add('imported_route2', new Route('/imported/foo2'));
  105  
  106:         $loader = $this->getMockBuilder('Symfony\Component\Config\Loader\LoaderInterface')->getMock();
  107:         // make this loader able to do the import - keeps mocking simple
  108:         $loader->expects($this->any())
  109              ->method('supports')
  110              ->will($this->returnValue(true));
  111:         $loader
  112              ->expects($this->once())
  113              ->method('load')
  114              ->will($this->returnValue($importedCollection));
  115  
  116:         $routes = new RouteCollectionBuilder($loader);
  117  
  118          // 1) Add a route
  ...
  267      public function testFlushSetsPrefixedWithMultipleLevels()
  268      {
  269:         $loader = $this->getMockBuilder('Symfony\Component\Config\Loader\LoaderInterface')->getMock();
  270:         $routes = new RouteCollectionBuilder($loader);
  271  
  272          $routes->add('homepage', 'MainController::homepageAction', 'homepage');
  ...
  294          $importedCollection = new RouteCollection();
  295          $importedCollection->add('imported_route', new Route('/foo'));
  296:         // make this loader able to do the import - keeps mocking simple
  297:         $loader->expects($this->any())
  298              ->method('supports')
  299              ->will($this->returnValue(true));
  300:         $loader
  301              ->expects($this->any())
  302              ->method('load')
  ...
  345          $secondCollection->add('b', new Route('/b'));
  346  
  347:         $loader = $this->getMockBuilder('Symfony\Component\Config\Loader\LoaderInterface')->getMock();
  348:         $loader->expects($this->any())
  349              ->method('supports')
  350              ->will($this->returnValue(true));
  351:         $loader
  352              ->expects($this->any())
  353              ->method('load')
  354              ->will($this->returnValue([$firstCollection, $secondCollection]));
  355  
  356:         $routeCollectionBuilder = new RouteCollectionBuilder($loader);
  357          $routeCollectionBuilder->import('/directory/recurse/*', '/other/', 'glob');
  358          $routes = $routeCollectionBuilder->build()->all();

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/RouterTest.php:
   21      private $router = null;
   22  
   23:     private $loader = null;
   24  
   25      protected function setUp()
   26      {
   27:         $this->loader = $this->getMockBuilder('Symfony\Component\Config\Loader\LoaderInterface')->getMock();
   28:         $this->router = new Router($this->loader, 'routing.yml');
   29      }
   30  
   ..
   87          $routeCollection = new RouteCollection();
   88  
   89:         $this->loader->expects($this->once())
   90              ->method('load')->with('routing.yml', 'ResourceType')
   91              ->will($this->returnValue($routeCollection));
   ..
  101          $this->router->setOption($option, null);
  102  
  103:         $this->loader->expects($this->once())
  104              ->method('load')->with('routing.yml', null)
  105              ->will($this->returnValue(new RouteCollection()));
  ...
  123          $this->router->setOption($option, null);
  124  
  125:         $this->loader->expects($this->once())
  126              ->method('load')->with('routing.yml', null)
  127              ->will($this->returnValue(new RouteCollection()));

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/DependencyInjection/RoutingResolverPassTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Config\Loader\LoaderResolver;
   16  use Symfony\Component\DependencyInjection\ContainerBuilder;
   17  use Symfony\Component\DependencyInjection\Reference;
   ..
   23      {
   24          $container = new ContainerBuilder();
   25:         $container->register('routing.resolver', LoaderResolver::class);
   26:         $container->register('loader1')->addTag('routing.loader');
   27:         $container->register('loader2')->addTag('routing.loader');
   28  
   29          (new RoutingResolverPass())->process($container);
   30  
   31          $this->assertEquals(
   32:             [['addLoader', [new Reference('loader1')]], ['addLoader', [new Reference('loader2')]]],
   33              $container->getDefinition('routing.resolver')->getMethodCalls()
   34          );

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/CustomXmlFileLoader.php:
   13  
   14  use Symfony\Component\Config\Util\XmlUtils;
   15: use Symfony\Component\Routing\Loader\XmlFileLoader;
   16  
   17  /**
   18:  * XmlFileLoader with schema validation turned off.
   19   */
   20: class CustomXmlFileLoader extends XmlFileLoader
   21  {
   22      protected function loadFile($file)

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/php_dsl.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/php_dsl_i18n.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/php_dsl_sub.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/php_dsl_sub_i18n.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/php_dsl_sub_root.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/php_object_dsl.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return new class() {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/validresource.php:
    1  <?php
    2  
    3: /** @var $loader \Symfony\Component\Routing\Loader\PhpFileLoader */
    4  /** @var \Symfony\Component\Routing\RouteCollection $collection */
    5: $collection = $loader->import('validpattern.php');
    6  $collection->addDefaults([
    7      'foo' => 123,

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/glob/php_dsl.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/glob/php_dsl_bar.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Fixtures/glob/php_dsl_baz.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Loader\Configurator;
    4  
    5  return function (RoutingConfigurator $routes) {

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/AbstractAnnotationLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  
   16: abstract class AbstractAnnotationLoaderTest extends TestCase
   17  {
   18      public function getReader()
   ..
   24      }
   25  
   26:     public function getClassLoader($reader)
   27      {
   28:         return $this->getMockBuilder('Symfony\Component\Routing\Loader\AnnotationClassLoader')
   29              ->setConstructorArgs([$reader])
   30              ->getMockForAbstractClass()

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/AnnotationClassLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use Doctrine\Common\Annotations\AnnotationReader;
   15  use Doctrine\Common\Annotations\AnnotationRegistry;
   16  use Symfony\Component\Routing\Annotation\Route as RouteAnnotation;
   17: use Symfony\Component\Routing\Loader\AnnotationClassLoader;
   18  use Symfony\Component\Routing\Route;
   19  use Symfony\Component\Routing\Tests\Fixtures\AnnotationFixtures\AbstractClassController;
   ..
   37  use Symfony\Component\Routing\Tests\Fixtures\AnnotationFixtures\RouteWithPrefixController;
   38  
   39: class AnnotationClassLoaderTest extends AbstractAnnotationLoaderTest
   40  {
   41      /**
   42:      * @var AnnotationClassLoader
   43       */
   44:     private $loader;
   45  
   46      protected function setUp()
   47      {
   48          $reader = new AnnotationReader();
   49:         $this->loader = new class($reader) extends AnnotationClassLoader {
   50              protected function configureRoute(Route $route, \ReflectionClass $class, \ReflectionMethod $method, $annot)
   51              {
   52              }
   53          };
   54:         AnnotationRegistry::registerLoader('class_exists');
   55      }
   56  
   ..
   60      public function testSupportsChecksResource($resource, $expectedSupports)
   61      {
   62:         $this->assertSame($expectedSupports, $this->loader->supports($resource), '->supports() returns true if the resource is loadable');
   63      }
   64  
   ..
   78      public function testSupportsChecksTypeIfSpecified()
   79      {
   80:         $this->assertTrue($this->loader->supports('class', 'annotation'), '->supports() checks the resource type if specified');
   81:         $this->assertFalse($this->loader->supports('class', 'foo'), '->supports() checks the resource type if specified');
   82      }
   83  
   84      public function testSimplePathRoute()
   85      {
   86:         $routes = $this->loader->load(ActionPathController::class);
   87          $this->assertCount(1, $routes);
   88          $this->assertEquals('/path', $routes->get('action')->getPath());
   ..
   98      public function testRequirementsWithoutPlaceholderName()
   99      {
  100:         $this->loader->load(RequirementsWithoutPlaceholderNameController::class);
  101      }
  102  
  103:     public function testInvokableControllerLoader()
  104      {
  105:         $routes = $this->loader->load(InvokableController::class);
  106          $this->assertCount(1, $routes);
  107          $this->assertEquals('/here', $routes->get('lol')->getPath());
  ...
  112      public function testInvokableLocalizedControllerLoading()
  113      {
  114:         $routes = $this->loader->load(InvokableLocalizedController::class);
  115          $this->assertCount(2, $routes);
  116          $this->assertEquals('/here', $routes->get('action.en')->getPath());
  ...
  120      public function testLocalizedPathRoutes()
  121      {
  122:         $routes = $this->loader->load(LocalizedActionPathController::class);
  123          $this->assertCount(2, $routes);
  124          $this->assertEquals('/path', $routes->get('action.en')->getPath());
  ...
  128      public function testLocalizedPathRoutesWithExplicitPathPropety()
  129      {
  130:         $routes = $this->loader->load(ExplicitLocalizedActionPathController::class);
  131          $this->assertCount(2, $routes);
  132          $this->assertEquals('/path', $routes->get('action.en')->getPath());
  ...
  136      public function testDefaultValuesForMethods()
  137      {
  138:         $routes = $this->loader->load(DefaultValueController::class);
  139          $this->assertCount(3, $routes);
  140          $this->assertEquals('/{default}/path', $routes->get('action')->getPath());
  ...
  146      public function testMethodActionControllers()
  147      {
  148:         $routes = $this->loader->load(MethodActionControllers::class);
  149          $this->assertCount(2, $routes);
  150          $this->assertEquals('/the/path', $routes->get('put')->getPath());
  ...
  154      public function testInvokableClassRouteLoadWithMethodAnnotation()
  155      {
  156:         $routes = $this->loader->load(LocalizedMethodActionControllers::class);
  157          $this->assertCount(4, $routes);
  158          $this->assertEquals('/the/path', $routes->get('put.en')->getPath());
  ...
  162      public function testRouteWithPathWithPrefix()
  163      {
  164:         $routes = $this->loader->load(PrefixedActionPathController::class);
  165          $this->assertCount(1, $routes);
  166          $route = $routes->get('action');
  ...
  172      public function testLocalizedRouteWithPathWithPrefix()
  173      {
  174:         $routes = $this->loader->load(PrefixedActionLocalizedRouteController::class);
  175          $this->assertCount(2, $routes);
  176          $this->assertEquals('/prefix/path', $routes->get('action.en')->getPath());
  ...
  180      public function testLocalizedPrefixLocalizedRoute()
  181      {
  182:         $routes = $this->loader->load(LocalizedPrefixLocalizedActionController::class);
  183          $this->assertCount(2, $routes);
  184          $this->assertEquals('/nl/actie', $routes->get('action.nl')->getPath());
  ...
  213              ->will($this->returnValue([]))
  214          ;
  215:         $loader = new class($reader) extends AnnotationClassLoader {
  216              protected function configureRoute(Route $route, \ReflectionClass $class, \ReflectionMethod $method, $annot)
  217              {
  ...
  219          };
  220  
  221:         $routeCollection = $loader->load('Symfony\Component\Routing\Tests\Fixtures\AnnotatedClasses\BazClass');
  222          $route = $routeCollection->get($classRouteData1['name']);
  223  
  ...
  236      {
  237          $this->expectException(\LogicException::class);
  238:         $this->loader->load(LocalizedPrefixMissingLocaleActionController::class);
  239      }
  240  
  ...
  242      {
  243          $this->expectException(\LogicException::class);
  244:         $this->loader->load(LocalizedPrefixMissingRouteLocaleActionController::class);
  245      }
  246  
  247      public function testRouteWithoutName()
  248      {
  249:         $routes = $this->loader->load(MissingRouteNameController::class)->all();
  250          $this->assertCount(1, $routes);
  251          $this->assertEquals('/path', reset($routes)->getPath());
  ...
  254      public function testNothingButName()
  255      {
  256:         $routes = $this->loader->load(NothingButNameController::class)->all();
  257          $this->assertCount(1, $routes);
  258          $this->assertEquals('/', reset($routes)->getPath());
  ...
  262      {
  263          $this->expectException(\LogicException::class);
  264:         $this->loader->load('ClassThatDoesNotExist');
  265      }
  266  
  ...
  268      {
  269          $this->expectException(\LogicException::class);
  270:         $this->loader->load(AbstractClassController::class);
  271      }
  272  
  273      public function testLocalizedPrefixWithoutRouteLocale()
  274      {
  275:         $routes = $this->loader->load(LocalizedPrefixWithRouteWithoutLocale::class);
  276          $this->assertCount(2, $routes);
  277          $this->assertEquals('/en/suffix', $routes->get('action.en')->getPath());
  ...
  281      public function testLoadingRouteWithPrefix()
  282      {
  283:         $routes = $this->loader->load(RouteWithPrefixController::class);
  284          $this->assertCount(1, $routes);
  285          $this->assertEquals('/prefix/path', $routes->get('action')->getPath());

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/AnnotationDirectoryLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use Symfony\Component\Config\FileLocator;
   15: use Symfony\Component\Routing\Loader\AnnotationDirectoryLoader;
   16  
   17: class AnnotationDirectoryLoaderTest extends AbstractAnnotationLoaderTest
   18  {
   19:     protected $loader;
   20      protected $reader;
   21  
   ..
   25  
   26          $this->reader = $this->getReader();
   27:         $this->loader = new AnnotationDirectoryLoader(new FileLocator(), $this->getClassLoader($this->reader));
   28      }
   29  
   ..
   44          ;
   45  
   46:         $this->loader->load(__DIR__.'/../Fixtures/AnnotatedClasses');
   47      }
   48  
   ..
   67          ;
   68  
   69:         $this->loader->load(__DIR__.'/../Fixtures/AnnotatedClasses');
   70      }
   71  
   ..
   74          $fixturesDir = __DIR__.'/../Fixtures';
   75  
   76:         $this->assertTrue($this->loader->supports($fixturesDir), '->supports() returns true if the resource is loadable');
   77:         $this->assertFalse($this->loader->supports('foo.foo'), '->supports() returns true if the resource is loadable');
   78  
   79:         $this->assertTrue($this->loader->supports($fixturesDir, 'annotation'), '->supports() checks the resource type if specified');
   80:         $this->assertFalse($this->loader->supports($fixturesDir, 'foo'), '->supports() checks the resource type if specified');
   81      }
   82  
   83      public function testItSupportsAnyAnnotation()
   84      {
   85:         $this->assertTrue($this->loader->supports(__DIR__.'/../Fixtures/even-with-not-existing-folder', 'annotation'));
   86      }
   87  
   ..
   96          ;
   97  
   98:         $this->loader->load(__DIR__.'/../Fixtures/AnnotatedClasses/FooClass.php');
   99      }
  100  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/AnnotationFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use Symfony\Component\Config\FileLocator;
   15  use Symfony\Component\Routing\Annotation\Route;
   16: use Symfony\Component\Routing\Loader\AnnotationFileLoader;
   17  
   18: class AnnotationFileLoaderTest extends AbstractAnnotationLoaderTest
   19  {
   20:     protected $loader;
   21      protected $reader;
   22  
   ..
   26  
   27          $this->reader = $this->getReader();
   28:         $this->loader = new AnnotationFileLoader(new FileLocator(), $this->getClassLoader($this->reader));
   29      }
   30  
   ..
   33          $this->reader->expects($this->once())->method('getClassAnnotation');
   34  
   35:         $this->loader->load(__DIR__.'/../Fixtures/AnnotatedClasses/FooClass.php');
   36      }
   37  
   ..
   40          $this->reader->expects($this->never())->method('getClassAnnotation');
   41  
   42:         $this->loader->load(__DIR__.'/../Fixtures/AnnotatedClasses/FooTrait.php');
   43      }
   44  
   ..
   49      public function testLoadFileWithoutStartTag()
   50      {
   51:         $this->loader->load(__DIR__.'/../Fixtures/OtherAnnotatedClasses/NoStartTagClass.php');
   52      }
   53  
   ..
   59              ->will($this->returnValue([$route]));
   60  
   61:         $this->loader->load(__DIR__.'/../Fixtures/OtherAnnotatedClasses/VariadicClass.php');
   62      }
   63  
   ..
   70          $this->reader->expects($this->never())->method('getMethodAnnotations');
   71  
   72:         $this->loader->load(__DIR__.'/../Fixtures/OtherAnnotatedClasses/AnonymousClassInTrait.php');
   73      }
   74  
   ..
   78          $this->reader->expects($this->never())->method('getMethodAnnotations');
   79  
   80:         $this->loader->load(__DIR__.'/../Fixtures/AnnotatedClasses/AbstractClass.php');
   81      }
   82  
   ..
   85          $fixture = __DIR__.'/../Fixtures/annotated.php';
   86  
   87:         $this->assertTrue($this->loader->supports($fixture), '->supports() returns true if the resource is loadable');
   88:         $this->assertFalse($this->loader->supports('foo.foo'), '->supports() returns true if the resource is loadable');
   89  
   90:         $this->assertTrue($this->loader->supports($fixture, 'annotation'), '->supports() checks the resource type if specified');
   91:         $this->assertFalse($this->loader->supports($fixture, 'foo'), '->supports() checks the resource type if specified');
   92      }
   93  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/ClosureLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Routing\Loader\ClosureLoader;
   16  use Symfony\Component\Routing\Route;
   17  use Symfony\Component\Routing\RouteCollection;
   18  
   19: class ClosureLoaderTest extends TestCase
   20  {
   21      public function testSupports()
   22      {
   23:         $loader = new ClosureLoader();
   24  
   25          $closure = function () {};
   26  
   27:         $this->assertTrue($loader->supports($closure), '->supports() returns true if the resource is loadable');
   28:         $this->assertFalse($loader->supports('foo.foo'), '->supports() returns true if the resource is loadable');
   29  
   30:         $this->assertTrue($loader->supports($closure, 'closure'), '->supports() checks the resource type if specified');
   31:         $this->assertFalse($loader->supports($closure, 'foo'), '->supports() checks the resource type if specified');
   32      }
   33  
   34      public function testLoad()
   35      {
   36:         $loader = new ClosureLoader();
   37  
   38          $route = new Route('/');
   39:         $routes = $loader->load(function () use ($route) {
   40              $routes = new RouteCollection();
   41  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/DirectoryLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use Symfony\Component\Config\FileLocator;
   15: use Symfony\Component\Config\Loader\LoaderResolver;
   16: use Symfony\Component\Routing\Loader\AnnotationFileLoader;
   17: use Symfony\Component\Routing\Loader\DirectoryLoader;
   18: use Symfony\Component\Routing\Loader\YamlFileLoader;
   19  use Symfony\Component\Routing\RouteCollection;
   20  
   21: class DirectoryLoaderTest extends AbstractAnnotationLoaderTest
   22  {
   23:     private $loader;
   24      private $reader;
   25  
   ..
   30          $locator = new FileLocator();
   31          $this->reader = $this->getReader();
   32:         $this->loader = new DirectoryLoader($locator);
   33:         $resolver = new LoaderResolver([
   34:             new YamlFileLoader($locator),
   35:             new AnnotationFileLoader($locator, $this->getClassLoader($this->reader)),
   36:             $this->loader,
   37          ]);
   38:         $this->loader->setResolver($resolver);
   39      }
   40  
   41      public function testLoadDirectory()
   42      {
   43:         $collection = $this->loader->load(__DIR__.'/../Fixtures/directory', 'directory');
   44          $this->verifyCollection($collection);
   45      }
   ..
   47      public function testImportDirectory()
   48      {
   49:         $collection = $this->loader->load(__DIR__.'/../Fixtures/directory_import', 'directory');
   50          $this->verifyCollection($collection);
   51      }
   ..
   67          $fixturesDir = __DIR__.'/../Fixtures';
   68  
   69:         $this->assertFalse($this->loader->supports($fixturesDir), '->supports(*) returns false');
   70  
   71:         $this->assertTrue($this->loader->supports($fixturesDir, 'directory'), '->supports(*, "directory") returns true');
   72:         $this->assertFalse($this->loader->supports($fixturesDir, 'foo'), '->supports(*, "foo") returns false');
   73      }
   74  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/FileLocatorStub.php:
    1  <?php
    2  
    3: namespace Symfony\Component\Routing\Tests\Loader;
    4  
    5  use Symfony\Component\Config\FileLocatorInterface;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/GlobFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\FileLocator;
   16  use Symfony\Component\Config\Resource\GlobResource;
   17: use Symfony\Component\Routing\Loader\GlobFileLoader;
   18  use Symfony\Component\Routing\RouteCollection;
   19  
   20: class GlobFileLoaderTest extends TestCase
   21  {
   22      public function testSupports()
   23      {
   24:         $loader = new GlobFileLoader(new FileLocator());
   25  
   26:         $this->assertTrue($loader->supports('any-path', 'glob'), '->supports() returns true if the resource has the glob type');
   27:         $this->assertFalse($loader->supports('any-path'), '->supports() returns false if the resource is not of glob type');
   28      }
   29  
   30      public function testLoadAddsTheGlobResourceToTheContainer()
   31      {
   32:         $loader = new GlobFileLoaderWithoutImport(new FileLocator());
   33:         $collection = $loader->load(__DIR__.'/../Fixtures/directory/*.yml');
   34  
   35          $this->assertEquals(new GlobResource(__DIR__.'/../Fixtures/directory', '/*.yml', false), $collection->getResources()[0]);
   ..
   37  }
   38  
   39: class GlobFileLoaderWithoutImport extends GlobFileLoader
   40  {
   41      public function import($resource, $type = null, $ignoreErrors = false, $sourceResource = null)

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/ObjectRouteLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Routing\Loader\ObjectRouteLoader;
   16  use Symfony\Component\Routing\Route;
   17  use Symfony\Component\Routing\RouteCollection;
   18  
   19: class ObjectRouteLoaderTest extends TestCase
   20  {
   21      /**
   22       * @group legacy
   23:      * @expectedDeprecation Referencing service route loaders with a single colon is deprecated since Symfony 4.1. Use my_route_provider_service::loadRoutes instead.
   24       */
   25      public function testLoadCallsServiceAndReturnsCollectionWithLegacyNotation()
   26      {
   27:         $loader = new ObjectRouteLoaderForTest();
   28  
   29          // create a basic collection that will be returned
   ..
   31          $collection->add('foo', new Route('/foo'));
   32  
   33:         $loader->loaderMap = [
   34              'my_route_provider_service' => new RouteService($collection),
   35          ];
   36  
   37:         $actualRoutes = $loader->load(
   38              'my_route_provider_service:loadRoutes',
   39              'service'
   ..
   47      public function testLoadCallsServiceAndReturnsCollection()
   48      {
   49:         $loader = new ObjectRouteLoaderForTest();
   50  
   51          // create a basic collection that will be returned
   ..
   53          $collection->add('foo', new Route('/foo'));
   54  
   55:         $loader->loaderMap = [
   56              'my_route_provider_service' => new RouteService($collection),
   57          ];
   58  
   59:         $actualRoutes = $loader->load(
   60              'my_route_provider_service::loadRoutes',
   61              'service'
   ..
   73      public function testExceptionWithoutSyntax($resourceString)
   74      {
   75:         $loader = new ObjectRouteLoaderForTest();
   76:         $loader->load($resourceString);
   77      }
   78  
   ..
   90      public function testExceptionOnNoObjectReturned()
   91      {
   92:         $loader = new ObjectRouteLoaderForTest();
   93:         $loader->loaderMap = ['my_service' => 'NOT_AN_OBJECT'];
   94:         $loader->load('my_service::method');
   95      }
   96  
   ..
  100      public function testExceptionOnBadMethod()
  101      {
  102:         $loader = new ObjectRouteLoaderForTest();
  103:         $loader->loaderMap = ['my_service' => new \stdClass()];
  104:         $loader->load('my_service::method');
  105      }
  106  
  ...
  117              ->will($this->returnValue('NOT_A_COLLECTION'));
  118  
  119:         $loader = new ObjectRouteLoaderForTest();
  120:         $loader->loaderMap = ['my_service' => $service];
  121:         $loader->load('my_service::loadRoutes');
  122      }
  123  }
  124  
  125: class ObjectRouteLoaderForTest extends ObjectRouteLoader
  126  {
  127:     public $loaderMap = [];
  128  
  129      protected function getServiceObject($id)
  130      {
  131:         return isset($this->loaderMap[$id]) ? $this->loaderMap[$id] : null;
  132      }
  133  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/PhpFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\FileLocator;
   16  use Symfony\Component\Config\Resource\FileResource;
   17: use Symfony\Component\Routing\Loader\PhpFileLoader;
   18  use Symfony\Component\Routing\Route;
   19  use Symfony\Component\Routing\RouteCollection;
   20  
   21: class PhpFileLoaderTest extends TestCase
   22  {
   23      public function testSupports()
   24      {
   25:         $loader = new PhpFileLoader($this->getMockBuilder('Symfony\Component\Config\FileLocator')->getMock());
   26  
   27:         $this->assertTrue($loader->supports('foo.php'), '->supports() returns true if the resource is loadable');
   28:         $this->assertFalse($loader->supports('foo.foo'), '->supports() returns true if the resource is loadable');
   29  
   30:         $this->assertTrue($loader->supports('foo.php', 'php'), '->supports() checks the resource type if specified');
   31:         $this->assertFalse($loader->supports('foo.php', 'foo'), '->supports() checks the resource type if specified');
   32      }
   33  
   34      public function testLoadWithRoute()
   35      {
   36:         $loader = new PhpFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   37:         $routeCollection = $loader->load('validpattern.php');
   38          $routes = $routeCollection->all();
   39  
   ..
   53      public function testLoadWithImport()
   54      {
   55:         $loader = new PhpFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   56:         $routeCollection = $loader->load('validresource.php');
   57          $routes = $routeCollection->all();
   58  
   ..
   73      {
   74          $locator = new FileLocator([__DIR__.'/../Fixtures']);
   75:         $loader = new PhpFileLoader($locator);
   76:         $routeCollection = $loader->load('with_define_path_variable.php');
   77          $resources = $routeCollection->getResources();
   78          $this->assertCount(1, $resources);
   ..
   88      {
   89          $locator = new FileLocator([__DIR__.'/../Fixtures']);
   90:         $loader = new PhpFileLoader($locator);
   91:         $routeCollectionClosure = $loader->load('php_dsl.php');
   92:         $routeCollectionObject = $loader->load('php_object_dsl.php');
   93  
   94          $expectedCollection = new RouteCollection();
   ..
  138      {
  139          $locator = new FileLocator([__DIR__.'/../Fixtures/glob']);
  140:         $loader = new PhpFileLoader($locator);
  141:         $routeCollection = $loader->load('php_dsl.php');
  142  
  143          $route = $routeCollection->get('bar_route');
  ...
  151      {
  152          $locator = new FileLocator([__DIR__.'/../Fixtures']);
  153:         $loader = new PhpFileLoader($locator);
  154:         $routeCollection = $loader->load('php_dsl_i18n.php');
  155  
  156          $expectedCollection = new RouteCollection();

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/XmlFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\FileLocator;
   16: use Symfony\Component\Routing\Loader\XmlFileLoader;
   17: use Symfony\Component\Routing\Tests\Fixtures\CustomXmlFileLoader;
   18  
   19: class XmlFileLoaderTest extends TestCase
   20  {
   21      public function testSupports()
   22      {
   23:         $loader = new XmlFileLoader($this->getMockBuilder('Symfony\Component\Config\FileLocator')->getMock());
   24  
   25:         $this->assertTrue($loader->supports('foo.xml'), '->supports() returns true if the resource is loadable');
   26:         $this->assertFalse($loader->supports('foo.foo'), '->supports() returns true if the resource is loadable');
   27  
   28:         $this->assertTrue($loader->supports('foo.xml', 'xml'), '->supports() checks the resource type if specified');
   29:         $this->assertFalse($loader->supports('foo.xml', 'foo'), '->supports() checks the resource type if specified');
   30      }
   31  
   32      public function testLoadWithRoute()
   33      {
   34:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   35:         $routeCollection = $loader->load('validpattern.xml');
   36          $route = $routeCollection->get('blog_show');
   37  
   ..
   49      public function testLoadWithNamespacePrefix()
   50      {
   51:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   52:         $routeCollection = $loader->load('namespaceprefix.xml');
   53  
   54          $this->assertCount(1, $routeCollection->all(), 'One route is loaded');
   ..
   67      public function testLoadWithImport()
   68      {
   69:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   70:         $routeCollection = $loader->load('validresource.xml');
   71          $routes = $routeCollection->all();
   72  
   ..
   86      public function testUtf8Route()
   87      {
   88:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
   89:         $routeCollection = $loader->load('utf8.xml');
   90          $routes = $routeCollection->all();
   91  
   ..
  106      public function testLoadLocalized()
  107      {
  108:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  109:         $routeCollection = $loader->load('localized.xml');
  110          $routes = $routeCollection->all();
  111  
  ...
  119      public function testLocalizedImports()
  120      {
  121:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  122:         $routeCollection = $loader->load('importer-with-locale.xml');
  123          $routes = $routeCollection->all();
  124  
  ...
  132      public function testLocalizedImportsOfNotLocalizedRoutes()
  133      {
  134:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  135:         $routeCollection = $loader->load('importer-with-locale-imports-non-localized-route.xml');
  136          $routes = $routeCollection->all();
  137  
  ...
  149      public function testLoadThrowsExceptionWithInvalidFile($filePath)
  150      {
  151:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  152:         $loader->load($filePath);
  153      }
  154  
  ...
  159      public function testLoadThrowsExceptionWithInvalidFileEvenWithoutSchemaValidation($filePath)
  160      {
  161:         $loader = new CustomXmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  162:         $loader->load($filePath);
  163      }
  164  
  ...
  174      public function testDocTypeIsNotAllowed()
  175      {
  176:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  177:         $loader->load('withdoctype.xml');
  178      }
  179  
  180      public function testNullValues()
  181      {
  182:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  183:         $routeCollection = $loader->load('null_values.xml');
  184          $route = $routeCollection->get('blog_show');
  185  
  ...
  194      public function testScalarDataTypeDefaults()
  195      {
  196:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  197:         $routeCollection = $loader->load('scalar_defaults.xml');
  198          $route = $routeCollection->get('blog');
  199  
  ...
  217      public function testListDefaults()
  218      {
  219:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  220:         $routeCollection = $loader->load('list_defaults.xml');
  221          $route = $routeCollection->get('blog');
  222  
  ...
  232      public function testListInListDefaults()
  233      {
  234:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  235:         $routeCollection = $loader->load('list_in_list_defaults.xml');
  236          $route = $routeCollection->get('blog');
  237  
  ...
  247      public function testListInMapDefaults()
  248      {
  249:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  250:         $routeCollection = $loader->load('list_in_map_defaults.xml');
  251          $route = $routeCollection->get('blog');
  252  
  ...
  262      public function testMapDefaults()
  263      {
  264:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  265:         $routeCollection = $loader->load('map_defaults.xml');
  266          $route = $routeCollection->get('blog');
  267  
  ...
  282      public function testMapInListDefaults()
  283      {
  284:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  285:         $routeCollection = $loader->load('map_in_list_defaults.xml');
  286          $route = $routeCollection->get('blog');
  287  
  ...
  302      public function testMapInMapDefaults()
  303      {
  304:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  305:         $routeCollection = $loader->load('map_in_map_defaults.xml');
  306          $route = $routeCollection->get('blog');
  307  
  ...
  322      public function testNullValuesInList()
  323      {
  324:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  325:         $routeCollection = $loader->load('list_null_values.xml');
  326          $route = $routeCollection->get('blog');
  327  
  ...
  331      public function testNullValuesInMap()
  332      {
  333:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  334:         $routeCollection = $loader->load('map_null_values.xml');
  335          $route = $routeCollection->get('blog');
  336  
  ...
  350      public function testLoadRouteWithControllerAttribute()
  351      {
  352:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  353:         $routeCollection = $loader->load('routing.xml');
  354  
  355          $route = $routeCollection->get('app_homepage');
  ...
  360      public function testLoadRouteWithoutControllerAttribute()
  361      {
  362:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  363:         $routeCollection = $loader->load('routing.xml');
  364  
  365          $route = $routeCollection->get('app_logout');
  ...
  370      public function testLoadRouteWithControllerSetInDefaults()
  371      {
  372:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  373:         $routeCollection = $loader->load('routing.xml');
  374  
  375          $route = $routeCollection->get('app_blog');
  ...
  384      public function testOverrideControllerInDefaults()
  385      {
  386:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  387:         $loader->load('override_defaults.xml');
  388      }
  389  
  ...
  393      public function testImportRouteWithController($file)
  394      {
  395:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  396:         $routeCollection = $loader->load($file);
  397  
  398          $route = $routeCollection->get('app_homepage');
  ...
  418      public function testImportWithOverriddenController()
  419      {
  420:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  421:         $loader->load('import_override_defaults.xml');
  422      }
  423  
  424      public function testImportRouteWithGlobMatchingSingleFile()
  425      {
  426:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/glob']));
  427:         $routeCollection = $loader->load('import_single.xml');
  428  
  429          $route = $routeCollection->get('bar_route');
  ...
  433      public function testImportRouteWithGlobMatchingMultipleFiles()
  434      {
  435:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/glob']));
  436:         $routeCollection = $loader->load('import_multiple.xml');
  437  
  438          $route = $routeCollection->get('bar_route');
  ...
  445      public function testImportRouteWithNamePrefix()
  446      {
  447:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/import_with_name_prefix']));
  448:         $routeCollection = $loader->load('routing.xml');
  449  
  450          $this->assertNotNull($routeCollection->get('app_blog'));
  ...
  456      public function testImportRouteWithNoTrailingSlash()
  457      {
  458:         $loader = new XmlFileLoader(new FileLocator([__DIR__.'/../Fixtures/import_with_no_trailing_slash']));
  459:         $routeCollection = $loader->load('routing.xml');
  460  
  461          $this->assertEquals('/slash/', $routeCollection->get('a_app_homepage')->getPath());

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/routing/Tests/Loader/YamlFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Routing\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\FileLocator;
   16  use Symfony\Component\Config\Resource\FileResource;
   17: use Symfony\Component\Routing\Loader\YamlFileLoader;
   18  
   19: class YamlFileLoaderTest extends TestCase
   20  {
   21      public function testSupports()
   22      {
   23:         $loader = new YamlFileLoader($this->getMockBuilder('Symfony\Component\Config\FileLocator')->getMock());
   24  
   25:         $this->assertTrue($loader->supports('foo.yml'), '->supports() returns true if the resource is loadable');
   26:         $this->assertTrue($loader->supports('foo.yaml'), '->supports() returns true if the resource is loadable');
   27:         $this->assertFalse($loader->supports('foo.foo'), '->supports() returns true if the resource is loadable');
   28  
   29:         $this->assertTrue($loader->supports('foo.yml', 'yaml'), '->supports() checks the resource type if specified');
   30:         $this->assertTrue($loader->supports('foo.yaml', 'yaml'), '->supports() checks the resource type if specified');
   31:         $this->assertFalse($loader->supports('foo.yml', 'foo'), '->supports() checks the resource type if specified');
   32      }
   33  
   34      public function testLoadDoesNothingIfEmpty()
   35      {
   36:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   37:         $collection = $loader->load('empty.yml');
   38  
   39          $this->assertEquals([], $collection->all());
   ..
   47      public function testLoadThrowsExceptionWithInvalidFile($filePath)
   48      {
   49:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   50:         $loader->load($filePath);
   51      }
   52  
   ..
   66      public function testLoadSpecialRouteName()
   67      {
   68:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   69:         $routeCollection = $loader->load('special_route_name.yml');
   70          $route = $routeCollection->get('#$péß^a|');
   71  
   ..
   76      public function testLoadWithRoute()
   77      {
   78:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   79:         $routeCollection = $loader->load('validpattern.yml');
   80          $route = $routeCollection->get('blog_show');
   81  
   ..
   93      public function testLoadWithResource()
   94      {
   95:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
   96:         $routeCollection = $loader->load('validresource.yml');
   97          $routes = $routeCollection->all();
   98  
   ..
  112      public function testLoadRouteWithControllerAttribute()
  113      {
  114:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  115:         $routeCollection = $loader->load('routing.yml');
  116  
  117          $route = $routeCollection->get('app_homepage');
  ...
  122      public function testLoadRouteWithoutControllerAttribute()
  123      {
  124:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  125:         $routeCollection = $loader->load('routing.yml');
  126  
  127          $route = $routeCollection->get('app_logout');
  ...
  132      public function testLoadRouteWithControllerSetInDefaults()
  133      {
  134:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  135:         $routeCollection = $loader->load('routing.yml');
  136  
  137          $route = $routeCollection->get('app_blog');
  ...
  146      public function testOverrideControllerInDefaults()
  147      {
  148:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  149:         $loader->load('override_defaults.yml');
  150      }
  151  
  ...
  155      public function testImportRouteWithController($file)
  156      {
  157:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  158:         $routeCollection = $loader->load($file);
  159  
  160          $route = $routeCollection->get('app_homepage');
  ...
  180      public function testImportWithOverriddenController()
  181      {
  182:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/controller']));
  183:         $loader->load('import_override_defaults.yml');
  184      }
  185  
  186      public function testImportRouteWithGlobMatchingSingleFile()
  187      {
  188:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/glob']));
  189:         $routeCollection = $loader->load('import_single.yml');
  190  
  191          $route = $routeCollection->get('bar_route');
  ...
  195      public function testImportRouteWithGlobMatchingMultipleFiles()
  196      {
  197:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/glob']));
  198:         $routeCollection = $loader->load('import_multiple.yml');
  199  
  200          $route = $routeCollection->get('bar_route');
  ...
  207      public function testImportRouteWithNamePrefix()
  208      {
  209:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/import_with_name_prefix']));
  210:         $routeCollection = $loader->load('routing.yml');
  211  
  212          $this->assertNotNull($routeCollection->get('app_blog'));
  ...
  218      public function testRemoteSourcesAreNotAccepted()
  219      {
  220:         $loader = new YamlFileLoader(new FileLocatorStub());
  221          $this->expectException(\InvalidArgumentException::class);
  222:         $loader->load('http://remote.com/here.yml');
  223      }
  224  
  225      public function testLoadingLocalizedRoute()
  226      {
  227:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  228:         $routes = $loader->load('localized-route.yml');
  229  
  230          $this->assertCount(3, $routes);
  ...
  233      public function testImportingRoutesFromDefinition()
  234      {
  235:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  236:         $routes = $loader->load('importing-localized-route.yml');
  237  
  238          $this->assertCount(3, $routes);
  ...
  244      public function testImportingRoutesWithLocales()
  245      {
  246:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  247:         $routes = $loader->load('importer-with-locale.yml');
  248  
  249          $this->assertCount(2, $routes);
  ...
  254      public function testImportingNonLocalizedRoutesWithLocales()
  255      {
  256:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  257:         $routes = $loader->load('importer-with-locale-imports-non-localized-route.yml');
  258  
  259          $this->assertCount(2, $routes);
  ...
  264      public function testImportingRoutesWithOfficialLocales()
  265      {
  266:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  267:         $routes = $loader->load('officially_formatted_locales.yml');
  268  
  269          $this->assertCount(3, $routes);
  ...
  275      public function testImportingRoutesFromDefinitionMissingLocalePrefix()
  276      {
  277:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  278          $this->expectException(\InvalidArgumentException::class);
  279:         $loader->load('missing-locale-in-importer.yml');
  280      }
  281  
  282      public function testImportingRouteWithoutPathOrLocales()
  283      {
  284:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  285          $this->expectException(\InvalidArgumentException::class);
  286:         $loader->load('route-without-path-or-locales.yml');
  287      }
  288  
  289      public function testImportingWithControllerDefault()
  290      {
  291:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/localized']));
  292:         $routes = $loader->load('importer-with-controller-default.yml');
  293          $this->assertCount(3, $routes);
  294          $this->assertEquals('DefaultController::defaultAction', $routes->get('home.en')->getDefault('_controller'));
  ...
  299      public function testImportRouteWithNoTrailingSlash()
  300      {
  301:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures/import_with_no_trailing_slash']));
  302:         $routeCollection = $loader->load('routing.yml');
  303  
  304          $this->assertEquals('/slash/', $routeCollection->get('a_app_homepage')->getPath());
  ...
  312      public function testRequirementsWithoutPlaceholderName()
  313      {
  314:         $loader = new YamlFileLoader(new FileLocator([__DIR__.'/../Fixtures']));
  315:         $loader->load('requirements_without_placeholder_name.yml');
  316      }
  317  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/CHANGELOG.md:
   36   * Added `TranslationReader` and `TranslationReaderInterface`
   37   * Added `<notes>` section to the Xliff 2.0 dumper.
   38:  * Improved Xliff 2.0 loader to load `<notes>` section.
   39   * Added `TranslationWriterInterface`
   40   * Deprecated `TranslationWriter::writeTranslations` in favor of `TranslationWriter::write`
   ..
  105  -----
  106  
  107:  * QtTranslationsLoader class renamed to QtFileLoader. QtTranslationsLoader is deprecated and will be removed in 2.3.
  108   * [BC BREAK] uniformized the exception thrown by the load() method when an error occurs. The load() method now
  109     throws Symfony\Component\Translation\Exception\NotFoundResourceException when a resource cannot be found
  110     and Symfony\Component\Translation\Exception\InvalidResourceException when a resource is invalid.
  111   * changed the exception class thrown by some load() methods from \RuntimeException to \InvalidArgumentException
  112:    (IcuDatFileLoader, IcuResFileLoader and QtFileLoader)
  113  
  114  2.1.0

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Translator.php:
   23  use Symfony\Component\Translation\Formatter\MessageFormatter;
   24  use Symfony\Component\Translation\Formatter\MessageFormatterInterface;
   25: use Symfony\Component\Translation\Loader\LoaderInterface;
   26  use Symfony\Component\Translation\TranslatorInterface as LegacyTranslatorInterface;
   27  use Symfony\Contracts\Translation\TranslatorInterface;
   ..
   48  
   49      /**
   50:      * @var LoaderInterface[]
   51       */
   52:     private $loaders = [];
   53  
   54      /**
   ..
  107  
  108      /**
  109:      * Adds a Loader.
  110       *
  111:      * @param string          $format The name of the loader (@see addResource())
  112:      * @param LoaderInterface $loader A LoaderInterface instance
  113       */
  114:     public function addLoader($format, LoaderInterface $loader)
  115      {
  116:         $this->loaders[$format] = $loader;
  117      }
  118  
  ...
  120       * Adds a Resource.
  121       *
  122:      * @param string $format   The name of the loader (@see addLoader())
  123       * @param mixed  $resource The resource name
  124       * @param string $locale   The locale
  ...
  275  
  276      /**
  277:      * Gets the loaders.
  278       *
  279:      * @return array LoaderInterface[]
  280       */
  281:     protected function getLoaders()
  282      {
  283:         return $this->loaders;
  284      }
  285  
  ...
  402          if (isset($this->resources[$locale])) {
  403              foreach ($this->resources[$locale] as $resource) {
  404:                 if (!isset($this->loaders[$resource[0]])) {
  405:                     throw new RuntimeException(sprintf('The "%s" translation loader is not registered.', $resource[0]));
  406                  }
  407:                 $this->catalogues[$locale]->addCatalogue($this->loaders[$resource[0]]->load($resource[1], $locale, $resource[2]));
  408              }
  409          }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/DependencyInjection/TranslatorPass.php:
   21      private $translatorServiceId;
   22      private $readerServiceId;
   23:     private $loaderTag;
   24      private $debugCommandServiceId;
   25      private $updateCommandServiceId;
   26  
   27:     public function __construct(string $translatorServiceId = 'translator.default', string $readerServiceId = 'translation.reader', string $loaderTag = 'translation.loader', string $debugCommandServiceId = 'console.command.translation_debug', string $updateCommandServiceId = 'console.command.translation_update')
   28      {
   29          $this->translatorServiceId = $translatorServiceId;
   30          $this->readerServiceId = $readerServiceId;
   31:         $this->loaderTag = $loaderTag;
   32          $this->debugCommandServiceId = $debugCommandServiceId;
   33          $this->updateCommandServiceId = $updateCommandServiceId;
   ..
   40          }
   41  
   42:         $loaders = [];
   43:         $loaderRefs = [];
   44:         foreach ($container->findTaggedServiceIds($this->loaderTag, true) as $id => $attributes) {
   45:             $loaderRefs[$id] = new Reference($id);
   46:             $loaders[$id][] = $attributes[0]['alias'];
   47              if (isset($attributes[0]['legacy-alias'])) {
   48:                 $loaders[$id][] = $attributes[0]['legacy-alias'];
   49              }
   50          }
   ..
   52          if ($container->hasDefinition($this->readerServiceId)) {
   53              $definition = $container->getDefinition($this->readerServiceId);
   54:             foreach ($loaders as $id => $formats) {
   55                  foreach ($formats as $format) {
   56:                     $definition->addMethodCall('addLoader', [$format, $loaderRefs[$id]]);
   57                  }
   58              }
   ..
   61          $container
   62              ->findDefinition($this->translatorServiceId)
   63:             ->replaceArgument(0, ServiceLocatorTagPass::register($container, $loaderRefs))
   64:             ->replaceArgument(3, $loaders)
   65          ;
   66  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Dumper/MoFileDumper.php:
   12  namespace Symfony\Component\Translation\Dumper;
   13  
   14: use Symfony\Component\Translation\Loader\MoFileLoader;
   15  use Symfony\Component\Translation\MessageCatalogue;
   16  
   ..
   39  
   40          $header = [
   41:             'magicNumber' => MoFileLoader::MO_LITTLE_ENDIAN_MAGIC,
   42              'formatRevision' => 0,
   43              'count' => $size,
   44:             'offsetId' => MoFileLoader::MO_HEADER_SIZE,
   45:             'offsetTranslated' => MoFileLoader::MO_HEADER_SIZE + (8 * $size),
   46              'sizeHashes' => 0,
   47:             'offsetHashes' => MoFileLoader::MO_HEADER_SIZE + (16 * $size),
   48          ];
   49  

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Extractor/ChainExtractor.php:
   29  
   30      /**
   31:      * Adds a loader to the translation extractor.
   32       *
   33:      * @param string             $format    The format of the loader
   34:      * @param ExtractorInterface $extractor The loader
   35       */
   36      public function addExtractor($format, ExtractorInterface $extractor)

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/ArrayLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Translation\MessageCatalogue;
   15  
   16  /**
   17:  * ArrayLoader loads translations from a PHP array.
   18   *
   19   * @author Fabien Potencier <fabien@symfony.com>
   20   */
   21: class ArrayLoader implements LoaderInterface
   22  {
   23      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/CsvFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Translation\Exception\NotFoundResourceException;
   15  
   16  /**
   17:  * CsvFileLoader loads translations from CSV files.
   18   *
   19   * @author Saša Stamenković <umpirsky@gmail.com>
   20   */
   21: class CsvFileLoader extends FileLoader
   22  {
   23      private $delimiter = ';';

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/FileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Config\Resource\FileResource;
   ..
   19   * @author Abdellatif Ait boudad <a.aitboudad@gmail.com>
   20   */
   21: abstract class FileLoader extends ArrayLoader
   22  {
   23      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/IcuDatFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Config\Resource\FileResource;
   ..
   18  
   19  /**
   20:  * IcuResFileLoader loads translations from a resource bundle.
   21   *
   22   * @author stealth35
   23   */
   24: class IcuDatFileLoader extends IcuResFileLoader
   25  {
   26      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/IcuResFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Config\Resource\DirectoryResource;
   ..
   18  
   19  /**
   20:  * IcuResFileLoader loads translations from a resource bundle.
   21   *
   22   * @author stealth35
   23   */
   24: class IcuResFileLoader implements LoaderInterface
   25  {
   26      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/IniFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  /**
   15:  * IniFileLoader loads translations from an ini file.
   16   *
   17   * @author stealth35
   18   */
   19: class IniFileLoader extends FileLoader
   20  {
   21      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/JsonFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Translation\Exception\InvalidResourceException;
   15  
   16  /**
   17:  * JsonFileLoader loads translations from an json file.
   18   *
   19   * @author singles
   20   */
   21: class JsonFileLoader extends FileLoader
   22  {
   23      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/LoaderInterface.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Translation\Exception\InvalidResourceException;
   ..
   17  
   18  /**
   19:  * LoaderInterface is the interface implemented by all translation loaders.
   20   *
   21   * @author Fabien Potencier <fabien@symfony.com>
   22   */
   23: interface LoaderInterface
   24  {
   25      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/MoFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Translation\Exception\InvalidResourceException;
   ..
   17   * @copyright Copyright (c) 2010, Union of RAD http://union-of-rad.org (http://lithify.me/)
   18   */
   19: class MoFileLoader extends FileLoader
   20  {
   21      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/PhpFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  /**
   15:  * PhpFileLoader loads translations from PHP files returning an array of translations.
   16   *
   17   * @author Fabien Potencier <fabien@symfony.com>
   18   */
   19: class PhpFileLoader extends FileLoader
   20  {
   21      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/PoFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  /**
   ..
   16   * @copyright Copyright (c) 2012, Clemens Tolboom
   17   */
   18: class PoFileLoader extends FileLoader
   19  {
   20      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/QtFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Config\Resource\FileResource;
   ..
   19  
   20  /**
   21:  * QtFileLoader loads translations from QT Translations XML files.
   22   *
   23   * @author Benjamin Eberlei <kontakt@beberlei.de>
   24   */
   25: class QtFileLoader implements LoaderInterface
   26  {
   27      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/XliffFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Config\Resource\FileResource;
   ..
   20  
   21  /**
   22:  * XliffFileLoader loads translations from XLIFF files.
   23   *
   24   * @author Fabien Potencier <fabien@symfony.com>
   25   */
   26: class XliffFileLoader implements LoaderInterface
   27  {
   28      /**

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Loader/YamlFileLoader.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Loader;
   13  
   14  use Symfony\Component\Translation\Exception\InvalidResourceException;
   ..
   19  
   20  /**
   21:  * YamlFileLoader loads translations from Yaml files.
   22   *
   23   * @author Fabien Potencier <fabien@symfony.com>
   24   */
   25: class YamlFileLoader extends FileLoader
   26  {
   27      private $yamlParser;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Reader/TranslationReader.php:
   13  
   14  use Symfony\Component\Finder\Finder;
   15: use Symfony\Component\Translation\Loader\LoaderInterface;
   16  use Symfony\Component\Translation\MessageCatalogue;
   17  
   ..
   24  {
   25      /**
   26:      * Loaders used for import.
   27       *
   28       * @var array
   29       */
   30:     private $loaders = [];
   31  
   32      /**
   33:      * Adds a loader to the translation extractor.
   34       *
   35:      * @param string          $format The format of the loader
   36:      * @param LoaderInterface $loader
   37       */
   38:     public function addLoader($format, LoaderInterface $loader)
   39      {
   40:         $this->loaders[$format] = $loader;
   41      }
   42  
   ..
   50          }
   51  
   52:         foreach ($this->loaders as $format => $loader) {
   53              // load any existing translation files
   54              $finder = new Finder();
   ..
   57              foreach ($files as $file) {
   58                  $domain = substr($file->getFilename(), 0, -1 * \strlen($extension) - 1);
   59:                 $catalogue->addCatalogue($loader->load($file->getPathname(), $catalogue->getLocale(), $domain));
   60              }
   61          }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/DataCollectorTranslatorTest.php:
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Translation\DataCollectorTranslator;
   16: use Symfony\Component\Translation\Loader\ArrayLoader;
   17  use Symfony\Component\Translation\Translator;
   18  
   ..
  107      {
  108          $translator = new Translator('en');
  109:         $translator->addLoader('array', new ArrayLoader());
  110          $translator->addResource('array', ['foo' => 'foo (en)'], 'en');
  111          $translator->addResource('array', ['bar' => 'bar (fr)'], 'fr');

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/LoggingTranslatorTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Translation\Loader\ArrayLoader;
   16  use Symfony\Component\Translation\LoggingTranslator;
   17  use Symfony\Component\Translation\Translator;
   ..
   45          $translator = new Translator('ar');
   46          $translator->setFallbackLocales(['en']);
   47:         $translator->addLoader('array', new ArrayLoader());
   48          $translator->addResource('array', ['some_message2' => 'one thing|%count% things'], 'en');
   49          $loggableTranslator = new LoggingTranslator($translator, $logger);

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/TranslatorCacheTest.php:
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\SelfCheckingResourceInterface;
   16: use Symfony\Component\Translation\Loader\ArrayLoader;
   17: use Symfony\Component\Translation\Loader\LoaderInterface;
   18  use Symfony\Component\Translation\MessageCatalogue;
   19  use Symfony\Component\Translation\Translator;
   ..
   65          // Prime the cache
   66          $translator = new Translator($locale, null, $this->tmpDir, $debug);
   67:         $translator->addLoader($format, new ArrayLoader());
   68          $translator->addResource($format, [$msgid => 'OK'], $locale);
   69          $translator->addResource($format, [$msgid.'+intl' => 'OK'], $locale, 'messages+intl-icu');
   ..
   71          $translator->trans($msgid.'+intl', [], 'messages+intl-icu');
   72  
   73:         // Try again and see we get a valid result whilst no loader can be used
   74          $translator = new Translator($locale, null, $this->tmpDir, $debug);
   75:         $translator->addLoader($format, $this->createFailingLoader());
   76          $translator->addResource($format, [$msgid => 'OK'], $locale);
   77          $translator->addResource($format, [$msgid.'+intl' => 'OK'], $locale, 'messages+intl-icu');
   ..
   83      {
   84          /*
   85:          * The testThatACacheIsUsed() test showed that we don't need the loader as long as the cache
   86           * is fresh.
   87           *
   88           * Now we add a Resource that is never fresh and make sure that the
   89:          * cache is discarded (the loader is called twice).
   90           *
   91           * We need to run this for debug=true only because in production the cache
   ..
  100          $catalogue->addResource(new StaleResource()); // better use a helper class than a mock, because it gets serialized in the cache and re-loaded
  101  
  102:         /** @var LoaderInterface|\PHPUnit_Framework_MockObject_MockObject $loader */
  103:         $loader = $this->getMockBuilder('Symfony\Component\Translation\Loader\LoaderInterface')->getMock();
  104:         $loader
  105              ->expects($this->exactly(2))
  106              ->method('load')
  ...
  110          // 1st pass
  111          $translator = new Translator($locale, null, $this->tmpDir, true);
  112:         $translator->addLoader($format, $loader);
  113          $translator->addResource($format, null, $locale);
  114          $translator->trans($msgid);
  ...
  116          // 2nd pass
  117          $translator = new Translator($locale, null, $this->tmpDir, true);
  118:         $translator->addLoader($format, $loader);
  119          $translator->addResource($format, null, $locale);
  120          $translator->trans($msgid);
  ...
  137          // Create a Translator and prime its cache
  138          $translator = new Translator($locale, null, $this->tmpDir, $debug);
  139:         $translator->addLoader($format, new ArrayLoader());
  140          $translator->addResource($format, [$msgid => 'OK'], $locale);
  141          $translator->trans($msgid);
  ...
  143          // Create another Translator with a different catalogue for the same locale
  144          $translator = new Translator($locale, null, $this->tmpDir, $debug);
  145:         $translator->addLoader($format, new ArrayLoader());
  146          $translator->addResource($format, [$msgid => 'FAIL'], $locale);
  147          $translator->trans($msgid);
  ...
  149          // Now the first translator must still have a usable cache.
  150          $translator = new Translator($locale, null, $this->tmpDir, $debug);
  151:         $translator->addLoader($format, $this->createFailingLoader());
  152          $translator->addResource($format, [$msgid => 'OK'], $locale);
  153          $this->assertEquals('OK', $translator->trans($msgid), '-> the cache was overwritten by another translator instance in '.($debug ? 'debug' : 'production'));
  ...
  175          $translator->setFallbackLocales(['b']);
  176  
  177:         $translator->addLoader('array', new ArrayLoader());
  178          $translator->addResource('array', ['foo' => 'foo (a)'], 'a');
  179          $translator->addResource('array', ['bar' => 'bar (b)'], 'b');
  ...
  188          $translator = new Translator('a', null, $this->tmpDir);
  189  
  190:         $translator->addLoader('array', new ArrayLoader());
  191          $translator->addResource('array', ['foo' => 'foo (a)'], 'a');
  192          $translator->addResource('array', ['bar' => 'bar (b)'], 'b');
  ...
  200           * As a safeguard against potential BC breaks, make sure that primary and fallback
  201           * catalogues (reachable via getFallbackCatalogue()) always contain the full set of
  202:          * messages provided by the loader. This must also be the case when these catalogues
  203           * are (internally) read from a cache.
  204           *
  ...
  213          $translator->setFallbackLocales(['b']);
  214  
  215:         $translator->addLoader('array', new ArrayLoader());
  216          $translator->addResource('array', ['foo' => 'foo (a)'], 'a');
  217          $translator->addResource('array', ['foo' => 'foo (b)'], 'b');
  ...
  232          $translator->setFallbackLocales(['b']);
  233  
  234:         $translator->addLoader('array', new ArrayLoader());
  235          $translator->addResource('array', ['foo' => 'foo (a)'], 'a');
  236          $translator->addResource('array', ['foo' => 'foo (b)'], 'b');
  ...
  249      {
  250          $resource = $this->getMockBuilder('Symfony\Component\Config\Resource\SelfCheckingResourceInterface')->getMock();
  251:         $loader = $this->getMockBuilder('Symfony\Component\Translation\Loader\LoaderInterface')->getMock();
  252          $resource->method('isFresh')->will($this->returnValue(false));
  253:         $loader
  254              ->expects($this->exactly(2))
  255              ->method('load')
  ...
  258          // prime the cache
  259          $translator = new Translator('fr', null, $this->tmpDir, true);
  260:         $translator->addLoader('loader', $loader);
  261:         $translator->addResource('loader', 'foo', 'fr');
  262          $translator->trans('foo');
  263  
  264          // prime the cache second time
  265          $translator = new Translator('fr', null, $this->tmpDir, true);
  266:         $translator->addLoader('loader', $loader);
  267:         $translator->addResource('loader', 'foo', 'fr');
  268          $translator->trans('foo');
  269      }
  ...
  288  
  289      /**
  290:      * @return LoaderInterface
  291       */
  292:     private function createFailingLoader()
  293      {
  294:         $loader = $this->getMockBuilder('Symfony\Component\Translation\Loader\LoaderInterface')->getMock();
  295:         $loader
  296              ->expects($this->never())
  297              ->method('load');
  298  
  299:         return $loader;
  300      }
  301  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/TranslatorTest.php:
   13  
   14  use PHPUnit\Framework\TestCase;
   15: use Symfony\Component\Translation\Loader\ArrayLoader;
   16  use Symfony\Component\Translation\MessageCatalogue;
   17  use Symfony\Component\Translation\Translator;
   ..
   96          $locale = 'whatever';
   97          $translator = new Translator($locale);
   98:         $translator->addLoader('loader-a', new ArrayLoader());
   99:         $translator->addLoader('loader-b', new ArrayLoader());
  100:         $translator->addResource('loader-a', ['foo' => 'foofoo'], $locale, 'domain-a');
  101:         $translator->addResource('loader-b', ['bar' => 'foobar'], $locale, 'domain-b');
  102  
  103          /*
  104           * Test that we get a single catalogue comprising messages
  105:          * from different loaders and different domains
  106           */
  107          $catalogue = $translator->getCatalogue($locale);
  ...
  113      {
  114          $translator = new Translator('en');
  115:         $translator->addLoader('array', new ArrayLoader());
  116          $translator->addResource('array', ['foo' => 'foofoo'], 'en');
  117          $translator->addResource('array', ['bar' => 'foobar'], 'fr');
  ...
  127      {
  128          $translator = new Translator('en');
  129:         $translator->addLoader('array', new ArrayLoader());
  130          $translator->addResource('array', ['foo' => 'foo (en)'], 'en');
  131          $translator->addResource('array', ['bar' => 'bar (fr)'], 'fr');
  ...
  164          $translator->setFallbackLocales(['en']);
  165  
  166:         $translator->addLoader('array', new ArrayLoader());
  167          $translator->addResource('array', ['bar' => 'foobar'], 'en');
  168  
  ...
  194      {
  195          $translator = new Translator('fr');
  196:         $translator->addLoader('array', new ArrayLoader());
  197  
  198          $translator->setFallbackLocales(['en']);
  ...
  209       * @expectedException \Symfony\Component\Translation\Exception\NotFoundResourceException
  210       */
  211:     public function testTransWithoutFallbackLocaleFile($format, $loader)
  212      {
  213:         $loaderClass = 'Symfony\\Component\\Translation\\Loader\\'.$loader;
  214          $translator = new Translator('en');
  215:         $translator->addLoader($format, new $loaderClass());
  216          $translator->addResource($format, __DIR__.'/fixtures/non-existing', 'en');
  217          $translator->addResource($format, __DIR__.'/fixtures/resources.'.$format, 'en');
  ...
  224       * @dataProvider getTransFileTests
  225       */
  226:     public function testTransWithFallbackLocaleFile($format, $loader)
  227      {
  228:         $loaderClass = 'Symfony\\Component\\Translation\\Loader\\'.$loader;
  229          $translator = new Translator('en_GB');
  230:         $translator->addLoader($format, new $loaderClass());
  231          $translator->addResource($format, __DIR__.'/fixtures/non-existing', 'en_GB');
  232          $translator->addResource($format, __DIR__.'/fixtures/resources.'.$format, 'en', 'resources');
  ...
  238      {
  239          $translator = new Translator('en_GB');
  240:         $translator->addLoader('array', new ArrayLoader());
  241          $translator->addResource('array', ['foo' => 'foofoo'], 'en_GB');
  242          $translator->addResource('array', ['bar' => 'foobar'], 'en_001');
  ...
  250      {
  251          $translator = new Translator('en_GB_scouse');
  252:         $translator->addLoader('array', new ArrayLoader());
  253          $translator->addResource('array', ['foo' => 'foofoo'], 'en_GB_scouse');
  254          $translator->addResource('array', ['bar' => 'foobar'], 'en_GB');
  ...
  264      {
  265          $translator = new Translator('az_Cyrl');
  266:         $translator->addLoader('array', new ArrayLoader());
  267          $translator->addResource('array', ['foo' => 'foofoo'], 'az_Cyrl');
  268          $translator->addResource('array', ['bar' => 'foobar'], 'az');
  ...
  274      {
  275          $translator = new Translator('en_US');
  276:         $translator->addLoader('array', new ArrayLoader());
  277          $translator->addResource('array', ['foo' => 'foofoo'], 'en_US');
  278          $translator->addResource('array', ['bar' => 'foobar'], 'en');
  ...
  283      {
  284          $translator = new Translator('fr_FR');
  285:         $translator->addLoader('array', new ArrayLoader());
  286          $translator->addResource('array', ['foo' => 'foo (en_US)'], 'en_US');
  287          $translator->addResource('array', ['bar' => 'bar (en)'], 'en');
  ...
  297          $translator = new Translator('fr');
  298          $translator->setFallbackLocales(['en']);
  299:         $translator->addLoader('array', new ArrayLoader());
  300          $this->assertEquals('non-existent', $translator->trans('non-existent'));
  301      }
  ...
  304       * @expectedException \Symfony\Component\Translation\Exception\RuntimeException
  305       */
  306:     public function testWhenAResourceHasNoRegisteredLoader()
  307      {
  308          $translator = new Translator('en');
  ...
  325      {
  326          $translator = new Translator('en_GB');
  327:         $translator->addLoader('yml', new \Symfony\Component\Translation\Loader\YamlFileLoader());
  328          $translator->addResource('yml', __DIR__.'/fixtures/empty.yml', 'en_GB');
  329          $translator->addResource('yml', __DIR__.'/fixtures/resources.yml', 'en');
  ...
  348      {
  349          $translator = new Translator('en');
  350:         $translator->addLoader('array', new ArrayLoader());
  351          $translator->addResource('array', [(string) $id => $translation], $locale, $domain);
  352  
  ...
  361      {
  362          $translator = new Translator('en');
  363:         $translator->addLoader('array', new ArrayLoader());
  364          $translator->addResource('array', ['foo' => 'foofoo'], 'en');
  365  
  ...
  373      {
  374          $translator = new Translator($locale);
  375:         $translator->addLoader('array', new ArrayLoader());
  376          $translator->addResource('array', ['test' => 'OK'], $locale);
  377  
  ...
  386      {
  387          $translator = new Translator('en');
  388:         $translator->addLoader('array', new ArrayLoader());
  389          $translator->addResource('array', $messages, 'fr', '');
  390  
  ...
  399      {
  400          $translator = new Translator('en');
  401:         $translator->addLoader('array', new ArrayLoader());
  402          $translator->addResource('array', [(string) $id => $translation], $locale, $domain);
  403  
  ...
  413      {
  414          $translator = new Translator('en');
  415:         $translator->addLoader('array', new ArrayLoader());
  416          $translator->addResource('array', ['foo' => 'foofoo'], 'en');
  417  
  ...
  426      {
  427          $translator = new Translator('en');
  428:         $translator->addLoader('array', new ArrayLoader());
  429          $translator->addResource('array', ['foo' => 'foofoo'], 'en');
  430  
  ...
  437      {
  438          return [
  439:             ['csv', 'CsvFileLoader'],
  440:             ['ini', 'IniFileLoader'],
  441:             ['mo', 'MoFileLoader'],
  442:             ['po', 'PoFileLoader'],
  443:             ['php', 'PhpFileLoader'],
  444:             ['ts', 'QtFileLoader'],
  445:             ['xlf', 'XliffFileLoader'],
  446:             ['yml', 'YamlFileLoader'],
  447:             ['json', 'JsonFileLoader'],
  448          ];
  449      }
  ...
  547      {
  548          $translator = new Translator('en');
  549:         $translator->addLoader('array', new ArrayLoader());
  550  
  551          $translator->addResource('array', ['some_message' => 'Hello %name%'], 'en');
  ...
  563          $translator = new Translator('ru');
  564          $translator->setFallbackLocales(['en']);
  565:         $translator->addLoader('array', new ArrayLoader());
  566          $translator->addResource('array', ['some_message2' => 'one thing|%count% things'], 'en');
  567  
  ...
  576          $translator = new Translator('ru');
  577          $translator->setFallbackLocales(['en_US', 'en']);
  578:         $translator->addLoader('array', new ArrayLoader());
  579          $translator->addResource('array', ['some_message2' => 'one thing|%count% things'], 'en_US');
  580  
  ...
  589          $translator = new Translator('ru');
  590          $translator->setFallbackLocales(['en']);
  591:         $translator->addLoader('array', new ArrayLoader());
  592  
  593          // consistent behavior with Translator::trans(), which returns the string

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/DependencyInjection/TranslationPassTest.php:
   23      public function testValidCollector()
   24      {
   25:         $loader = (new Definition())
   26:             ->addTag('translation.loader', ['alias' => 'xliff', 'legacy-alias' => 'xlf']);
   27  
   28          $reader = new Definition();
   ..
   34          $container->setDefinition('translator.default', $translator);
   35          $container->setDefinition('translation.reader', $reader);
   36:         $container->setDefinition('translation.xliff_loader', $loader);
   37  
   38          $pass = new TranslatorPass('translator.default', 'translation.reader');
   ..
   40  
   41          $expectedReader = (new Definition())
   42:             ->addMethodCall('addLoader', ['xliff', new Reference('translation.xliff_loader')])
   43:             ->addMethodCall('addLoader', ['xlf', new Reference('translation.xliff_loader')])
   44          ;
   45          $this->assertEquals($expectedReader, $reader);
   46  
   47:         $expectedLoader = (new Definition())
   48:             ->addTag('translation.loader', ['alias' => 'xliff', 'legacy-alias' => 'xlf'])
   49          ;
   50:         $this->assertEquals($expectedLoader, $loader);
   51  
   52:         $this->assertSame(['translation.xliff_loader' => ['xliff', 'xlf']], $translator->getArgument(3));
   53  
   54:         $expected = ['translation.xliff_loader' => new ServiceClosureArgument(new Reference('translation.xliff_loader'))];
   55          $this->assertEquals($expected, $container->getDefinition((string) $translator->getArgument(0))->getArgument(0));
   56      }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/CsvFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\CsvFileLoader;
   17  
   18: class CsvFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new CsvFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.csv';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals(['foo' => 'bar'], $catalogue->all('domain1'));
   ..
   31      public function testLoadDoesNothingIfEmpty()
   32      {
   33:         $loader = new CsvFileLoader();
   34          $resource = __DIR__.'/../fixtures/empty.csv';
   35:         $catalogue = $loader->load($resource, 'en', 'domain1');
   36  
   37          $this->assertEquals([], $catalogue->all('domain1'));
   ..
   45      public function testLoadNonExistingResource()
   46      {
   47:         $loader = new CsvFileLoader();
   48          $resource = __DIR__.'/../fixtures/not-exists.csv';
   49:         $loader->load($resource, 'en', 'domain1');
   50      }
   51  
   ..
   55      public function testLoadNonLocalResource()
   56      {
   57:         $loader = new CsvFileLoader();
   58          $resource = 'http://example.com/resources.csv';
   59:         $loader->load($resource, 'en', 'domain1');
   60      }
   61  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/IcuDatFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use Symfony\Component\Config\Resource\FileResource;
   15: use Symfony\Component\Translation\Loader\IcuDatFileLoader;
   16  
   17  /**
   18   * @requires extension intl
   19   */
   20: class IcuDatFileLoaderTest extends LocalizedTestCase
   21  {
   22      /**
   ..
   25      public function testLoadInvalidResource()
   26      {
   27:         $loader = new IcuDatFileLoader();
   28:         $loader->load(__DIR__.'/../fixtures/resourcebundle/corrupted/resources', 'es', 'domain2');
   29      }
   30  
   ..
   34          // you must specify an temporary build directory which is not the same as current directory and
   35          // MUST reside on the same partition. pkgdata -p resources -T /srv -d.packagelist.txt
   36:         $loader = new IcuDatFileLoader();
   37          $resource = __DIR__.'/../fixtures/resourcebundle/dat/resources';
   38:         $catalogue = $loader->load($resource, 'en', 'domain1');
   39  
   40          $this->assertEquals(['symfony' => 'Symfony 2 is great'], $catalogue->all('domain1'));
   ..
   45      public function testDatFrenchLoad()
   46      {
   47:         $loader = new IcuDatFileLoader();
   48          $resource = __DIR__.'/../fixtures/resourcebundle/dat/resources';
   49:         $catalogue = $loader->load($resource, 'fr', 'domain1');
   50  
   51          $this->assertEquals(['symfony' => 'Symfony 2 est génial'], $catalogue->all('domain1'));
   ..
   59      public function testLoadNonExistingResource()
   60      {
   61:         $loader = new IcuDatFileLoader();
   62:         $loader->load(__DIR__.'/../fixtures/non-existing.txt', 'en', 'domain1');
   63      }
   64  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/IcuResFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use Symfony\Component\Config\Resource\DirectoryResource;
   15: use Symfony\Component\Translation\Loader\IcuResFileLoader;
   16  
   17  /**
   18   * @requires extension intl
   19   */
   20: class IcuResFileLoaderTest extends LocalizedTestCase
   21  {
   22      public function testLoad()
   23      {
   24          // resource is build using genrb command
   25:         $loader = new IcuResFileLoader();
   26          $resource = __DIR__.'/../fixtures/resourcebundle/res';
   27:         $catalogue = $loader->load($resource, 'en', 'domain1');
   28  
   29          $this->assertEquals(['foo' => 'bar'], $catalogue->all('domain1'));
   ..
   37      public function testLoadNonExistingResource()
   38      {
   39:         $loader = new IcuResFileLoader();
   40:         $loader->load(__DIR__.'/../fixtures/non-existing.txt', 'en', 'domain1');
   41      }
   42  
   ..
   46      public function testLoadInvalidResource()
   47      {
   48:         $loader = new IcuResFileLoader();
   49:         $loader->load(__DIR__.'/../fixtures/resourcebundle/corrupted', 'en', 'domain1');
   50      }
   51  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/IniFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\IniFileLoader;
   17  
   18: class IniFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new IniFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.ini';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals(['foo' => 'bar'], $catalogue->all('domain1'));
   ..
   31      public function testLoadDoesNothingIfEmpty()
   32      {
   33:         $loader = new IniFileLoader();
   34          $resource = __DIR__.'/../fixtures/empty.ini';
   35:         $catalogue = $loader->load($resource, 'en', 'domain1');
   36  
   37          $this->assertEquals([], $catalogue->all('domain1'));
   ..
   45      public function testLoadNonExistingResource()
   46      {
   47:         $loader = new IniFileLoader();
   48          $resource = __DIR__.'/../fixtures/non-existing.ini';
   49:         $loader->load($resource, 'en', 'domain1');
   50      }
   51  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/JsonFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\JsonFileLoader;
   17  
   18: class JsonFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new JsonFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.json';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals(['foo' => 'bar'], $catalogue->all('domain1'));
   ..
   31      public function testLoadDoesNothingIfEmpty()
   32      {
   33:         $loader = new JsonFileLoader();
   34          $resource = __DIR__.'/../fixtures/empty.json';
   35:         $catalogue = $loader->load($resource, 'en', 'domain1');
   36  
   37          $this->assertEquals([], $catalogue->all('domain1'));
   ..
   45      public function testLoadNonExistingResource()
   46      {
   47:         $loader = new JsonFileLoader();
   48          $resource = __DIR__.'/../fixtures/non-existing.json';
   49:         $loader->load($resource, 'en', 'domain1');
   50      }
   51  
   ..
   56      public function testParseException()
   57      {
   58:         $loader = new JsonFileLoader();
   59          $resource = __DIR__.'/../fixtures/malformed.json';
   60:         $loader->load($resource, 'en', 'domain1');
   61      }
   62  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/LocalizedTestCase.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/MoFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\MoFileLoader;
   17  
   18: class MoFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new MoFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.mo';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals(['foo' => 'bar'], $catalogue->all('domain1'));
   ..
   31      public function testLoadPlurals()
   32      {
   33:         $loader = new MoFileLoader();
   34          $resource = __DIR__.'/../fixtures/plurals.mo';
   35:         $catalogue = $loader->load($resource, 'en', 'domain1');
   36  
   37          $this->assertEquals(['foo' => 'bar', 'foos' => '{0} bar|{1} bars'], $catalogue->all('domain1'));
   ..
   45      public function testLoadNonExistingResource()
   46      {
   47:         $loader = new MoFileLoader();
   48          $resource = __DIR__.'/../fixtures/non-existing.mo';
   49:         $loader->load($resource, 'en', 'domain1');
   50      }
   51  
   ..
   55      public function testLoadInvalidResource()
   56      {
   57:         $loader = new MoFileLoader();
   58          $resource = __DIR__.'/../fixtures/empty.mo';
   59:         $loader->load($resource, 'en', 'domain1');
   60      }
   61  
   62      public function testLoadEmptyTranslation()
   63      {
   64:         $loader = new MoFileLoader();
   65          $resource = __DIR__.'/../fixtures/empty-translation.mo';
   66:         $catalogue = $loader->load($resource, 'en', 'message');
   67  
   68          $this->assertEquals([], $catalogue->all('message'));

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/PhpFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\PhpFileLoader;
   17  
   18: class PhpFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new PhpFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.php';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals(['foo' => 'bar'], $catalogue->all('domain1'));
   ..
   34      public function testLoadNonExistingResource()
   35      {
   36:         $loader = new PhpFileLoader();
   37          $resource = __DIR__.'/../fixtures/non-existing.php';
   38:         $loader->load($resource, 'en', 'domain1');
   39      }
   40  
   ..
   44      public function testLoadThrowsAnExceptionIfFileNotLocal()
   45      {
   46:         $loader = new PhpFileLoader();
   47          $resource = 'http://example.com/resources.php';
   48:         $loader->load($resource, 'en', 'domain1');
   49      }
   50  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/PoFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\PoFileLoader;
   17  
   18: class PoFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new PoFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.po';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals(['foo' => 'bar', 'bar' => 'foo'], $catalogue->all('domain1'));
   ..
   31      public function testLoadPlurals()
   32      {
   33:         $loader = new PoFileLoader();
   34          $resource = __DIR__.'/../fixtures/plurals.po';
   35:         $catalogue = $loader->load($resource, 'en', 'domain1');
   36  
   37          $this->assertEquals(['foo' => 'bar', 'foos' => 'bar|bars'], $catalogue->all('domain1'));
   ..
   42      public function testLoadDoesNothingIfEmpty()
   43      {
   44:         $loader = new PoFileLoader();
   45          $resource = __DIR__.'/../fixtures/empty.po';
   46:         $catalogue = $loader->load($resource, 'en', 'domain1');
   47  
   48          $this->assertEquals([], $catalogue->all('domain1'));
   ..
   56      public function testLoadNonExistingResource()
   57      {
   58:         $loader = new PoFileLoader();
   59          $resource = __DIR__.'/../fixtures/non-existing.po';
   60:         $loader->load($resource, 'en', 'domain1');
   61      }
   62  
   63      public function testLoadEmptyTranslation()
   64      {
   65:         $loader = new PoFileLoader();
   66          $resource = __DIR__.'/../fixtures/empty-translation.po';
   67:         $catalogue = $loader->load($resource, 'en', 'domain1');
   68  
   69          $this->assertEquals(['foo' => ''], $catalogue->all('domain1'));
   ..
   74      public function testEscapedId()
   75      {
   76:         $loader = new PoFileLoader();
   77          $resource = __DIR__.'/../fixtures/escaped-id.po';
   78:         $catalogue = $loader->load($resource, 'en', 'domain1');
   79  
   80          $messages = $catalogue->all('domain1');
   ..
   85      public function testEscapedIdPlurals()
   86      {
   87:         $loader = new PoFileLoader();
   88          $resource = __DIR__.'/../fixtures/escaped-id-plurals.po';
   89:         $catalogue = $loader->load($resource, 'en', 'domain1');
   90  
   91          $messages = $catalogue->all('domain1');
   ..
   98      public function testSkipFuzzyTranslations()
   99      {
  100:         $loader = new PoFileLoader();
  101          $resource = __DIR__.'/../fixtures/fuzzy-translations.po';
  102:         $catalogue = $loader->load($resource, 'en', 'domain1');
  103  
  104          $messages = $catalogue->all('domain1');

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/QtFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\QtFileLoader;
   17  
   18: class QtFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new QtFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.ts';
   24:         $catalogue = $loader->load($resource, 'en', 'resources');
   25  
   26          $this->assertEquals(['foo' => 'bar'], $catalogue->all('resources'));
   ..
   34      public function testLoadNonExistingResource()
   35      {
   36:         $loader = new QtFileLoader();
   37          $resource = __DIR__.'/../fixtures/non-existing.ts';
   38:         $loader->load($resource, 'en', 'domain1');
   39      }
   40  
   ..
   44      public function testLoadNonLocalResource()
   45      {
   46:         $loader = new QtFileLoader();
   47          $resource = 'http://domain1.com/resources.ts';
   48:         $loader->load($resource, 'en', 'domain1');
   49      }
   50  
   ..
   54      public function testLoadInvalidResource()
   55      {
   56:         $loader = new QtFileLoader();
   57          $resource = __DIR__.'/../fixtures/invalid-xml-resources.xlf';
   58:         $loader->load($resource, 'en', 'domain1');
   59      }
   60  
   61      public function testLoadEmptyResource()
   62      {
   63:         $loader = new QtFileLoader();
   64          $resource = __DIR__.'/../fixtures/empty.xlf';
   65  
   ..
   71          }
   72  
   73:         $loader->load($resource, 'en', 'domain1');
   74      }
   75  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/XliffFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\XliffFileLoader;
   17  
   18: class XliffFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new XliffFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.xlf';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals('en', $catalogue->getLocale());
   ..
   36          $this->assertSame([], libxml_get_errors());
   37  
   38:         $loader = new XliffFileLoader();
   39          $resource = __DIR__.'/../fixtures/resources.xlf';
   40:         $catalogue = $loader->load($resource, 'en', 'domain1');
   41  
   42          $this->assertEquals('en', $catalogue->getLocale());
   ..
   50      public function testLoadWithExternalEntitiesDisabled()
   51      {
   52:         $disableEntities = libxml_disable_entity_loader(true);
   53  
   54:         $loader = new XliffFileLoader();
   55          $resource = __DIR__.'/../fixtures/resources.xlf';
   56:         $catalogue = $loader->load($resource, 'en', 'domain1');
   57  
   58:         libxml_disable_entity_loader($disableEntities);
   59  
   60          $this->assertEquals('en', $catalogue->getLocale());
   ..
   64      public function testLoadWithResname()
   65      {
   66:         $loader = new XliffFileLoader();
   67:         $catalogue = $loader->load(__DIR__.'/../fixtures/resname.xlf', 'en', 'domain1');
   68  
   69          $this->assertEquals(['foo' => 'bar', 'bar' => 'baz', 'baz' => 'foo', 'qux' => 'qux source'], $catalogue->all('domain1'));
   ..
   72      public function testIncompleteResource()
   73      {
   74:         $loader = new XliffFileLoader();
   75:         $catalogue = $loader->load(__DIR__.'/../fixtures/resources.xlf', 'en', 'domain1');
   76  
   77          $this->assertEquals(['foo' => 'bar', 'extra' => 'extra', 'key' => '', 'test' => 'with'], $catalogue->all('domain1'));
   ..
   80      public function testEncoding()
   81      {
   82:         $loader = new XliffFileLoader();
   83:         $catalogue = $loader->load(__DIR__.'/../fixtures/encoding.xlf', 'en', 'domain1');
   84  
   85          $this->assertEquals(utf8_decode('föö'), $catalogue->get('bar', 'domain1'));
   ..
   90      public function testTargetAttributesAreStoredCorrectly()
   91      {
   92:         $loader = new XliffFileLoader();
   93:         $catalogue = $loader->load(__DIR__.'/../fixtures/with-attributes.xlf', 'en', 'domain1');
   94  
   95          $metadata = $catalogue->getMetadata('foo', 'domain1');
   ..
  102      public function testLoadInvalidResource()
  103      {
  104:         $loader = new XliffFileLoader();
  105:         $loader->load(__DIR__.'/../fixtures/resources.php', 'en', 'domain1');
  106      }
  107  
  ...
  111      public function testLoadResourceDoesNotValidate()
  112      {
  113:         $loader = new XliffFileLoader();
  114:         $loader->load(__DIR__.'/../fixtures/non-valid.xlf', 'en', 'domain1');
  115      }
  116  
  ...
  120      public function testLoadNonExistingResource()
  121      {
  122:         $loader = new XliffFileLoader();
  123          $resource = __DIR__.'/../fixtures/non-existing.xlf';
  124:         $loader->load($resource, 'en', 'domain1');
  125      }
  126  
  ...
  130      public function testLoadThrowsAnExceptionIfFileNotLocal()
  131      {
  132:         $loader = new XliffFileLoader();
  133          $resource = 'http://example.com/resources.xlf';
  134:         $loader->load($resource, 'en', 'domain1');
  135      }
  136  
  ...
  141      public function testDocTypeIsNotAllowed()
  142      {
  143:         $loader = new XliffFileLoader();
  144:         $loader->load(__DIR__.'/../fixtures/withdoctype.xlf', 'en', 'domain1');
  145      }
  146  
  147      public function testParseEmptyFile()
  148      {
  149:         $loader = new XliffFileLoader();
  150          $resource = __DIR__.'/../fixtures/empty.xlf';
  151  
  ...
  157          }
  158  
  159:         $loader->load($resource, 'en', 'domain1');
  160      }
  161  
  162      public function testLoadNotes()
  163      {
  164:         $loader = new XliffFileLoader();
  165:         $catalogue = $loader->load(__DIR__.'/../fixtures/withnote.xlf', 'en', 'domain1');
  166  
  167          $this->assertEquals(['notes' => [['priority' => 1, 'content' => 'foo']], 'id' => '1'], $catalogue->getMetadata('foo', 'domain1'));
  ...
  174      public function testLoadVersion2()
  175      {
  176:         $loader = new XliffFileLoader();
  177          $resource = __DIR__.'/../fixtures/resources-2.0.xlf';
  178:         $catalogue = $loader->load($resource, 'en', 'domain1');
  179  
  180          $this->assertEquals('en', $catalogue->getLocale());
  ...
  192      public function testLoadVersion2WithNoteMeta()
  193      {
  194:         $loader = new XliffFileLoader();
  195          $resource = __DIR__.'/../fixtures/resources-notes-meta.xlf';
  196:         $catalogue = $loader->load($resource, 'en', 'domain1');
  197  
  198          $this->assertEquals('en', $catalogue->getLocale());
  ...
  232      public function testLoadVersion2WithMultiSegmentUnit()
  233      {
  234:         $loader = new XliffFileLoader();
  235          $resource = __DIR__.'/../fixtures/resources-2.0-multi-segment-unit.xlf';
  236:         $catalog = $loader->load($resource, 'en', 'domain1');
  237  
  238          $this->assertSame('en', $catalog->getLocale());

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Tests/Loader/YamlFileLoaderTest.php:
   10   */
   11  
   12: namespace Symfony\Component\Translation\Tests\Loader;
   13  
   14  use PHPUnit\Framework\TestCase;
   15  use Symfony\Component\Config\Resource\FileResource;
   16: use Symfony\Component\Translation\Loader\YamlFileLoader;
   17  
   18: class YamlFileLoaderTest extends TestCase
   19  {
   20      public function testLoad()
   21      {
   22:         $loader = new YamlFileLoader();
   23          $resource = __DIR__.'/../fixtures/resources.yml';
   24:         $catalogue = $loader->load($resource, 'en', 'domain1');
   25  
   26          $this->assertEquals(['foo' => 'bar'], $catalogue->all('domain1'));
   ..
   31      public function testLoadDoesNothingIfEmpty()
   32      {
   33:         $loader = new YamlFileLoader();
   34          $resource = __DIR__.'/../fixtures/empty.yml';
   35:         $catalogue = $loader->load($resource, 'en', 'domain1');
   36  
   37          $this->assertEquals([], $catalogue->all('domain1'));
   ..
   45      public function testLoadNonExistingResource()
   46      {
   47:         $loader = new YamlFileLoader();
   48          $resource = __DIR__.'/../fixtures/non-existing.yml';
   49:         $loader->load($resource, 'en', 'domain1');
   50      }
   51  
   ..
   55      public function testLoadThrowsAnExceptionIfFileNotLocal()
   56      {
   57:         $loader = new YamlFileLoader();
   58          $resource = 'http://example.com/resources.yml';
   59:         $loader->load($resource, 'en', 'domain1');
   60      }
   61  
   ..
   65      public function testLoadThrowsAnExceptionIfNotAnArray()
   66      {
   67:         $loader = new YamlFileLoader();
   68          $resource = __DIR__.'/../fixtures/non-valid.yml';
   69:         $loader->load($resource, 'en', 'domain1');
   70      }
   71  }

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/translation/Util/XliffUtils.php:
   62          $xliffVersion = static::getVersionNumber($dom);
   63          $internalErrors = libxml_use_internal_errors(true);
   64:         $disableEntities = libxml_disable_entity_loader(false);
   65  
   66          $isValid = @$dom->schemaValidateSource(self::getSchema($xliffVersion));
   67          if (!$isValid) {
   68:             libxml_disable_entity_loader($disableEntities);
   69  
   70              return self::getXmlErrors($internalErrors);
   71          }
   72  
   73:         libxml_disable_entity_loader($disableEntities);
   74  
   75          $dom->normalizeDocument();

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/var-dumper/Caster/LinkStub.php:
   70  
   71              foreach (get_declared_classes() as $class) {
   72:                 if ('C' === $class[0] && 0 === strpos($class, 'ComposerAutoloaderInit')) {
   73                      $r = new \ReflectionClass($class);
   74                      $v = \dirname(\dirname($r->getFileName()));

/Users/nour/Documents/Projects/Web/KIB/vendor/symfony/var-dumper/Tests/Dumper/CliDumperTest.php:
   17  use Symfony\Component\VarDumper\Test\VarDumperTestTrait;
   18  use Twig\Environment;
   19: use Twig\Loader\FilesystemLoader;
   20  
   21  /**
   ..
  356  
  357          require_once __DIR__.'/../Fixtures/Twig.php';
  358:         $twig = new \__TwigTemplate_VarDumperFixture_u75a09(new Environment(new FilesystemLoader()));
  359  
  360          $dumper = new CliDumper();

/Users/nour/Documents/Projects/Web/KIB/vendor/theseer/tokenizer/build.xml:
    1  <?xml version="1.0" encoding="UTF-8"?>
    2  <project name="Tokenizer" default="setup">
    3:     <target name="setup" depends="clean,install-tools,generate-autoloader"/>
    4  
    5      <target name="clean" unless="clean.done" description="Cleanup build artifacts">
    .
   27      </target>
   28  
   29:     <target name="generate-autoloader" depends="install-tools" description="Generate autoloader using PHPAB">
   30          <exec executable="${basedir}/tools/phpab" taskname="phpab">
   31              <arg value="--output"/>
   ..
   35      </target>
   36  
   37:     <target name="test" depends="generate-autoloader" description="Run tests">
   38          <exec executable="${basedir}/tools/phpunit" taskname="phpunit"/>
   39      </target>

/Users/nour/Documents/Projects/Web/KIB/vendor/vlucas/phpdotenv/src/Dotenv.php:
   16  {
   17      /**
   18:      * The loader instance.
   19       *
   20:      * @var \Dotenv\Loader
   21       */
   22:     protected $loader;
   23  
   24      /**
   25       * Create a new dotenv instance.
   26       *
   27:      * @param \Dotenv\Loader $loader
   28       *
   29       * @return void
   30       */
   31:     public function __construct(Loader $loader)
   32      {
   33:         $this->loader = $loader;
   34      }
   35  
   ..
   45      public static function create($paths, $file = null, FactoryInterface $envFactory = null)
   46      {
   47:         $loader = new Loader(
   48              self::getFilePaths((array) $paths, $file ?: '.env'),
   49              $envFactory ?: new DotenvFactory(),
   ..
   51          );
   52  
   53:         return new self($loader);
   54      }
   55  
   ..
  121      protected function loadData($overload = false)
  122      {
  123:         return $this->loader->setImmutable(!$overload)->load();
  124      }
  125  
  ...
  133      public function required($variables)
  134      {
  135:         return new Validator((array) $variables, $this->loader);
  136      }
  137  
  ...
  143      public function getEnvironmentVariableNames()
  144      {
  145:         return $this->loader->getEnvironmentVariableNames();
  146      }
  147  }

/Users/nour/Documents/Projects/Web/KIB/vendor/vlucas/phpdotenv/src/Loader.php:
    9  
   10  /**
   11:  * This is the loader class.
   12   *
   13   * It's responsible for loading variables by reading a file from disk and:
   ..
   17   *                                                                             value"`
   18   */
   19: class Loader
   20  {
   21      /**
   ..
   48  
   49      /**
   50:      * Create a new loader instance.
   51       *
   52       * @param string[]                             $filePaths

/Users/nour/Documents/Projects/Web/KIB/vendor/vlucas/phpdotenv/src/Validator.php:
   20  
   21      /**
   22:      * The loader instance.
   23       *
   24:      * @var \Dotenv\Loader
   25       */
   26:     protected $loader;
   27  
   28      /**
   ..
   30       *
   31       * @param string[]       $variables
   32:      * @param \Dotenv\Loader $loader
   33       *
   34       * @throws \Dotenv\Exception\ValidationException
   ..
   36       * @return void
   37       */
   38:     public function __construct(array $variables, Loader $loader)
   39      {
   40          $this->variables = $variables;
   41:         $this->loader = $loader;
   42  
   43          $this->assertCallback(
   ..
  138  
  139          foreach ($this->variables as $variable) {
  140:             if ($callback($this->loader->getEnvironmentVariable($variable)) === false) {
  141                  $failing[] = sprintf('%s %s', $variable, $message);
  142              }

/Users/nour/Documents/Projects/Web/KIB/vendor/vlucas/phpdotenv/src/Environment/FactoryInterface.php:
    7   *
    8   * If you need custom implementations of the variables interface, implement
    9:  * this interface, and use your implementation in the loader.
   10   */
   11  interface FactoryInterface

2432 matches across 252 files
